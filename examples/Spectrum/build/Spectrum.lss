
/home/matt/DC/DisplayCore/Drivers/SSD1289/examples/Spectrum/build/Spectrum.elf:     file format elf32-tradlittlemips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .image_ptr_table 00000008  9d0000f8  9d0000f8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_excpt    00000010  9d000180  9d000180  00020180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .reset        00000018  9d001000  9d001000  00021000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .vectors      00000354  9d001018  9d001018  00021018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .startup      000001d4  9d00136c  9d00136c  0002136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text         00000088  9d001540  9d001540  00021540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .init         00000024  9d0015c8  9d0015c8  000215c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .fini         0000001c  9d0015ec  9d0015ec  000215ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .ctors        0000000c  9d001608  9d001608  00021608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .dtors        00000008  9d001614  9d001614  00021614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .header_info  0000004c  9d00161c  9d00161c  0002161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .ram_exchange_data 00000008  80000380  80000380  00010000  2**0
                  ALLOC
 12 .rodata       000002a8  9d001668  9d001668  00021668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .dbg_data     00000380  80000000  80000000  00010000  2**0
                  ALLOC
 14 .jcr          00000004  80000388  80000388  00010388  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 15 .eh_frame     00000004  8000038c  8000038c  0001038c  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 16 .sdata        00000324  80000390  80000390  00010390  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, NEAR
 17 .sbss         00000294  800006b4  800006b4  000106b4  2**3
                  ALLOC, NEVER_LOAD
 18 .comment      00000086  00000000  00000000  00030898  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000be0  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   00023ca2  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 000055f4  00000000  00000000  000551a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00005919  00000000  00000000  0005a796  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00001ab0  00000000  00000000  000600b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    000006af  00000000  00000000  00061b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    0000a8c9  00000000  00000000  0006220f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 000011c0  00000000  00000000  0006cad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 27 .gnu.attributes 00000010  00000000  00000000  0006dc98  2**0
                  CONTENTS, READONLY
 28 .tlb_init_values 00000030  bd0000a0  bd0000a0  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 29 .reginfo      00000018  00000000  00000000  0006dca8  2**2
                  CONTENTS, READONLY, LINK_ONCE_SAME_SIZE
 30 .stack        00000800  80002bd0  80002bd0  00000000  2**1
                  READONLY
 31 .__vector_offset_BF810540_data 00000178  bf810540  bf810540  00030540  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 32 .__vector_offset_BF8107A4_data 00000098  bf8107a4  bf8107a4  000307a4  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 33 .__vector_offset_BF810740_data 0000005c  bf810740  bf810740  00030740  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 34 .__vector_offset_BF8106F4_data 00000040  bf8106f4  bf8106f4  000306f4  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 35 .__vector_offset_BF810874_data 00000018  bf810874  bf810874  00030874  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 36 .__vector_offset_BF8106D8_data 00000014  bf8106d8  bf8106d8  000306d8  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 37 .__vector_offset_BF810858_data 00000014  bf810858  bf810858  00030858  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 38 .__vector_offset_BF810840_data 0000000c  bf810840  bf810840  00030840  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 39 .__vector_offset_BF810850_data 00000004  bf810850  bf810850  00030850  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 40 .__vector_offset_BF810894_data 00000004  bf810894  bf810894  00030894  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD, ABSOLUTE
 41 .bss._ZL4Chan.Chan 000011c0  80000948  80000948  00010948  2**2
                  ALLOC, NEVER_LOAD
 42 .data.impure_data.impure_data 00000418  80001b08  80001b08  00011b08  2**3
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 43 .data.__malloc_av_.__malloc_av_ 00000408  80001f20  80001f20  00011f20  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 44 .bss.__malloc_current_mallinfo.__malloc_current_mallinfo 00000028  80002328  80002328  00012328  2**2
                  ALLOC, NEVER_LOAD
 45 .bss          00000020  80002350  80002350  00012328  2**2
                  ALLOC, NEVER_LOAD
 46 .bss.mem.1298.mem 00000018  80002370  80002370  00012328  2**2
                  ALLOC, NEVER_LOAD
 47 .data._ZN10__cxxabiv119__terminate_handlerE.__terminate_handler 00000004  80002388  80002388  00012388  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 48 .libc.data.__fdlib_version 00000004  8000238c  8000238c  0001238c  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 49 .libc.data._impure_ptr 00000004  80002390  80002390  00012390  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 50 .data.__malloc_trim_threshold.__malloc_trim_threshold 00000004  80002394  80002394  00012394  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 51 .bss.__malloc_top_pad.__malloc_top_pad 00000004  80002398  80002398  00012398  2**2
                  ALLOC, NEVER_LOAD
 52 .data.__malloc_sbrk_base.__malloc_sbrk_base 00000004  8000239c  8000239c  0001239c  2**2
                  CONTENTS, ALLOC, DATA, NEVER_LOAD
 53 .bss.errno.errno 00000004  800023a0  800023a0  000123a0  2**2
                  ALLOC, NEVER_LOAD
 54 .bss._minbrk._minbrk 00000004  800023a4  800023a4  000123a0  2**2
                  ALLOC, NEVER_LOAD
 55 .bss._maxbrk._maxbrk 00000004  800023a8  800023a8  000123a0  2**2
                  ALLOC, NEVER_LOAD
 56 .bss.curbrk.curbrk 00000004  800023ac  800023ac  000123a0  2**2
                  ALLOC, NEVER_LOAD
 57 .dinit        00001140  9d001910  9d001910  00021910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .rodata._ZN5Fonts8SinclairE.Sinclair 00000908  9d002a50  9d002a50  00022a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .rodata._ZN5Fonts7DefaultE.Default 000008fc  9d003358  9d003358  00023358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__ieee754_pow 0000087c  9d003c54  9d003c54  00023c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text._ZN7SSD128912startDisplayEv 000006b0  9d0044d0  9d0044d0  000244d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.initADC 000003f8  9d004b80  9d004b80  00024b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text._ZN11DisplayCore8drawCharEiihtt 000003cc  9d004f78  9d004f78  00024f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.loop    000003c4  9d005344  9d005344  00025344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.pow     00000394  9d005708  9d005708  00025708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text._ZN7SSD128916initializeDeviceEv 00000314  9d005a9c  9d005a9c  00025a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text._ZN11DisplayCore12fillTriangleEiiiiiit 000002cc  9d005db0  9d005db0  00025db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text._ZN11DisplayCore10fillBezierEiiiiiiiiit 000002a4  9d00607c  9d00607c  0002607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text._ZN11DisplayCore10drawBezierEiiiiiiiiit 00000294  9d006320  9d006320  00026320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text._free_r 00000280  9d0065b4  9d0065b4  000265b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text._ZN11DisplayCore10drawCircleEiiit 00000274  9d006834  9d006834  00026834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text         0000024c  9d006aa8  9d006aa8  00026aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text._Z14HandlePWMServom 00000238  9d006cf4  9d006cf4  00026cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text._ZN7SSD12897commandEt 00000230  9d006f2c  9d006f2c  00026f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text._ZN7SSD12894dataEt 00000230  9d00715c  9d00715c  0002715c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__ieee754_sqrt 00000208  9d00738c  9d00738c  0002738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text._ZN11DisplayCore16drawCircleHelperEiiiit 000001f0  9d007594  9d007594  00027594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text._ZN11DisplayCore13drawRoundRectEiiiiit 000001d0  9d007784  9d007784  00027784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text._scheduleTask 000001b0  9d007954  9d007954  00027954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text._ZN11DisplayCore16fillCircleHelperEiiiiit 000001a0  9d007b04  9d007b04  00027b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text._ZN11DisplayCore8drawLineEiiiiit 000001a0  9d007ca4  9d007ca4  00027ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text._ZN11DisplayCore12clipToScreenERiS0_S0_S0_ 0000018c  9d007e44  9d007e44  00027e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.rint    00000188  9d007fd0  9d007fd0  00027fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text._ZN11DisplayCore5writeEh 00000184  9d008158  9d008158  00028158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text._ZN7SSD1289C2Ehhhhhhhhhhhhhhhhhhhhh 00000180  9d0082dc  9d0082dc  000282dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text._ZN11DisplayCore8drawLineEiiiit 00000170  9d00845c  9d00845c  0002845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text._ZN7SSD128911setRotationEi 0000016c  9d0085cc  9d0085cc  000285cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text._ZN7SSD128913setAddrWindowEiiii 00000164  9d008738  9d008738  00028738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text._Z14regularStripesttmm 00000160  9d00889c  9d00889c  0002889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.pinMode 00000160  9d0089fc  9d0089fc  000289fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text._sbrk_init 00000158  9d008b5c  9d008b5c  00028b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text._Z21SoftPWMServoPinEnablemb 00000154  9d008cb4  9d008cb4  00028cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text._ZN11DisplayCore10drawBitmapEiiPKhiit 0000014c  9d008e08  9d008e08  00028e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.scalbn  00000130  9d008f54  9d008f54  00028f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE 00000128  9d009084  9d009084  00029084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text._Z13randomStripestt 00000124  9d0091ac  9d0091ac  000291ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text._ZL11CopyBuffersv 00000120  9d0092d0  9d0092d0  000292d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text._ZN11DisplayCore13fillRoundRectEiiiiit 0000011c  9d0093f0  9d0093f0  000293f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text._malloc_trim_r 0000011c  9d00950c  9d00950c  0002950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text._ZN11DisplayCore10fillCircleEiiit 00000118  9d009628  9d009628  00029628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .rodata       00000100  9d009740  9d009740  00029740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text._ZN11DisplayCore8drawRGBAEiiPKtiit 000000fc  9d009840  9d009840  00029840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text._ZN11DisplayCore13drawRectangleEiiiit 000000fc  9d00993c  9d00993c  0002993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text._ZN11DisplayCore12drawTriangleEiiiiiit 000000f8  9d009a38  9d009a38  00029a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text._ZN11DisplayCore7drawRGBEiiPKtii 000000ec  9d009b30  9d009b30  00029b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text._Z3Addm 000000e4  9d009c1c  9d009c1c  00029c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text._ZN11DisplayCore20translateCoordinatesEPiS0_ 000000e0  9d009d00  9d009d00  00029d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.digitalWrite 000000dc  9d009de0  9d009de0  00029de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text._ZN11DisplayCore13fillRectangleEiiiit 000000d4  9d009ebc  9d009ebc  00029ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text._ZN7SSD128913fillRectangleEiiiit 000000d0  9d009f90  9d009f90  00029f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text._ZN11DisplayCore9map3Dto2DER7point3d 000000cc  9d00a060  9d00a060  0002a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text._Z16SoftPWMServoInitv 000000c8  9d00a12c  9d00a12c  0002a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text._Z20SoftPWMServoRawWritemmb 000000c8  9d00a1f4  9d00a1f4  0002a1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text._ZN11DisplayCore3mixEtti 000000bc  9d00a2bc  9d00a2bc  0002a2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text._ZN11DisplayCore11stringWidthEPKc 000000bc  9d00a378  9d00a378  0002a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text._sbrk   000000bc  9d00a434  9d00a434  0002a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text._GLOBAL__sub_I_tft 000000b8  9d00a4f0  9d00a4f0  0002a4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text._ZN7SSD128916drawVerticalLineEiiit 000000b0  9d00a5a8  9d00a5a8  0002a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.init    000000b0  9d00a658  9d00a658  0002a658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text._raise_r 000000b0  9d00a708  9d00a708  0002a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text._ZN7SSD128918drawHorizontalLineEiiit 000000ac  9d00a7b8  9d00a7b8  0002a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text._Z15setBorderSinglet 000000a8  9d00a864  9d00a864  0002a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text._Z7silencem 0000009c  9d00a90c  9d00a90c  0002a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text._ZN11DisplayCoreC2Ev 0000009c  9d00a9a8  9d00a9a8  0002a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text._ZN11DisplayCore18drawHorizontalLineEiiit 0000009c  9d00aa44  9d00aa44  0002aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text._ZN11DisplayCore16drawVerticalLineEiiit 0000009c  9d00aae0  9d00aae0  0002aae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text._ZN11DisplayCore10fillScreenEt 0000009c  9d00ab7c  9d00ab7c  0002ab7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text._ZN11DisplayCore8setPixelEiiit 00000098  9d00ac18  9d00ac18  0002ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text._ZN11DisplayCore10windowDataEt 00000098  9d00acb0  9d00acb0  0002acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.attachCoreTimerService 00000098  9d00ad48  9d00ad48  0002ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE 00000094  9d00ade0  9d00ade0  0002ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .rodata.digital_pin_to_bit_mask_PGM.digital_pin_to_bit_mask_PGM 00000090  9d00ae74  9d00ae74  0002ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .rodata.digital_pin_to_timer_PGM.digital_pin_to_timer_PGM 00000090  9d00af04  9d00af04  0002af04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text._ZN7SSD12898setPixelEiit 00000084  9d00af94  9d00af94  0002af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text._Z10loadHeaderm 00000080  9d00b018  9d00b018  0002b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text._ZN11DisplayCore5writeEPKhm 00000080  9d00b098  9d00b098  0002b098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj 0000007c  9d00b118  9d00b118  0002b118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_ 0000007c  9d00b194  9d00b194  0002b194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text._Z6Removem 00000078  9d00b210  9d00b210  0002b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE 00000074  9d00b288  9d00b288  0002b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text._ZN7SSD128910windowDataEPti 00000070  9d00b2fc  9d00b2fc  0002b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text._ZN11DisplayCore10windowDataEPKti 00000070  9d00b36c  9d00b36c  0002b36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.__fpclassifyd 0000006c  9d00b3dc  9d00b3dc  0002b3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv 00000068  9d00b448  9d00b448  0002b448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.setup   00000064  9d00b4b0  9d00b4b0  0002b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.strcmp  00000064  9d00b514  9d00b514  0002b514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text._Z8loadBodym 00000060  9d00b578  9d00b578  0002b578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE 0000005c  9d00b5d8  9d00b5d8  0002b5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.setIntPriority 00000058  9d00b634  9d00b634  0002b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.rand    00000058  9d00b68c  9d00b68c  0002b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text._ZN11DisplayCore18getPortInformationEhPm 00000054  9d00b6e4  9d00b6e4  0002b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.turnOffPWM 00000054  9d00b738  9d00b738  0002b738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text._kill_r 00000054  9d00b78c  9d00b78c  0002b78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text._ZNKSt9type_info10__do_catchEPKS_PPvj 00000050  9d00b7e0  9d00b7e0  0002b7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text._sbrk_r 00000050  9d00b830  9d00b830  0002b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.sbrk    00000050  9d00b880  9d00b880  0002b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text._Z20SoftPWMServoPWMWritemh 0000004c  9d00b8d0  9d00b8d0  0002b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.delay   0000004c  9d00b91c  9d00b91c  0002b91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .rodata       00000048  9d00b968  9d00b968  0002b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .rodata.digital_pin_to_port_PGM.digital_pin_to_port_PGM 00000048  9d00b9b0  9d00b9b0  0002b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .rodata.digital_pin_to_pps_out_PGM.digital_pin_to_pps_out_PGM 00000048  9d00b9f8  9d00b9f8  0002b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.setIntEnable 00000048  9d00ba40  9d00ba40  0002ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text._ZNKSt9type_infoeqERKS_.isra.0 00000090  9d00ba88  9d00ba88  0002ba88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text         00000048  9d00bb18  9d00bb18  0002bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text._bootstrap_exception_handler 00000048  9d00bb60  9d00bb60  0002bb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.millisecondCoreTimerService 00000044  9d00bba8  9d00bba8  0002bba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text._ZN7SSD128910fillScreenEt 0000003c  9d00bbec  9d00bbec  0002bbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.setIntVector 0000003c  9d00bc28  9d00bc28  0002bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text._Z3clst 00000038  9d00bc64  9d00bc64  0002bc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text._ZN11DisplayCore12getRectangleEiiiiPt 00000038  9d00bc9c  9d00bc9c  0002bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text._configSystem 00000038  9d00bcd4  9d00bcd4  0002bcd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text._enableMultiVectorInterrupts 00000038  9d00bd0c  9d00bd0c  0002bd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .rodata       00000038  9d00bd48  9d00bd48  0002bd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.main_entry 00000034  9d00bd80  9d00bd80  0002bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text._ZN11DisplayCore10openWindowEiiii 00000034  9d00bdb4  9d00bdb4  0002bdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .rodata.port_to_tris_PGM.port_to_tris_PGM 00000030  9d00bde8  9d00bde8  0002bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.main    00000030  9d00be18  9d00be18  0002be18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text._ZN10__cxxabiv117__class_type_infoD0Ev 0000002c  9d00be48  9d00be48  0002be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text._ZN10__cxxabiv120__si_class_type_infoD0Ev 0000002c  9d00be74  9d00be74  0002be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.memcpy  0000002c  9d00bea0  9d00bea0  0002bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text._stub_sbd_memlayout 0000002c  9d00becc  9d00becc  0002becc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.getPeripheralClock 00000028  9d00bef8  9d00bef8  0002bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text._ZdlPv  00000028  9d00bf20  9d00bf20  0002bf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.copysign 00000028  9d00bf48  9d00bf48  0002bf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text._initTaskManager 00000024  9d00bf70  9d00bf70  0002bf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text._ZN10__cxxabiv117__class_type_infoD2Ev 00000024  9d00bf94  9d00bf94  0002bf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text._ZN10__cxxabiv120__si_class_type_infoD2Ev 00000024  9d00bfb8  9d00bfb8  0002bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text._ZNSt9type_infoD0Ev 00000024  9d00bfdc  9d00bfdc  0002bfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.free    00000024  9d00c000  9d00c000  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.raise   00000024  9d00c024  9d00c024  0002c024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.memset  00000024  9d00c048  9d00c048  0002c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text._ZN11DisplayCore8color565Ehhh 00000020  9d00c06c  9d00c06c  0002c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.getIntVector 00000020  9d00c08c  9d00c08c  0002c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .rodata       00000020  9d00c0b0  9d00c0b0  0002c0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text._ZN7SSD128910openWindowEiiii 0000001c  9d00c0d0  9d00c0d0  0002c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text._ZN11DisplayCore12stringHeightEPKc 0000001c  9d00c0ec  9d00c0ec  0002c0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.restoreInterrupts 0000001c  9d00c108  9d00c108  0002c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_ 0000001c  9d00c124  9d00c124  0002c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text._getpid_r 0000001c  9d00c140  9d00c140  0002c140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text._ZN10__cxxabiv111__terminateEPFvvE 00000018  9d00c15c  9d00c15c  0002c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.fabs    00000018  9d00c174  9d00c174  0002c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.finite  00000018  9d00c18c  9d00c18c  0002c18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.abort   00000018  9d00c1a4  9d00c1a4  0002c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text         00000030  9d00c1bc  9d00c1bc  0002c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text._ZN11DisplayCore9getCursorEh 00000014  9d00c1ec  9d00c1ec  0002c1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text._ZN11DisplayCore12setTextColorEtt 00000014  9d00c200  9d00c200  0002c200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text._ZN11DisplayCore15invertTextColorEv 00000014  9d00c214  9d00c214  0002c214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text._ZSt9terminatev 00000014  9d00c228  9d00c228  0002c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.nan     00000014  9d00c23c  9d00c23c  0002c23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text._ZN7SSD128910windowDataEt 00000010  9d00c250  9d00c250  0002c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .rodata       00000010  9d00c260  9d00c260  0002c260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text._ZN11DisplayCore11closeWindowEv 00000010  9d00c270  9d00c270  0002c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text._initCoreTimer 00000010  9d00c280  9d00c280  0002c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text._ZNSt9type_infoD2Ev 00000010  9d00c290  9d00c290  0002c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.__cxa_pure_virtual 00000010  9d00c2a0  9d00c2a0  0002c2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .rodata.bp.bp 00000010  9d00c2b0  9d00c2b0  0002c2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .rodata.dp_h.dp_h 00000010  9d00c2c0  9d00c2c0  0002c2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .rodata.dp_l.dp_l 00000010  9d00c2d0  9d00c2d0  0002c2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .rodata.TWO52.TWO52 00000010  9d00c2e0  9d00c2e0  0002c2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text._ZN11DisplayCore9setCursorEii 0000000c  9d00c2f0  9d00c2f0  0002c2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.millis  0000000c  9d00c2fc  9d00c2fc  0002c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.disableInterrupts 0000000c  9d00c308  9d00c308  0002c308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.readCoreTimer 0000000c  9d00c314  9d00c314  0002c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.__errno 0000000c  9d00c320  9d00c320  0002c320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text._ZN7SSD128913invertDisplayEh 00000008  9d00c32c  9d00c32c  0002c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text._ZN7SSD128911closeWindowEv 00000008  9d00c334  9d00c334  0002c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text._ZN11DisplayCore8getWidthEv 00000008  9d00c33c  9d00c33c  0002c33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text._ZN11DisplayCore9getHeightEv 00000008  9d00c344  9d00c344  0002c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text._ZN11DisplayCore7colorAtEii 00000008  9d00c34c  9d00c34c  0002c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text._ZN11DisplayCore10setCursorXEi 00000008  9d00c354  9d00c354  0002c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text._ZN11DisplayCore10setCursorYEi 00000008  9d00c35c  9d00c35c  0002c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text._ZN11DisplayCore10getCursorXEv 00000008  9d00c364  9d00c364  0002c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text._ZN11DisplayCore10getCursorYEv 00000008  9d00c36c  9d00c36c  0002c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text._ZN11DisplayCore12setTextColorEt 00000008  9d00c374  9d00c374  0002c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text._ZN11DisplayCore11setTextWrapEh 00000008  9d00c37c  9d00c37c  0002c37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text._ZN11DisplayCore7setFontEPKh 00000008  9d00c384  9d00c384  0002c384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text._ZN11DisplayCore12getTextColorEv 00000008  9d00c38c  9d00c38c  0002c38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text._ZN5Print5printEPKc 00000008  9d00c394  9d00c394  0002c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text._ZNKSt9type_info14__is_pointer_pEv 00000008  9d00c39c  9d00c39c  0002c39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text._ZNKSt9type_info15__is_function_pEv 00000008  9d00c3a4  9d00c3a4  0002c3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv 00000008  9d00c3ac  9d00c3ac  0002c3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.matherr 00000008  9d00c3b4  9d00c3b4  0002c3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.__malloc_lock 00000008  9d00c3bc  9d00c3bc  0002c3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.__malloc_unlock 00000008  9d00c3c4  9d00c3c4  0002c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text._on_reset 00000008  9d00c3cc  9d00c3cc  0002c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text._on_bootstrap 00000008  9d00c3d4  9d00c3d4  0002c3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text._exit   00000008  9d00c3dc  9d00c3dc  0002c3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.kill    00000008  9d00c3e4  9d00c3e4  0002c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.getpid  00000008  9d00c3ec  9d00c3ec  0002c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .rodata       00000004  9d00bd44  9d00bd44  0002bd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:3c1a9d00 luik0,0x9d00
9d000184:275a0180 addiuk0,k0,384
9d000188:03400008 jrk0
9d00018c:00000000 nop

Disassembly of section .reset:

9d001000 <_reset>:
9d001000:10000003 b9d001010 <__reset_switch_isa>
9d001004:00000000 nop

9d001008 <__reset_micromips_isa>:
9d001008:f340 04db jalx9d00136c <.LFE19>
9d00100c:0000 0000 nop

9d001010 <__reset_switch_isa>:
9d001010:0f4004db jal9d00136c <.LFE19>
9d001014:00000000 nop

Disassembly of section .vectors:

9d001018 <_vector_0_addr>:
#if defined(__PIC32MZXX__)
void __attribute__((nomips16, at_vector(_CORE_TIMER_VECTOR),interrupt(IPL7SRS))) CoreTimerHandler(void)
#else
void __attribute__((interrupt(),nomips16)) CoreTimerHandler(void)
#endif
{
9d001018:415de800 rdpgprsp,sp
9d00101c:401b7000 mfc0k1,c0_epc
9d001020:401a6002 mfc0k0,c0_srsctl
9d001024:27bdfea0 addiusp,sp,-352
9d001028:afbb015c swk1,348(sp)
9d00102c:401b6000 mfc0k1,c0_status
9d001030:afba0158 swk0,344(sp)
9d001034:401a6800 mfc0k0,c0_cause
9d001038:afbb0154 swk1,340(sp)
9d00103c:001ad282 srlk0,k0,0xa
9d001040:7f5b7a84 insk1,k0,0xa,0x6
9d001044:7c1b2044 insk1,zero,0x1,0x4
9d001048:409b6000 mtc0k1,c0_status
9d00104c:afa30024 swv1,36(sp)
9d001050:afa20020 swv0,32(sp)
9d001054:8fa30158 lwv1,344(sp)
9d001058:3063000f andiv1,v1,0xf
9d00105c:1460001a bnezv1,9d0010c8 <_vector_0_addr+0xb0>
9d001060:00000000 nop
9d001064:afbf0084 swra,132(sp)
9d001068:afbe0080 sws8,128(sp)
9d00106c:afb9007c swt9,124(sp)
9d001070:afb80078 swt8,120(sp)
9d001074:afb70074 sws7,116(sp)
9d001078:afb60070 sws6,112(sp)
9d00107c:afb5006c sws5,108(sp)
9d001080:afb40068 sws4,104(sp)
9d001084:afb30064 sws3,100(sp)
9d001088:afb20060 sws2,96(sp)
9d00108c:afb1005c sws1,92(sp)
9d001090:afb00058 sws0,88(sp)
9d001094:afaf0054 swt7,84(sp)
9d001098:afae0050 swt6,80(sp)
9d00109c:afad004c swt5,76(sp)
9d0010a0:afac0048 swt4,72(sp)
9d0010a4:afab0044 swt3,68(sp)
9d0010a8:afaa0040 swt2,64(sp)
9d0010ac:afa9003c swt1,60(sp)
9d0010b0:afa80038 swt0,56(sp)
9d0010b4:afa70034 swa3,52(sp)
9d0010b8:afa60030 swa2,48(sp)
9d0010bc:afa5002c swa1,44(sp)
9d0010c0:afa40028 swa0,40(sp)
9d0010c4:afa1001c swat,28(sp)
9d0010c8:f7b30120 sdc1$f19,288(sp)
9d0010cc:f7b20118 sdc1$f18,280(sp)
9d0010d0:f7b10110 sdc1$f17,272(sp)
9d0010d4:f7b00108 sdc1$f16,264(sp)
9d0010d8:f7af0100 sdc1$f15,256(sp)
9d0010dc:f7ae00f8 sdc1$f14,248(sp)
9d0010e0:f7ad00f0 sdc1$f13,240(sp)
9d0010e4:f7ac00e8 sdc1$f12,232(sp)
9d0010e8:f7ab00e0 sdc1$f11,224(sp)
9d0010ec:f7aa00d8 sdc1$f10,216(sp)
9d0010f0:f7a900d0 sdc1$f9,208(sp)
9d0010f4:f7a800c8 sdc1$f8,200(sp)
9d0010f8:f7a700c0 sdc1$f7,192(sp)
9d0010fc:f7a600b8 sdc1$f6,184(sp)
9d001100:f7a500b0 sdc1$f5,176(sp)
9d001104:f7a400a8 sdc1$f4,168(sp)
9d001108:f7a300a0 sdc1$f3,160(sp)
9d00110c:f7a20098 sdc1$f2,152(sp)
9d001110:f7a10090 sdc1$f1,144(sp)
9d001114:f7a00088 sdc1$f0,136(sp)
9d001118:00001012 mflov0
9d00111c:afa2014c swv0,332(sp)
9d001120:00001810 mfhiv1
9d001124:afa30148 swv1,328(sp)
9d001128:00201012 mflov0,$ac1
9d00112c:afa20144 swv0,324(sp)
9d001130:00201810 mfhiv1,$ac1
9d001134:afa30140 swv1,320(sp)
9d001138:00401012 mflov0,$ac2
9d00113c:afa2013c swv0,316(sp)
9d001140:00401810 mfhiv1,$ac2
9d001144:afa30138 swv1,312(sp)
9d001148:00601012 mflov0,$ac3
9d00114c:afa20134 swv0,308(sp)
9d001150:00601810 mfhiv1,$ac3
9d001154:afa30130 swv1,304(sp)
9d001158:7c3f1cb8 rddspv1,0x3f
9d00115c:afa30018 swv1,24(sp)
9d001160:4442f800 cfc1v0,$31
9d001164:afa2012c swv0,300(sp)

    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
9d001168:40124800 mfc0s2,c0_count

9d00116c <.LVL82>:
    relCurTime = curTime - gLastBaseCount;
9d00116c:8f938510 lws3,-31472(gp)
9d001170:02539823 subus3,s2,s3

9d001174 <.LVL83>:

    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
9d001174:0240a021 moves4,s2
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
9d001178:24050003 lia1,3
        // we need to apply our base to convert from relative values to an absolute time.
        compare = relNextInt + gLastBaseCount;
        write_comp(compare); 

        // clear the CT flag
        mCTClearIntFlag();
9d00117c:3c17bf81 luis7,0xbf81
9d001180:241e0001 lis8,1

9d001184 <.LVL84>:
9d001184:2795801c addius5,gp,-32740
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
9d001188:00008821 moves1,zero
    nextBase = curTime;

    do
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;
9d00118c:2410ffff lis0,-1
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d001190:02a03021 movea2,s5

9d001194 <.LVL85>:

        // check to see who all we need to call
        for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
9d001194:8ea30004 lwv1,4(s5)
9d001198:10600014 beqzv1,9d0011ec <.LVL89>
9d00119c:0011b0c0 slls6,s1,0x3
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0011a0:00d6b021 addus6,a2,s6
9d0011a4:8ec40000 lwa0,0(s6)
9d0011a8:8f828510 lwv0,-31472(gp)
9d0011ac:00821023 subuv0,a0,v0

9d0011b0 <.LVL86>:
                if(relInt <= relCurTime)
9d0011b0:0262202b sltua0,s3,v0
9d0011b4:5480000c bnezla0,9d0011e8 <.LVL88+0xc>
9d0011b8:0050182b sltuv1,v0,s0
                {
                    // call their routine to get their next interrupt time
                    gCoreTimerInfo[i].nextInt = gCoreTimerInfo[i].serivce(curTime);
9d0011bc:02802021 movea0,s4
9d0011c0:afa50014 swa1,20(sp)
9d0011c4:0060f809 jalrv1
9d0011c8:afa60010 swa2,16(sp)

9d0011cc <.LVL87>:
9d0011cc:aec20000 swv0,0(s6)

                    // recalculate the relative time of thier next int
                    // so we can see if this is the next int we need to set
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0011d0:8ec30000 lwv1,0(s6)
9d0011d4:8f828510 lwv0,-31472(gp)
9d0011d8:00621023 subuv0,v1,v0

9d0011dc <.LVL88>:
9d0011dc:8fa60010 lwa2,16(sp)
9d0011e0:8fa50014 lwa1,20(sp)
9d0011e4:0050182b sltuv1,v0,s0
9d0011e8:0043800b movns0,v0,v1

9d0011ec <.LVL89>:
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
9d0011ec:26310001 addius1,s1,1
9d0011f0:1625ffe8 bnes1,a1,9d001194 <.LVL85>
9d0011f4:26b50008 addius5,s5,8
        // other service may cause the compare value to be set for an earlier time; but we always know there will be a compare time
        // to set, so we know that relNextInt has a value other than 0xFFFFFFFF in it.

        // Go ahead and set the compare register to the next interrupt we want.
        // we need to apply our base to convert from relative values to an absolute time.
        compare = relNextInt + gLastBaseCount;
9d0011f8:8f828510 lwv0,-31472(gp)

9d0011fc <.LVL91>:
9d0011fc:02021021 adduv0,s0,v0

9d001200 <.LVL92>:
        write_comp(compare); 
9d001200:40825800 mtc0v0,c0_compare

        // clear the CT flag
        mCTClearIntFlag();
9d001204:aefe0044 sws8,68(s7)

        // read the count after the CT flag has been set so we can make sure count has not passed compare
        // during our processing of this int
        read_count(curTime); 
9d001208:40144800 mfc0s4,c0_count

        // get the relative time so we can operate in the linear portion of our uint32.
        relCurTime = curTime - gLastBaseCount;
9d00120c:8f938510 lws3,-31472(gp)

9d001210 <.LVL94>:
9d001210:02939823 subus3,s4,s3

9d001214 <.LVL95>:

        // if the current time has passed our interrupt time, then we basically hit the interrupt again
        // so we probabaly missed the CT flag being set and we need to reprocess this interrupt and find the next one to set.
    } while(relNextInt <= relCurTime);
9d001214:0270802b sltus0,s3,s0

9d001218 <.LVL96>:
9d001218:5200ffdb beqzls0,9d001188 <.LVL84+0x4>
9d00121c:2795801c addius5,gp,-32740
    // otherwise the next interrupt time (compare time) is after the current time and CT will catch it when count == compare.
    // we can safely exit the ISR.

    // but first we must set our new base so the next time we come into this routine we
    // have a valid lower base to shift our times to for comparisons.
    gLastBaseCount = nextBase;
9d001220:af928510 sws2,-31472(gp)
}
9d001224:8fa2012c lwv0,300(sp)

9d001228 <.LVL97>:
9d001228:44c2f800 ctc1v0,$31
9d00122c:8fa30018 lwv1,24(sp)
9d001230:7c61fcf8 wrdspv1,0x3f
9d001234:8fa2014c lwv0,332(sp)
9d001238:00400013 mtlov0
9d00123c:8fa30148 lwv1,328(sp)
9d001240:00600011 mthiv1
9d001244:8fa50144 lwa1,324(sp)
9d001248:00a00813 mtloa1,$ac1
9d00124c:8fa50140 lwa1,320(sp)
9d001250:00a00811 mthia1,$ac1
9d001254:8fa5013c lwa1,316(sp)
9d001258:00a01013 mtloa1,$ac2
9d00125c:8fa50138 lwa1,312(sp)
9d001260:00a01011 mthia1,$ac2
9d001264:8fa50134 lwa1,308(sp)
9d001268:00a01813 mtloa1,$ac3
9d00126c:8fa50130 lwa1,304(sp)
9d001270:00a01811 mthia1,$ac3
9d001274:8fa20158 lwv0,344(sp)
9d001278:3042000f andiv0,v0,0xf
9d00127c:1440001c bnezv0,9d0012f0 <.LVL101+0x40>
9d001280:00000000 nop
9d001284:8fbf0084 lwra,132(sp)
9d001288:8fbe0080 lws8,128(sp)
9d00128c:8fb9007c lwt9,124(sp)
9d001290:8fb80078 lwt8,120(sp)
9d001294:8fb70074 lws7,116(sp)
9d001298:8fb60070 lws6,112(sp)
9d00129c:8fb5006c lws5,108(sp)
9d0012a0:8fb40068 lws4,104(sp)

9d0012a4 <.LVL98>:
9d0012a4:8fb30064 lws3,100(sp)

9d0012a8 <.LVL99>:
9d0012a8:8fb20060 lws2,96(sp)

9d0012ac <.LVL100>:
9d0012ac:8fb1005c lws1,92(sp)

9d0012b0 <.LVL101>:
9d0012b0:8fb00058 lws0,88(sp)
9d0012b4:8faf0054 lwt7,84(sp)
9d0012b8:8fae0050 lwt6,80(sp)
9d0012bc:8fad004c lwt5,76(sp)
9d0012c0:8fac0048 lwt4,72(sp)
9d0012c4:8fab0044 lwt3,68(sp)
9d0012c8:8faa0040 lwt2,64(sp)
9d0012cc:8fa9003c lwt1,60(sp)
9d0012d0:8fa80038 lwt0,56(sp)
9d0012d4:8fa70034 lwa3,52(sp)
9d0012d8:8fa60030 lwa2,48(sp)
9d0012dc:8fa5002c lwa1,44(sp)
9d0012e0:8fa40028 lwa0,40(sp)
9d0012e4:8fa30024 lwv1,36(sp)
9d0012e8:8fa20020 lwv0,32(sp)
9d0012ec:8fa1001c lwat,28(sp)
9d0012f0:d7b30120 ldc1$f19,288(sp)
9d0012f4:d7b20118 ldc1$f18,280(sp)
9d0012f8:d7b10110 ldc1$f17,272(sp)
9d0012fc:d7b00108 ldc1$f16,264(sp)
9d001300:d7af0100 ldc1$f15,256(sp)
9d001304:d7ae00f8 ldc1$f14,248(sp)
9d001308:d7ad00f0 ldc1$f13,240(sp)
9d00130c:d7ac00e8 ldc1$f12,232(sp)
9d001310:d7ab00e0 ldc1$f11,224(sp)
9d001314:d7aa00d8 ldc1$f10,216(sp)
9d001318:d7a900d0 ldc1$f9,208(sp)
9d00131c:d7a800c8 ldc1$f8,200(sp)
9d001320:d7a700c0 ldc1$f7,192(sp)
9d001324:d7a600b8 ldc1$f6,184(sp)
9d001328:d7a500b0 ldc1$f5,176(sp)
9d00132c:d7a400a8 ldc1$f4,168(sp)
9d001330:d7a300a0 ldc1$f3,160(sp)
9d001334:d7a20098 ldc1$f2,152(sp)
9d001338:d7a10090 ldc1$f1,144(sp)
9d00133c:d7a00088 ldc1$f0,136(sp)
9d001340:41606000 di
9d001344:000000c0 ehb
9d001348:8fba015c lwk0,348(sp)
9d00134c:8fbb0154 lwk1,340(sp)
9d001350:409a7000 mtc0k0,c0_epc
9d001354:8fba0158 lwk0,344(sp)
9d001358:27bd0160 addiusp,sp,352
9d00135c:409a6002 mtc0k0,c0_srsctl
9d001360:41dde800 wrpgprsp,sp
9d001364:409b6000 mtc0k1,c0_status
9d001368:42000018 eret

Disassembly of section .startup:

9d00136c <_startup>:
9d00136c:401a6000 mfc0k0,c0_status
9d001370:7f5a04c0 extk0,k0,0x13,0x1
9d001374:13400005 beqzk0,9d00138c <_no_nmi>
9d001378:00000000 nop
9d00137c:3c1a9d01 luik0,0x9d01
9d001380:275ac1d4 addiuk0,k0,-15916
9d001384:03400008 jrk0
9d001388:00000000 nop

9d00138c <_no_nmi>:
9d00138c:3c1d8008 luisp,0x8008
9d001390:27bdfff8 addiusp,sp,-8
9d001394:3c1c8001 luigp,0x8001
9d001398:279c8380 addiugp,gp,-31872
9d00139c:40096002 mfc0t1,c0_srsctl
9d0013a0:01205820 addt3,t1,zero
9d0013a4:240a0007 lit2,7
9d0013a8:7d494984 inst1,t2,0x6,0x4
9d0013ac:40896002 mtc0t1,c0_srsctl
9d0013b0:000000c0 ehb
9d0013b4:41dce000 wrpgprgp,gp
9d0013b8:254affff addiut2,t2,-1
9d0013bc:1540fffa bnezt2,9d0013a8 <_no_nmi+0x1c>
9d0013c0:00000000 nop
9d0013c4:408b6002 mtc0t3,c0_srsctl
9d0013c8:000000c0 ehb
9d0013cc:3c089d01 luit0,0x9d01
9d0013d0:2508c3cc addiut0,t0,-15412
9d0013d4:0100f809 jalrt0
9d0013d8:00000000 nop
9d0013dc:3c088000 luit0,0x8000
9d0013e0:250806b4 addiut0,t0,1716
9d0013e4:3c098000 luit1,0x8000
9d0013e8:25290948 addiut1,t1,2376
9d0013ec:10000006 b9d001408 <_bss_check>
9d0013f0:00000000 nop

9d0013f4 <_bss_init>:
9d0013f4:ad000000 swzero,0(t0)
9d0013f8:ad000004 swzero,4(t0)
9d0013fc:ad000008 swzero,8(t0)
9d001400:ad00000c swzero,12(t0)
9d001404:25080010 addiut0,t0,16

9d001408 <_bss_check>:
9d001408:0109082b sltuat,t0,t1
9d00140c:1420fff9 bnezat,9d0013f4 <_bss_init>
9d001410:00000000 nop

9d001414 <_dinit_init>:
9d001414:3c089d00 luit0,0x9d00
9d001418:25081910 addiut0,t0,6416
9d00141c:8d090000 lwt1,0(t0)
9d001420:11200018 beqzt1,9d001484 <_dinit_end+0x18>
9d001424:25080004 addiut0,t0,4
9d001428:8d0a0000 lwt2,0(t0)
9d00142c:25080004 addiut0,t0,4
9d001430:8d0b0000 lwt3,0(t0)
9d001434:11600009 beqzt3,9d00145c <_dinit_clear>
9d001438:25080004 addiut0,t0,4

9d00143c <_dinit_copy>:
9d00143c:910c0000 lbut4,0(t0)
9d001440:254affff addiut2,t2,-1
9d001444:25080001 addiut0,t0,1
9d001448:a12c0000 sbt4,0(t1)
9d00144c:1540fffb bnezt2,9d00143c <_dinit_copy>
9d001450:25290001 addiut1,t1,1
9d001454:10000005 b9d00146c <_dinit_end>
9d001458:00000000 nop

9d00145c <_dinit_clear>:
9d00145c:a1200000 sbzero,0(t1)
9d001460:254affff addiut2,t2,-1
9d001464:1540fffd bnezt2,9d00145c <_dinit_clear>
9d001468:25290001 addiut1,t1,1

9d00146c <_dinit_end>:
9d00146c:25080003 addiut0,t0,3
9d001470:240afffc lit2,-4
9d001474:01484024 andt0,t2,t0
9d001478:8d090000 lwt1,0(t0)
9d00147c:1520ffe7 bnezt1,9d00141c <_dinit_init+0x8>
9d001480:00000000 nop
9d001484:3c090000 luit1,0x0
9d001488:25290000 addiut1,t1,0
9d00148c:11200001 beqzt1,9d001494 <_ramfunc_done>
9d001490:00000000 nop

9d001494 <_ramfunc_done>:
9d001494:40804800 mtc0zero,c0_count
9d001498:240affff lit2,-1
9d00149c:408a5800 mtc0t2,c0_compare
9d0014a0:3c099d00 luit1,0x9d00
9d0014a4:25290000 addiut1,t1,0
9d0014a8:40897801 mtc0t1,c0_ebase
9d0014ac:3c090000 luit1,0x0
9d0014b0:25290001 addiut1,t1,1
9d0014b4:240a0000 lit2,0
9d0014b8:7d2a4944 inst2,t1,0x5,0x5
9d0014bc:408a6001 mtc0t2,c0_intctl
9d0014c0:3c090080 luit1,0x80
9d0014c4:40896800 mtc0t1,c0_cause
9d0014c8:40088000 mfc0t0,c0_config
9d0014cc:7d090580 extt1,t0,0x16,0x1
9d0014d0:00094c40 sllt1,t1,0x11
9d0014d4:40086000 mfc0t0,c0_status
9d0014d8:3c010058 luiat,0x58
9d0014dc:01014024 andt0,t0,at
9d0014e0:3c0a0100 luit2,0x100
9d0014e4:01484025 ort0,t2,t0
9d0014e8:3c0a2400 luit2,0x2400
9d0014ec:01484025 ort0,t2,t0
9d0014f0:01284025 ort0,t1,t0
9d0014f4:40886000 mtc0t0,c0_status
9d0014f8:3c0a0100 luit2,0x100
9d0014fc:44caf800 ctc1t2,$31
9d001500:000000c0 ehb
9d001504:3c089d01 luit0,0x9d01
9d001508:2508c3d4 addiut0,t0,-15404
9d00150c:0100f809 jalrt0
9d001510:00000000 nop
9d001514:40086000 mfc0t0,c0_status
9d001518:3c01ffbf luiat,0xffbf
9d00151c:3421ffff oriat,at,0xffff
9d001520:01014024 andt0,t0,at
9d001524:40886000 mtc0t0,c0_status
9d001528:30840000 andia0,a0,0x0
9d00152c:30a50000 andia1,a1,0x0
9d001530:3c089d01 luit0,0x9d01
9d001534:2508bd80 addiut0,t0,-17024
9d001538:01000008 jrt0
9d00153c:00000000 nop

Disassembly of section .text:

9d001540 <_ZN11DisplayCore11startBufferEv>:
         *  In buffered mode, where applicable, any data that would be sent to
         *  the screen is delayed until buffered mode is ended.  This generally
         *  has no effect on most screens, but those that use their own driver
         *  level may use this to delay pushing out of the buffer to the screen.
         */
        virtual void startBuffer() {}
9d001540:03e00008 jrra
9d001544:00000000 nop

9d001548 <_ZN11DisplayCore9endBufferEv>:
        /*! End buffered mode
         *  =================
         *  Any changes that are pending will be pushed out to the screen. See
         *  `startBuffer()` for more information.
         */
        virtual void endBuffer() {}
9d001548:03e00008 jrra
9d00154c:00000000 nop

9d001550 <L0>:
         *  =================
         *  For devices with their own backlight control this function will turn
         *  the backlight on. The brightness should be either the default brightness
         *  (typically full on) or the last brightness set with `setBacklight()`.
         */
        virtual void enableBacklight() {}
9d001550:03e00008 jrra
9d001554:00000000 nop

9d001558 <_ZN11DisplayCore16disableBacklightEv>:
        /*! Disable Back Light
         *  ==================
         *  For devices with their own backlight control this function will turn
         *  the backlight off.
         */
        virtual void disableBacklight() {}
9d001558:03e00008 jrra
9d00155c:00000000 nop

9d001560 <_ZN11DisplayCore12setBacklightEi>:
        /*! Set Back Light Brightness
         *  =========================
         *  For devices with their own backlight control this function will set the
         *  brightness of the backlight.
         */
        virtual void setBacklight(int b) {}
9d001560:03e00008 jrra
9d001564:00000000 nop

9d001568 <_ZN7SSD12899displayOnEv>:
        void drawVerticalLine(int x, int y, int h, color_t color);
        void drawHorizontalLine(int x, int y, int w, color_t color);
        void fillRectangle(int x, int y, int w, int h, color_t color);
        void setRotation(int r);
        void invertDisplay(boolean i);
        void displayOn() {} // Not implemented
9d001568:03e00008 jrra
9d00156c:00000000 nop

9d001570 <_ZN7SSD128910displayOffEv>:
        void displayOff() {} // Not implemented
9d001570:03e00008 jrra
9d001574:00000000 nop

9d001578 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
9d001578:10a00011 beqza1,9d0015c0 <.LVL5>
9d00157c:00000000 nop
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
9d001580:27bdffe0 addiusp,sp,-32
9d001584:afbf001c swra,28(sp)
9d001588:afb00018 sws0,24(sp)
9d00158c:00808021 moves0,a0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
9d001590:00a02021 movea0,a1

9d001594 <.LVL1>:
9d001594:0f40306f jal9d00c1bc <abort+0x18>
9d001598:afa50010 swa1,16(sp)

9d00159c <.LVL2>:
9d00159c:8e030000 lwv1,0(s0)
9d0015a0:8c790004 lwt9,4(v1)
9d0015a4:02002021 movea0,s0
9d0015a8:8fa50010 lwa1,16(sp)

9d0015ac <.LVL3>:
9d0015ac:00403021 movea2,v0
    }
9d0015b0:8fbf001c lwra,28(sp)
9d0015b4:8fb00018 lws0,24(sp)

9d0015b8 <.LVL4>:
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
9d0015b8:03200008 jrt9
9d0015bc:27bd0020 addiusp,sp,32

9d0015c0 <.LVL5>:
    }
9d0015c0:03e00008 jrra
9d0015c4:00001021 movev0,zero

Disassembly of section .init:

9d0015c8 <_init-0x8>:
9d0015c8:0f401b10 jal9d006c40 <frame_dummy>
9d0015cc:00000000 nop

9d0015d0 <_init>:

CODE_SECTION(.init)
.globl_init
.type_init,@function
_init:
addu$sp,$sp,-32
9d0015d0:27bdffe0 addiusp,sp,-32
sw$31,20($sp)
9d0015d4:afbf0014 swra,20(sp)

9d0015d8 <L0>:
9d0015d8:0f402ec6 jal9d00bb18 <__do_global_ctors_aux>
9d0015dc:00000000 nop

9d0015e0 <init>:
9d0015e0:8fbf0014 lwra,20(sp)
9d0015e4:03e00008 jrra
9d0015e8:27bd0020 addiusp,sp,32

Disassembly of section .fini:

9d0015ec <_fini>:

CODE_SECTION(.fini)
.globl_fini
.type_fini,@function
_fini:
addu$sp,$sp,-32
9d0015ec:27bdffe0 addiusp,sp,-32
sw$31,20($sp)
9d0015f0:afbf0014 swra,20(sp)

9d0015f4 <L0>:
9d0015f4:0f401ad3 jal9d006b4c <__do_global_dtors_aux>
9d0015f8:00000000 nop

9d0015fc <fini>:
9d0015fc:8fbf0014 lwra,20(sp)
9d001600:03e00008 jrra
9d001604:27bd0020 addiusp,sp,32

Disassembly of section .ctors:

9d001608 <__CTOR_LIST__>:
9d001608:ffffffff 9d00a4f0                       ........

9d001610 <__CTOR_END__>:
9d001610:00000000                                ....

Disassembly of section .dtors:

9d001614 <__DTOR_LIST__>:
9d001614:ffffffff                                ....

9d001618 <__DTOR_END__>:
9d001618:00000000                                ....

Disassembly of section .header_info:

9d00161c <_image_header_info>:
9d00161c:0000004c syscall0x1
9d001620:ffffffff sdc3$31,-1(ra)

9d001624 <_verMPIDE_Stub>:
9d001624:00989e0c ffffffff ffffffff 01020001     ................
9d001634:9d001000 9d000000 001fc000 9d1fc000     ................
9d001644:00004000 bfc0ffc0 00000010 80000380     .@..............
9d001654:00000008 ffffffff 9d001018 9d001018     ................
9d001664:00000020                                 ...

Disassembly of section .rodata:

9d001668 <_ZTV7SSD1289>:
9d001668:00000000 9d001760 9d008158 9d00b098     ....`...X.......
9d001678:9d006834 9d009628 9d00845c 9d007ca4     4h..(...\....|..
9d001688:9d00993c 9d007784 9d0093f0 9d009a38     <....w......8...
9d001698:9d005db0 9d008e08 9d009b30 9d009840     .]......0...@...
9d0016a8:9d00c2f0 9d00c354 9d00c35c 9d00c364     ....T...\...d...
9d0016b8:9d00c36c 9d00c1ec 9d00c374 9d00c200     l.......t.......
9d0016c8:9d00c38c 9d00c214 9d00c37c 9d00c06c     ........|...l...
9d0016d8:9d00c384 9d009d00 9d006320 9d00607c     ........ c..|`..
9d0016e8:9d00bbec 9d009f90 9d0085cc 9d00af94     ................
9d0016f8:9d00ac18 9d00a7b8 9d00a5a8 9d005a9c     .............Z..
9d001708:9d001568 9d001570 9d00c32c 9d00a378     h...p...,...x...
9d001718:9d00c0ec 9d00c0d0 9d00c250 9d00b36c     ........P...l...
9d001728:9d00c334 9d00c34c 9d00bc9c 9d001540     4...L.......@...
9d001738:9d001548 9d001550 9d001558 9d001560     H...P...X...`...
9d001748:9d00c33c 9d00c344 9d006f2c 9d00715c     <...D...,o..\q..
9d001758:9d00b2fc 00000000 9d0018c8 9d00176c     ............l...
9d001768:9d001860                                `...

9d00176c <_ZTS7SSD1289>:
9d00176c:44535337 39383231 00000000              7SSD1289....

9d001778 <_ZTV11DisplayCore>:
9d001778:00000000 9d001860 9d008158 9d00b098     ....`...X.......
9d001788:9d006834 9d009628 9d00845c 9d007ca4     4h..(...\....|..
9d001798:9d00993c 9d007784 9d0093f0 9d009a38     <....w......8...
9d0017a8:9d005db0 9d008e08 9d009b30 9d009840     .]......0...@...
9d0017b8:9d00c2f0 9d00c354 9d00c35c 9d00c364     ....T...\...d...
9d0017c8:9d00c36c 9d00c1ec 9d00c374 9d00c200     l.......t.......
9d0017d8:9d00c38c 9d00c214 9d00c37c 9d00c06c     ........|...l...
9d0017e8:9d00c384 9d009d00 9d006320 9d00607c     ........ c..|`..
9d0017f8:9d00ab7c 9d009ebc 9d00c2a0 9d00c2a0     |...............
9d001808:9d00ac18 9d00aa44 9d00aae0 9d00c2a0     ....D...........
9d001818:9d00c2a0 9d00c2a0 9d00c2a0 9d00a378     ............x...
9d001828:9d00c0ec 9d00bdb4 9d00acb0 9d00b36c     ............l...
9d001838:9d00c270 9d00c34c 9d00bc9c 9d001540     p...L.......@...
9d001848:9d001548 9d001550 9d001558 9d001560     H...P...X...`...
9d001858:9d00c33c 9d00c344 9d0018c8 9d00186c     <...D.......l...
9d001868:9d00187c                                |...

9d00186c <_ZTS11DisplayCore>:
9d00186c:69443131 616c7073 726f4379 00000065     11DisplayCore...

9d00187c <_ZTI5Print>:
9d00187c:9d001898 9d001884 69725035 0000746e     ........5Print..
9d00188c:00000000                                ....

9d001890 <_ZTVN10__cxxabiv117__class_type_infoE>:
...
9d001898:9d00bf94 9d00be48 9d00c39c 9d00c3a4     ....H...........
9d0018a8:9d00b118 9d00b448 9d00b5d8 9d00ade0     ....H...........
9d0018b8:9d00c124 00000000                       $.......

9d0018c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
...
9d0018c8:9d00bfb8 9d00be74 9d00c39c 9d00c3a4     ....t...........
9d0018d8:9d00b118 9d00b448 9d00b288 9d009084     ....H...........
9d0018e8:9d00b194 00000000                       ........

9d0018f0 <_ZTVSt9type_info>:
...
9d0018f8:9d00c290 9d00bfdc 9d00c39c 9d00c3a4     ................
9d001908:9d00b7e0 9d00c3ac                       ........

Disassembly of section .dinit:

9d001910 <.dinit>:
9d001910:800006b8 lbzero,1720(zero)
9d001914:00000188 0x188
9d001918:00000000 nop
9d00191c:80000948 lbzero,2376(zero)
9d001920:000011c0 sllv0,zero,0x7
9d001924:00000000 nop
9d001928:80000840 lbzero,2112(zero)
9d00192c:00000008 jrzero
9d001930:00000000 nop
9d001934:80000848 lbzero,2120(zero)
9d001938:00000001 movfzero,zero,$fcc0
9d00193c:00000000 nop
9d001940:80000390 lbzero,912(zero)
9d001944:00000004 sllvzero,zero,zero
9d001948:00000001 movfzero,zero,$fcc0
9d00194c:0003d090 0x3d090
9d001950:80000394 lbzero,916(zero)
9d001954:00000004 sllvzero,zero,zero
9d001958:00000001 movfzero,zero,$fcc0
9d00195c:0000000a movzzero,zero,zero
9d001960:80000849 lbzero,2121(zero)
9d001964:00000001 movfzero,zero,$fcc0
9d001968:00000000 nop
9d00196c:8000084c lbzero,2124(zero)
9d001970:00000004 sllvzero,zero,zero
9d001974:00000000 nop
9d001978:80000850 lbzero,2128(zero)
9d00197c:00000004 sllvzero,zero,zero
9d001980:00000000 nop
9d001984:80000854 lbzero,2132(zero)
9d001988:00000004 sllvzero,zero,zero
9d00198c:00000000 nop
9d001990:80000858 lbzero,2136(zero)
9d001994:00000004 sllvzero,zero,zero
9d001998:00000000 nop
9d00199c:8000085c lbzero,2140(zero)
9d0019a0:00000004 sllvzero,zero,zero
9d0019a4:00000000 nop
9d0019a8:80000860 lbzero,2144(zero)
9d0019ac:00000001 movfzero,zero,$fcc0
9d0019b0:00000000 nop
9d0019b4:80000864 lbzero,2148(zero)
9d0019b8:00000004 sllvzero,zero,zero
9d0019bc:00000000 nop
9d0019c0:80000868 lbzero,2152(zero)
9d0019c4:00000004 sllvzero,zero,zero
9d0019c8:00000000 nop
9d0019cc:8000086c lbzero,2156(zero)
9d0019d0:00000002 srlzero,zero,0x0
9d0019d4:00000000 nop
9d0019d8:80000398 lbzero,920(zero)
9d0019dc:00000004 sllvzero,zero,zero
9d0019e0:00000001 movfzero,zero,$fcc0
9d0019e4:000001ea 0x1ea
9d0019e8:80000870 lbzero,2160(zero)
9d0019ec:00000004 sllvzero,zero,zero
9d0019f0:00000000 nop
9d0019f4:80000874 lbzero,2164(zero)
9d0019f8:00000004 sllvzero,zero,zero
9d0019fc:00000000 nop
9d001a00:80000878 lbzero,2168(zero)
9d001a04:00000004 sllvzero,zero,zero
9d001a08:00000000 nop
9d001a0c:8000087c lbzero,2172(zero)
9d001a10:00000004 sllvzero,zero,zero
9d001a14:00000000 nop
9d001a18:80000880 lbzero,2176(zero)
9d001a1c:00000004 sllvzero,zero,zero
9d001a20:00000000 nop
9d001a24:80000884 lbzero,2180(zero)
9d001a28:00000004 sllvzero,zero,zero
9d001a2c:00000000 nop
9d001a30:80000888 lbzero,2184(zero)
9d001a34:00000004 sllvzero,zero,zero
9d001a38:00000000 nop
9d001a3c:8000088c lbzero,2188(zero)
9d001a40:00000001 movfzero,zero,$fcc0
9d001a44:00000000 nop
9d001a48:8000039c lbzero,924(zero)
9d001a4c:00000018 multzero,zero
9d001a50:00000001 movfzero,zero,$fcc0
9d001a54:00000000 nop
9d001a58:9d00bba8 0x9d00bba8
...
9d001a6c:80000890 lbzero,2192(zero)
9d001a70:00000004 sllvzero,zero,zero
9d001a74:00000000 nop
9d001a78:80000894 lbzero,2196(zero)
9d001a7c:00000004 sllvzero,zero,zero
9d001a80:00000000 nop
9d001a84:800003b4 lbzero,948(zero)
9d001a88:000002fc 0x2fc
9d001a8c:00000001 movfzero,zero,$fcc0
9d001a90:9d000180 0x9d000180
9d001a94:9d000180 0x9d000180
9d001a98:9d000180 0x9d000180
9d001a9c:9d000180 0x9d000180
9d001aa0:9d000180 0x9d000180
9d001aa4:9d000180 0x9d000180
9d001aa8:9d000180 0x9d000180
9d001aac:9d000180 0x9d000180
9d001ab0:9d000180 0x9d000180
9d001ab4:9d000180 0x9d000180
9d001ab8:9d000180 0x9d000180
9d001abc:9d000180 0x9d000180
9d001ac0:9d000180 0x9d000180
9d001ac4:9d000180 0x9d000180
9d001ac8:9d000180 0x9d000180
9d001acc:9d000180 0x9d000180
9d001ad0:9d000180 0x9d000180
9d001ad4:9d000180 0x9d000180
9d001ad8:9d000180 0x9d000180
9d001adc:9d000180 0x9d000180
9d001ae0:9d000180 0x9d000180
9d001ae4:9d000180 0x9d000180
9d001ae8:9d000180 0x9d000180
9d001aec:9d000180 0x9d000180
9d001af0:9d000180 0x9d000180
9d001af4:9d000180 0x9d000180
9d001af8:9d000180 0x9d000180
9d001afc:9d000180 0x9d000180
9d001b00:9d000180 0x9d000180
9d001b04:9d000180 0x9d000180
9d001b08:9d000180 0x9d000180
9d001b0c:9d000180 0x9d000180
9d001b10:9d000180 0x9d000180
9d001b14:9d000180 0x9d000180
9d001b18:9d000180 0x9d000180
9d001b1c:9d000180 0x9d000180
9d001b20:9d000180 0x9d000180
9d001b24:9d000180 0x9d000180
9d001b28:9d000180 0x9d000180
9d001b2c:9d000180 0x9d000180
9d001b30:9d000180 0x9d000180
9d001b34:9d000180 0x9d000180
9d001b38:9d000180 0x9d000180
9d001b3c:9d000180 0x9d000180
9d001b40:9d000180 0x9d000180
9d001b44:9d000180 0x9d000180
9d001b48:9d000180 0x9d000180
9d001b4c:9d000180 0x9d000180
9d001b50:9d000180 0x9d000180
9d001b54:9d000180 0x9d000180
9d001b58:9d000180 0x9d000180
9d001b5c:9d000180 0x9d000180
9d001b60:9d000180 0x9d000180
9d001b64:9d000180 0x9d000180
9d001b68:9d000180 0x9d000180
9d001b6c:9d000180 0x9d000180
9d001b70:9d000180 0x9d000180
9d001b74:9d000180 0x9d000180
9d001b78:9d000180 0x9d000180
9d001b7c:9d000180 0x9d000180
9d001b80:9d000180 0x9d000180
9d001b84:9d000180 0x9d000180
9d001b88:9d000180 0x9d000180
9d001b8c:9d000180 0x9d000180
9d001b90:9d000180 0x9d000180
9d001b94:9d000180 0x9d000180
9d001b98:9d000180 0x9d000180
9d001b9c:9d000180 0x9d000180
9d001ba0:9d000180 0x9d000180
9d001ba4:9d000180 0x9d000180
9d001ba8:9d000180 0x9d000180
9d001bac:9d000180 0x9d000180
9d001bb0:9d000180 0x9d000180
9d001bb4:9d000180 0x9d000180
9d001bb8:9d000180 0x9d000180
9d001bbc:9d000180 0x9d000180
9d001bc0:9d000180 0x9d000180
9d001bc4:9d000180 0x9d000180
9d001bc8:9d000180 0x9d000180
9d001bcc:9d000180 0x9d000180
9d001bd0:9d000180 0x9d000180
9d001bd4:9d000180 0x9d000180
9d001bd8:9d000180 0x9d000180
9d001bdc:9d000180 0x9d000180
9d001be0:9d000180 0x9d000180
9d001be4:9d000180 0x9d000180
9d001be8:9d000180 0x9d000180
9d001bec:9d000180 0x9d000180
9d001bf0:9d000180 0x9d000180
9d001bf4:9d000180 0x9d000180
9d001bf8:9d000180 0x9d000180
9d001bfc:9d000180 0x9d000180
9d001c00:9d000180 0x9d000180
9d001c04:9d000180 0x9d000180
9d001c08:9d000180 0x9d000180
9d001c0c:9d000180 0x9d000180
9d001c10:9d000180 0x9d000180
9d001c14:9d000180 0x9d000180
9d001c18:9d000180 0x9d000180
9d001c1c:9d000180 0x9d000180
9d001c20:9d000180 0x9d000180
9d001c24:9d000180 0x9d000180
9d001c28:9d000180 0x9d000180
9d001c2c:9d000180 0x9d000180
9d001c30:9d000180 0x9d000180
9d001c34:9d000180 0x9d000180
9d001c38:9d000180 0x9d000180
9d001c3c:9d000180 0x9d000180
9d001c40:9d000180 0x9d000180
9d001c44:9d000180 0x9d000180
9d001c48:9d000180 0x9d000180
9d001c4c:9d000180 0x9d000180
9d001c50:9d000180 0x9d000180
9d001c54:9d000180 0x9d000180
9d001c58:9d000180 0x9d000180
9d001c5c:9d000180 0x9d000180
9d001c60:9d000180 0x9d000180
9d001c64:9d000180 0x9d000180
9d001c68:9d000180 0x9d000180
9d001c6c:9d000180 0x9d000180
9d001c70:9d000180 0x9d000180
9d001c74:9d000180 0x9d000180
9d001c78:9d000180 0x9d000180
9d001c7c:9d000180 0x9d000180
9d001c80:9d000180 0x9d000180
9d001c84:9d000180 0x9d000180
9d001c88:9d000180 0x9d000180
9d001c8c:9d000180 0x9d000180
9d001c90:9d000180 0x9d000180
9d001c94:9d000180 0x9d000180
9d001c98:9d000180 0x9d000180
9d001c9c:9d000180 0x9d000180
9d001ca0:9d000180 0x9d000180
9d001ca4:9d000180 0x9d000180
9d001ca8:9d000180 0x9d000180
9d001cac:9d000180 0x9d000180
9d001cb0:9d000180 0x9d000180
9d001cb4:9d000180 0x9d000180
9d001cb8:9d000180 0x9d000180
9d001cbc:9d000180 0x9d000180
9d001cc0:9d000180 0x9d000180
9d001cc4:9d000180 0x9d000180
9d001cc8:9d000180 0x9d000180
9d001ccc:9d000180 0x9d000180
9d001cd0:9d000180 0x9d000180
9d001cd4:9d000180 0x9d000180
9d001cd8:9d000180 0x9d000180
9d001cdc:9d000180 0x9d000180
9d001ce0:9d000180 0x9d000180
9d001ce4:9d000180 0x9d000180
9d001ce8:9d000180 0x9d000180
9d001cec:9d000180 0x9d000180
9d001cf0:9d000180 0x9d000180
9d001cf4:9d000180 0x9d000180
9d001cf8:9d000180 0x9d000180
9d001cfc:9d000180 0x9d000180
9d001d00:9d000180 0x9d000180
9d001d04:9d000180 0x9d000180
9d001d08:9d000180 0x9d000180
9d001d0c:9d000180 0x9d000180
9d001d10:9d000180 0x9d000180
9d001d14:9d000180 0x9d000180
9d001d18:9d000180 0x9d000180
9d001d1c:9d000180 0x9d000180
9d001d20:9d000180 0x9d000180
9d001d24:9d000180 0x9d000180
9d001d28:9d000180 0x9d000180
9d001d2c:9d000180 0x9d000180
9d001d30:9d000180 0x9d000180
9d001d34:9d000180 0x9d000180
9d001d38:9d000180 0x9d000180
9d001d3c:9d000180 0x9d000180
9d001d40:9d000180 0x9d000180
9d001d44:9d000180 0x9d000180
9d001d48:9d000180 0x9d000180
9d001d4c:9d000180 0x9d000180
9d001d50:9d000180 0x9d000180
9d001d54:9d000180 0x9d000180
9d001d58:9d000180 0x9d000180
9d001d5c:9d000180 0x9d000180
9d001d60:9d000180 0x9d000180
9d001d64:9d000180 0x9d000180
9d001d68:9d000180 0x9d000180
9d001d6c:9d000180 0x9d000180
9d001d70:9d000180 0x9d000180
9d001d74:9d000180 0x9d000180
9d001d78:9d000180 0x9d000180
9d001d7c:9d000180 0x9d000180
9d001d80:9d000180 0x9d000180
9d001d84:9d000180 0x9d000180
9d001d88:9d000180 0x9d000180
9d001d8c:80000898 lbzero,2200(zero)
9d001d90:000000a0 0xa0
9d001d94:00000000 nop
9d001d98:80000938 lbzero,2360(zero)
9d001d9c:00000004 sllvzero,zero,zero
9d001da0:00000000 nop
9d001da4:8000093c lbzero,2364(zero)
9d001da8:00000004 sllvzero,zero,zero
9d001dac:00000000 nop
9d001db0:80000940 lbzero,2368(zero)
9d001db4:00000004 sllvzero,zero,zero
9d001db8:00000000 nop
9d001dbc:80002388 lbzero,9096(zero)
9d001dc0:00000004 sllvzero,zero,zero
9d001dc4:00000001 movfzero,zero,$fcc0
9d001dc8:9d00c1a4 0x9d00c1a4
9d001dcc:8000238c lbzero,9100(zero)
9d001dd0:00000004 sllvzero,zero,zero
9d001dd4:00000001 movfzero,zero,$fcc0
9d001dd8:00000001 movfzero,zero,$fcc0
9d001ddc:bf810540 cache0x1,1344(gp)
9d001de0:00000178 0x178
9d001de4:00000001 movfzero,zero,$fcc0
9d001de8:00001018 mult$ac2,zero,zero
9d001dec:0000136c 0x136c
9d001df0:0000136c 0x136c
9d001df4:0000136c 0x136c
9d001df8:0000136c 0x136c
9d001dfc:0000136c 0x136c
9d001e00:0000136c 0x136c
9d001e04:0000136c 0x136c
9d001e08:0000136c 0x136c
9d001e0c:0000136c 0x136c
9d001e10:0000136c 0x136c
9d001e14:0000136c 0x136c
9d001e18:0000136c 0x136c
9d001e1c:0000136c 0x136c
9d001e20:0000136c 0x136c
9d001e24:0000136c 0x136c
9d001e28:0000136c 0x136c
9d001e2c:0000136c 0x136c
9d001e30:0000136c 0x136c
9d001e34:0000136c 0x136c
9d001e38:0000136c 0x136c
9d001e3c:0000136c 0x136c
9d001e40:0000136c 0x136c
9d001e44:0000136c 0x136c
9d001e48:0000136c 0x136c
9d001e4c:0000136c 0x136c
9d001e50:0000136c 0x136c
9d001e54:0000136c 0x136c
9d001e58:0000136c 0x136c
9d001e5c:0000136c 0x136c
9d001e60:0000136c 0x136c
9d001e64:0000136c 0x136c
9d001e68:0000136c 0x136c
9d001e6c:0000136c 0x136c
9d001e70:0000136c 0x136c
9d001e74:0000136c 0x136c
9d001e78:0000136c 0x136c
9d001e7c:0000136c 0x136c
9d001e80:0000136c 0x136c
9d001e84:0000136c 0x136c
9d001e88:0000136c 0x136c
9d001e8c:0000136c 0x136c
9d001e90:0000136c 0x136c
9d001e94:0000136c 0x136c
9d001e98:0000136c 0x136c
9d001e9c:0000136c 0x136c
9d001ea0:0000136c 0x136c
9d001ea4:0000136c 0x136c
9d001ea8:0000136c 0x136c
9d001eac:0000136c 0x136c
9d001eb0:0000136c 0x136c
9d001eb4:0000136c 0x136c
9d001eb8:0000136c 0x136c
9d001ebc:0000136c 0x136c
9d001ec0:0000136c 0x136c
9d001ec4:0000136c 0x136c
9d001ec8:0000136c 0x136c
9d001ecc:0000136c 0x136c
9d001ed0:0000136c 0x136c
9d001ed4:0000136c 0x136c
9d001ed8:0000136c 0x136c
9d001edc:0000136c 0x136c
9d001ee0:0000136c 0x136c
9d001ee4:0000136c 0x136c
9d001ee8:0000136c 0x136c
9d001eec:0000136c 0x136c
9d001ef0:0000136c 0x136c
9d001ef4:0000136c 0x136c
9d001ef8:0000136c 0x136c
9d001efc:0000136c 0x136c
9d001f00:0000136c 0x136c
9d001f04:0000136c 0x136c
9d001f08:0000136c 0x136c
9d001f0c:0000136c 0x136c
9d001f10:0000136c 0x136c
9d001f14:0000136c 0x136c
9d001f18:0000136c 0x136c
9d001f1c:0000136c 0x136c
9d001f20:0000136c 0x136c
9d001f24:0000136c 0x136c
9d001f28:0000136c 0x136c
9d001f2c:0000136c 0x136c
9d001f30:0000136c 0x136c
9d001f34:0000136c 0x136c
9d001f38:0000136c 0x136c
9d001f3c:0000136c 0x136c
9d001f40:0000136c 0x136c
9d001f44:0000136c 0x136c
9d001f48:0000136c 0x136c
9d001f4c:0000136c 0x136c
9d001f50:0000136c 0x136c
9d001f54:0000136c 0x136c
9d001f58:0000136c 0x136c
9d001f5c:0000136c 0x136c
9d001f60:bf8106d8 cache0x1,1752(gp)
9d001f64:00000014 0x14
9d001f68:00000001 movfzero,zero,$fcc0
9d001f6c:0000136c 0x136c
9d001f70:0000136c 0x136c
9d001f74:0000136c 0x136c
9d001f78:0000136c 0x136c
9d001f7c:0000136c 0x136c
9d001f80:bf8106f4 cache0x1,1780(gp)
9d001f84:00000040 ssnop
9d001f88:00000001 movfzero,zero,$fcc0
9d001f8c:0000136c 0x136c
9d001f90:0000136c 0x136c
9d001f94:0000136c 0x136c
9d001f98:0000136c 0x136c
9d001f9c:0000136c 0x136c
9d001fa0:0000136c 0x136c
9d001fa4:0000136c 0x136c
9d001fa8:0000136c 0x136c
9d001fac:0000136c 0x136c
9d001fb0:0000136c 0x136c
9d001fb4:0000136c 0x136c
9d001fb8:0000136c 0x136c
9d001fbc:0000136c 0x136c
9d001fc0:0000136c 0x136c
9d001fc4:0000136c 0x136c
9d001fc8:0000136c 0x136c
9d001fcc:bf810740 cache0x1,1856(gp)
9d001fd0:0000005c 0x5c
9d001fd4:00000001 movfzero,zero,$fcc0
9d001fd8:0000136c 0x136c
9d001fdc:0000136c 0x136c
9d001fe0:0000136c 0x136c
9d001fe4:0000136c 0x136c
9d001fe8:0000136c 0x136c
9d001fec:0000136c 0x136c
9d001ff0:0000136c 0x136c
9d001ff4:0000136c 0x136c
9d001ff8:0000136c 0x136c
9d001ffc:0000136c 0x136c
9d002000:0000136c 0x136c
9d002004:0000136c 0x136c
9d002008:0000136c 0x136c
9d00200c:0000136c 0x136c
9d002010:0000136c 0x136c
9d002014:0000136c 0x136c
9d002018:0000136c 0x136c
9d00201c:0000136c 0x136c
9d002020:0000136c 0x136c
9d002024:0000136c 0x136c
9d002028:0000136c 0x136c
9d00202c:0000136c 0x136c
9d002030:0000136c 0x136c
9d002034:bf8107a4 cache0x1,1956(gp)
9d002038:00000098 0x98
9d00203c:00000001 movfzero,zero,$fcc0
9d002040:0000136c 0x136c
9d002044:0000136c 0x136c
9d002048:0000136c 0x136c
9d00204c:0000136c 0x136c
9d002050:0000136c 0x136c
9d002054:0000136c 0x136c
9d002058:0000136c 0x136c
9d00205c:0000136c 0x136c
9d002060:0000136c 0x136c
9d002064:0000136c 0x136c
9d002068:0000136c 0x136c
9d00206c:0000136c 0x136c
9d002070:0000136c 0x136c
9d002074:0000136c 0x136c
9d002078:0000136c 0x136c
9d00207c:0000136c 0x136c
9d002080:0000136c 0x136c
9d002084:0000136c 0x136c
9d002088:0000136c 0x136c
9d00208c:0000136c 0x136c
9d002090:0000136c 0x136c
9d002094:0000136c 0x136c
9d002098:0000136c 0x136c
9d00209c:0000136c 0x136c
9d0020a0:0000136c 0x136c
9d0020a4:0000136c 0x136c
9d0020a8:0000136c 0x136c
9d0020ac:0000136c 0x136c
9d0020b0:0000136c 0x136c
9d0020b4:0000136c 0x136c
9d0020b8:0000136c 0x136c
9d0020bc:0000136c 0x136c
9d0020c0:0000136c 0x136c
9d0020c4:0000136c 0x136c
9d0020c8:0000136c 0x136c
9d0020cc:0000136c 0x136c
9d0020d0:0000136c 0x136c
9d0020d4:0000136c 0x136c
9d0020d8:bf810840 cache0x1,2112(gp)
9d0020dc:0000000c syscall
9d0020e0:00000001 movfzero,zero,$fcc0
9d0020e4:0000136c 0x136c
9d0020e8:0000136c 0x136c
9d0020ec:0000136c 0x136c
9d0020f0:bf810850 cache0x1,2128(gp)
9d0020f4:00000004 sllvzero,zero,zero
9d0020f8:00000001 movfzero,zero,$fcc0
9d0020fc:0000136c 0x136c
9d002100:bf810858 cache0x1,2136(gp)
9d002104:00000014 0x14
9d002108:00000001 movfzero,zero,$fcc0
9d00210c:0000136c 0x136c
9d002110:0000136c 0x136c
9d002114:0000136c 0x136c
9d002118:0000136c 0x136c
9d00211c:0000136c 0x136c
9d002120:bf810874 cache0x1,2164(gp)
9d002124:00000018 multzero,zero
9d002128:00000001 movfzero,zero,$fcc0
9d00212c:0000136c 0x136c
9d002130:0000136c 0x136c
9d002134:0000136c 0x136c
9d002138:0000136c 0x136c
9d00213c:0000136c 0x136c
9d002140:0000136c 0x136c
9d002144:bf810894 cache0x1,2196(gp)
9d002148:00000004 sllvzero,zero,zero
9d00214c:00000001 movfzero,zero,$fcc0
9d002150:0000136c 0x136c
9d002154:80002350 lbzero,9040(zero)
9d002158:00000020 addzero,zero,zero
9d00215c:00000000 nop
9d002160:800006b0 lbzero,1712(zero)
9d002164:00000004 sllvzero,zero,zero
9d002168:00000001 movfzero,zero,$fcc0
9d00216c:00000000 nop
9d002170:8000038c lbzero,908(zero)
9d002174:00000004 sllvzero,zero,zero
9d002178:00000001 movfzero,zero,$fcc0
9d00217c:00000000 nop
9d002180:80000388 lbzero,904(zero)
9d002184:00000004 sllvzero,zero,zero
9d002188:00000001 movfzero,zero,$fcc0
9d00218c:00000000 nop
9d002190:80001b08 lbzero,6920(zero)
9d002194:00000418 0x418
9d002198:00000001 movfzero,zero,$fcc0
9d00219c:00000000 nop
9d0021a0:80001df4 lbzero,7668(zero)
9d0021a4:80001e58 lbzero,7768(zero)
9d0021a8:80001ebc lbzero,7868(zero)
...
9d0021d0:9d00bd44 0x9d00bd44
...
9d002244:00000001 movfzero,zero,$fcc0
9d002248:00000000 nop
9d00224c:abcd330e swlt5,13070(s8)
9d002250:e66d1234 swc1$f13,4660(s3)
9d002254:0005deec 0x5deec
9d002258:0000000b movnzero,zero,zero
...
9d0025b4:80002390 lbzero,9104(zero)
9d0025b8:00000004 sllvzero,zero,zero
9d0025bc:00000001 movfzero,zero,$fcc0
9d0025c0:80001b08 lbzero,6920(zero)
9d0025c4:80001f20 lbzero,7968(zero)
9d0025c8:00000408 jr.hbzero
9d0025cc:00000001 movfzero,zero,$fcc0
...
9d0025d8:80001f20 lbzero,7968(zero)
9d0025dc:80001f20 lbzero,7968(zero)
9d0025e0:80001f28 lbzero,7976(zero)
9d0025e4:80001f28 lbzero,7976(zero)
9d0025e8:80001f30 lbzero,7984(zero)
9d0025ec:80001f30 lbzero,7984(zero)
9d0025f0:80001f38 lbzero,7992(zero)
9d0025f4:80001f38 lbzero,7992(zero)
9d0025f8:80001f40 lbzero,8000(zero)
9d0025fc:80001f40 lbzero,8000(zero)
9d002600:80001f48 lbzero,8008(zero)
9d002604:80001f48 lbzero,8008(zero)
9d002608:80001f50 lbzero,8016(zero)
9d00260c:80001f50 lbzero,8016(zero)
9d002610:80001f58 lbzero,8024(zero)
9d002614:80001f58 lbzero,8024(zero)
9d002618:80001f60 lbzero,8032(zero)
9d00261c:80001f60 lbzero,8032(zero)
9d002620:80001f68 lbzero,8040(zero)
9d002624:80001f68 lbzero,8040(zero)
9d002628:80001f70 lbzero,8048(zero)
9d00262c:80001f70 lbzero,8048(zero)
9d002630:80001f78 lbzero,8056(zero)
9d002634:80001f78 lbzero,8056(zero)
9d002638:80001f80 lbzero,8064(zero)
9d00263c:80001f80 lbzero,8064(zero)
9d002640:80001f88 lbzero,8072(zero)
9d002644:80001f88 lbzero,8072(zero)
9d002648:80001f90 lbzero,8080(zero)
9d00264c:80001f90 lbzero,8080(zero)
9d002650:80001f98 lbzero,8088(zero)
9d002654:80001f98 lbzero,8088(zero)
9d002658:80001fa0 lbzero,8096(zero)
9d00265c:80001fa0 lbzero,8096(zero)
9d002660:80001fa8 lbzero,8104(zero)
9d002664:80001fa8 lbzero,8104(zero)
9d002668:80001fb0 lbzero,8112(zero)
9d00266c:80001fb0 lbzero,8112(zero)
9d002670:80001fb8 lbzero,8120(zero)
9d002674:80001fb8 lbzero,8120(zero)
9d002678:80001fc0 lbzero,8128(zero)
9d00267c:80001fc0 lbzero,8128(zero)
9d002680:80001fc8 lbzero,8136(zero)
9d002684:80001fc8 lbzero,8136(zero)
9d002688:80001fd0 lbzero,8144(zero)
9d00268c:80001fd0 lbzero,8144(zero)
9d002690:80001fd8 lbzero,8152(zero)
9d002694:80001fd8 lbzero,8152(zero)
9d002698:80001fe0 lbzero,8160(zero)
9d00269c:80001fe0 lbzero,8160(zero)
9d0026a0:80001fe8 lbzero,8168(zero)
9d0026a4:80001fe8 lbzero,8168(zero)
9d0026a8:80001ff0 lbzero,8176(zero)
9d0026ac:80001ff0 lbzero,8176(zero)
9d0026b0:80001ff8 lbzero,8184(zero)
9d0026b4:80001ff8 lbzero,8184(zero)
9d0026b8:80002000 lbzero,8192(zero)
9d0026bc:80002000 lbzero,8192(zero)
9d0026c0:80002008 lbzero,8200(zero)
9d0026c4:80002008 lbzero,8200(zero)
9d0026c8:80002010 lbzero,8208(zero)
9d0026cc:80002010 lbzero,8208(zero)
9d0026d0:80002018 lbzero,8216(zero)
9d0026d4:80002018 lbzero,8216(zero)
9d0026d8:80002020 lbzero,8224(zero)
9d0026dc:80002020 lbzero,8224(zero)
9d0026e0:80002028 lbzero,8232(zero)
9d0026e4:80002028 lbzero,8232(zero)
9d0026e8:80002030 lbzero,8240(zero)
9d0026ec:80002030 lbzero,8240(zero)
9d0026f0:80002038 lbzero,8248(zero)
9d0026f4:80002038 lbzero,8248(zero)
9d0026f8:80002040 lbzero,8256(zero)
9d0026fc:80002040 lbzero,8256(zero)
9d002700:80002048 lbzero,8264(zero)
9d002704:80002048 lbzero,8264(zero)
9d002708:80002050 lbzero,8272(zero)
9d00270c:80002050 lbzero,8272(zero)
9d002710:80002058 lbzero,8280(zero)
9d002714:80002058 lbzero,8280(zero)
9d002718:80002060 lbzero,8288(zero)
9d00271c:80002060 lbzero,8288(zero)
9d002720:80002068 lbzero,8296(zero)
9d002724:80002068 lbzero,8296(zero)
9d002728:80002070 lbzero,8304(zero)
9d00272c:80002070 lbzero,8304(zero)
9d002730:80002078 lbzero,8312(zero)
9d002734:80002078 lbzero,8312(zero)
9d002738:80002080 lbzero,8320(zero)
9d00273c:80002080 lbzero,8320(zero)
9d002740:80002088 lbzero,8328(zero)
9d002744:80002088 lbzero,8328(zero)
9d002748:80002090 lbzero,8336(zero)
9d00274c:80002090 lbzero,8336(zero)
9d002750:80002098 lbzero,8344(zero)
9d002754:80002098 lbzero,8344(zero)
9d002758:800020a0 lbzero,8352(zero)
9d00275c:800020a0 lbzero,8352(zero)
9d002760:800020a8 lbzero,8360(zero)
9d002764:800020a8 lbzero,8360(zero)
9d002768:800020b0 lbzero,8368(zero)
9d00276c:800020b0 lbzero,8368(zero)
9d002770:800020b8 lbzero,8376(zero)
9d002774:800020b8 lbzero,8376(zero)
9d002778:800020c0 lbzero,8384(zero)
9d00277c:800020c0 lbzero,8384(zero)
9d002780:800020c8 lbzero,8392(zero)
9d002784:800020c8 lbzero,8392(zero)
9d002788:800020d0 lbzero,8400(zero)
9d00278c:800020d0 lbzero,8400(zero)
9d002790:800020d8 lbzero,8408(zero)
9d002794:800020d8 lbzero,8408(zero)
9d002798:800020e0 lbzero,8416(zero)
9d00279c:800020e0 lbzero,8416(zero)
9d0027a0:800020e8 lbzero,8424(zero)
9d0027a4:800020e8 lbzero,8424(zero)
9d0027a8:800020f0 lbzero,8432(zero)
9d0027ac:800020f0 lbzero,8432(zero)
9d0027b0:800020f8 lbzero,8440(zero)
9d0027b4:800020f8 lbzero,8440(zero)
9d0027b8:80002100 lbzero,8448(zero)
9d0027bc:80002100 lbzero,8448(zero)
9d0027c0:80002108 lbzero,8456(zero)
9d0027c4:80002108 lbzero,8456(zero)
9d0027c8:80002110 lbzero,8464(zero)
9d0027cc:80002110 lbzero,8464(zero)
9d0027d0:80002118 lbzero,8472(zero)
9d0027d4:80002118 lbzero,8472(zero)
9d0027d8:80002120 lbzero,8480(zero)
9d0027dc:80002120 lbzero,8480(zero)
9d0027e0:80002128 lbzero,8488(zero)
9d0027e4:80002128 lbzero,8488(zero)
9d0027e8:80002130 lbzero,8496(zero)
9d0027ec:80002130 lbzero,8496(zero)
9d0027f0:80002138 lbzero,8504(zero)
9d0027f4:80002138 lbzero,8504(zero)
9d0027f8:80002140 lbzero,8512(zero)
9d0027fc:80002140 lbzero,8512(zero)
9d002800:80002148 lbzero,8520(zero)
9d002804:80002148 lbzero,8520(zero)
9d002808:80002150 lbzero,8528(zero)
9d00280c:80002150 lbzero,8528(zero)
9d002810:80002158 lbzero,8536(zero)
9d002814:80002158 lbzero,8536(zero)
9d002818:80002160 lbzero,8544(zero)
9d00281c:80002160 lbzero,8544(zero)
9d002820:80002168 lbzero,8552(zero)
9d002824:80002168 lbzero,8552(zero)
9d002828:80002170 lbzero,8560(zero)
9d00282c:80002170 lbzero,8560(zero)
9d002830:80002178 lbzero,8568(zero)
9d002834:80002178 lbzero,8568(zero)
9d002838:80002180 lbzero,8576(zero)
9d00283c:80002180 lbzero,8576(zero)
9d002840:80002188 lbzero,8584(zero)
9d002844:80002188 lbzero,8584(zero)
9d002848:80002190 lbzero,8592(zero)
9d00284c:80002190 lbzero,8592(zero)
9d002850:80002198 lbzero,8600(zero)
9d002854:80002198 lbzero,8600(zero)
9d002858:800021a0 lbzero,8608(zero)
9d00285c:800021a0 lbzero,8608(zero)
9d002860:800021a8 lbzero,8616(zero)
9d002864:800021a8 lbzero,8616(zero)
9d002868:800021b0 lbzero,8624(zero)
9d00286c:800021b0 lbzero,8624(zero)
9d002870:800021b8 lbzero,8632(zero)
9d002874:800021b8 lbzero,8632(zero)
9d002878:800021c0 lbzero,8640(zero)
9d00287c:800021c0 lbzero,8640(zero)
9d002880:800021c8 lbzero,8648(zero)
9d002884:800021c8 lbzero,8648(zero)
9d002888:800021d0 lbzero,8656(zero)
9d00288c:800021d0 lbzero,8656(zero)
9d002890:800021d8 lbzero,8664(zero)
9d002894:800021d8 lbzero,8664(zero)
9d002898:800021e0 lbzero,8672(zero)
9d00289c:800021e0 lbzero,8672(zero)
9d0028a0:800021e8 lbzero,8680(zero)
9d0028a4:800021e8 lbzero,8680(zero)
9d0028a8:800021f0 lbzero,8688(zero)
9d0028ac:800021f0 lbzero,8688(zero)
9d0028b0:800021f8 lbzero,8696(zero)
9d0028b4:800021f8 lbzero,8696(zero)
9d0028b8:80002200 lbzero,8704(zero)
9d0028bc:80002200 lbzero,8704(zero)
9d0028c0:80002208 lbzero,8712(zero)
9d0028c4:80002208 lbzero,8712(zero)
9d0028c8:80002210 lbzero,8720(zero)
9d0028cc:80002210 lbzero,8720(zero)
9d0028d0:80002218 lbzero,8728(zero)
9d0028d4:80002218 lbzero,8728(zero)
9d0028d8:80002220 lbzero,8736(zero)
9d0028dc:80002220 lbzero,8736(zero)
9d0028e0:80002228 lbzero,8744(zero)
9d0028e4:80002228 lbzero,8744(zero)
9d0028e8:80002230 lbzero,8752(zero)
9d0028ec:80002230 lbzero,8752(zero)
9d0028f0:80002238 lbzero,8760(zero)
9d0028f4:80002238 lbzero,8760(zero)
9d0028f8:80002240 lbzero,8768(zero)
9d0028fc:80002240 lbzero,8768(zero)
9d002900:80002248 lbzero,8776(zero)
9d002904:80002248 lbzero,8776(zero)
9d002908:80002250 lbzero,8784(zero)
9d00290c:80002250 lbzero,8784(zero)
9d002910:80002258 lbzero,8792(zero)
9d002914:80002258 lbzero,8792(zero)
9d002918:80002260 lbzero,8800(zero)
9d00291c:80002260 lbzero,8800(zero)
9d002920:80002268 lbzero,8808(zero)
9d002924:80002268 lbzero,8808(zero)
9d002928:80002270 lbzero,8816(zero)
9d00292c:80002270 lbzero,8816(zero)
9d002930:80002278 lbzero,8824(zero)
9d002934:80002278 lbzero,8824(zero)
9d002938:80002280 lbzero,8832(zero)
9d00293c:80002280 lbzero,8832(zero)
9d002940:80002288 lbzero,8840(zero)
9d002944:80002288 lbzero,8840(zero)
9d002948:80002290 lbzero,8848(zero)
9d00294c:80002290 lbzero,8848(zero)
9d002950:80002298 lbzero,8856(zero)
9d002954:80002298 lbzero,8856(zero)
9d002958:800022a0 lbzero,8864(zero)
9d00295c:800022a0 lbzero,8864(zero)
9d002960:800022a8 lbzero,8872(zero)
9d002964:800022a8 lbzero,8872(zero)
9d002968:800022b0 lbzero,8880(zero)
9d00296c:800022b0 lbzero,8880(zero)
9d002970:800022b8 lbzero,8888(zero)
9d002974:800022b8 lbzero,8888(zero)
9d002978:800022c0 lbzero,8896(zero)
9d00297c:800022c0 lbzero,8896(zero)
9d002980:800022c8 lbzero,8904(zero)
9d002984:800022c8 lbzero,8904(zero)
9d002988:800022d0 lbzero,8912(zero)
9d00298c:800022d0 lbzero,8912(zero)
9d002990:800022d8 lbzero,8920(zero)
9d002994:800022d8 lbzero,8920(zero)
9d002998:800022e0 lbzero,8928(zero)
9d00299c:800022e0 lbzero,8928(zero)
9d0029a0:800022e8 lbzero,8936(zero)
9d0029a4:800022e8 lbzero,8936(zero)
9d0029a8:800022f0 lbzero,8944(zero)
9d0029ac:800022f0 lbzero,8944(zero)
9d0029b0:800022f8 lbzero,8952(zero)
9d0029b4:800022f8 lbzero,8952(zero)
9d0029b8:80002300 lbzero,8960(zero)
9d0029bc:80002300 lbzero,8960(zero)
9d0029c0:80002308 lbzero,8968(zero)
9d0029c4:80002308 lbzero,8968(zero)
9d0029c8:80002310 lbzero,8976(zero)
9d0029cc:80002310 lbzero,8976(zero)
9d0029d0:80002318 lbzero,8984(zero)
9d0029d4:80002318 lbzero,8984(zero)
9d0029d8:80002394 lbzero,9108(zero)
9d0029dc:00000004 sllvzero,zero,zero
9d0029e0:00000001 movfzero,zero,$fcc0
9d0029e4:00020000 sllzero,v0,0x0
9d0029e8:80002398 lbzero,9112(zero)
9d0029ec:00000004 sllvzero,zero,zero
9d0029f0:00000000 nop
9d0029f4:8000239c lbzero,9116(zero)
9d0029f8:00000004 sllvzero,zero,zero
9d0029fc:00000001 movfzero,zero,$fcc0
9d002a00:ffffffff sdc3$31,-1(ra)
9d002a04:80002328 lbzero,9000(zero)
9d002a08:00000028 0x28
9d002a0c:00000000 nop
9d002a10:800023a0 lbzero,9120(zero)
9d002a14:00000004 sllvzero,zero,zero
9d002a18:00000000 nop
9d002a1c:800023a4 lbzero,9124(zero)
9d002a20:00000004 sllvzero,zero,zero
9d002a24:00000000 nop
9d002a28:800023a8 lbzero,9128(zero)
9d002a2c:00000004 sllvzero,zero,zero
9d002a30:00000000 nop
9d002a34:800023ac lbzero,9132(zero)
9d002a38:00000004 sllvzero,zero,zero
9d002a3c:00000000 nop
9d002a40:80002370 lbzero,9072(zero)
9d002a44:00000018 multzero,zero
...

Disassembly of section .rodata._ZN5Fonts8SinclairE.Sinclair:

9d002a50 <_ZN5Fonts8SinclairE>:
9d002a50:ff000108 00000801 00000000 3c080000     ...............<
9d002a60:81a58142 083c4299 5a7e3c00 003c667e     B....B<..<~Z~f<.
9d002a70:7f360008 081c3e7f 08000800 1c3e3e1c     ..6..>.......>>.
9d002a80:08080008 7f2a1c1c 08001c2a 3e3e1c08     ......*.*.....>>
9d002a90:001c0814 18000008 00183c3c ffff0800     ........<<......
9d002aa0:e7c3c3e7 0008ffff 24241800 08000018     ..........$$....
9d002ab0:dbe7ffff ffffe7db 60700008 0c12125c     ..........p`\...
9d002ac0:1c000800 081c2222 0008081c 08282818     ...."".......((.
9d002ad0:0800060e 5c447800 00066664 2a080008     .....xD\df.....*
9d002ae0:2a1c7f1c 06000808 061e7e1e 00080000     ...*.....~......
9d002af0:787e7860 08000060 082a1c08 00081c2a     `x~x`.....*.*...
9d002b00:24240008 24002424 7c000800 505c5e5e     ..$$$$.$...|^^\P
9d002b10:00080050 423e027c 083e407c 7e000000     P...|.>B|@>....~
9d002b20:00007e7e 2a1c0808 081c2a08 1c08083e     ~~.....*.*..>...
9d002b30:0808082a 08080008 2a080808 0800081c     *..........*....
9d002b40:7f201000 00001020 02040008 0004027f     .. . ...........
9d002b50:00000800 7e020202 00080000 227f2214     .......~....."."
9d002b60:08000014 1c3e3e00 0008081c 08080008     .....>>.........
9d002b70:3e3e1c1c 00000800 00000000 00080000     ..>>............
9d002b80:08080808 08000800 00242400 00000000     .........$$.....
9d002b90:7e240008 247e2424 10000800 507c147c     ..$~$$~$....|.|P
9d002ba0:0008107c 08102646 08006264 08140800     |...F&..db......
9d002bb0:005c2254 08100008 00000000 20000800     T"\............ 
9d002bc0:10101010 00080020 08080804 08000408     .... ...........
9d002bd0:10280000 0028107c 10000008 10107c10     ..(.|.(......|..
9d002be0:00000800 10000000 00080810 7c000000     ...............|
9d002bf0:08000000 00000000 00181800 40000008     ...............@
9d002c00:04081020 3c000800 464a5262 0008003c      ......<bRJF<...
9d002c10:10101418 08007c10 40423c00 007e023c     .....|...<B@<.~.
9d002c20:423c0008 3c424030 10000800 7e121418     ..<B0@B<.......~
9d002c30:00080010 403e027e 08003c42 3e023c00     ....~.>@B<...<.>
9d002c40:003c4242 407e0008 08081020 3c000800     BB<...~@ ......<
9d002c50:42423c42 0008003c 7c42423c 08003c40     B<BB<...<BB|@<..
9d002c60:08000000 00080000 08000008 08080000     ................
9d002c70:00000804 10081020 00080020 007c0000     .... ... .....|.
9d002c80:0800007c 10080000 00081020 423c0008     |....... .....<B
9d002c90:10001020 3c000800 027a6a52 0008003c      ......<Rjz.<...
9d002ca0:7e42423c 08004242 3e423e00 003e4242     <BB~BB...>B>BB>.
9d002cb0:423c0008 3c420202 1e000800 22424222     ..<B..B<...."BB"
9d002cc0:0008001e 023e027e 08007e02 3e027e00     ....~.>..~...~.>
9d002cd0:00020202 423c0008 3c427202 42000800     ......<B.rB<...B
9d002ce0:42427e42 00080042 1010107c 08007c10     B~BBB...|....|..
9d002cf0:40404000 003c4242 12220008 4222120e     .@@@BB<..."..."B
9d002d00:02000800 02020202 0008007e 425a6642     ........~...BfZB
9d002d10:08004242 4a464200 00426252 423c0008     BB...BFJRbB...<B
9d002d20:3c424242 3e000800 023e4242 00080002     BBB<...>BB>.....
9d002d30:4a42423c 08003c52 42423e00 0042223e     <BBJR<...>BB>"B.
9d002d40:023c0008 3c42403c 7f000800 08080808     ..<.<@B<........
9d002d50:00080008 42424242 08003c42 42424200     ....BBBBB<...BBB
9d002d60:00182442 42420008 245a4242 42000800     B$....BBBBZ$...B
9d002d70:24181824 00080042 08142241 08000808     $..$B...A"......
9d002d80:10207e00 007e0408 10700008 70101010     .~ ...~...p....p
9d002d90:00000800 10080402 00080020 0808080e     ........ .......
9d002da0:08000e08 22140800 00000000 00000008     ......."........
9d002db0:00000000 380008ff 04041e44 0008007e     .......8D...~...
9d002dc0:3c201c00 08003c22 3c040400 003c4444     .. <"<.....<DD<.
9d002dd0:38000008 38040404 20000800 22223c20     ...8...8...  <""
9d002de0:0008003c 1e221c00 08003c02 18083000     <....."..<...0..
9d002df0:00080808 3c000008 203c2222 0200081c     .......<""< ....
9d002e00:22221e02 00080022 080c0008 08001c08     .."""...........
9d002e10:20002000 18242020 14040008 24140c0c     . .   $........$
9d002e20:08000800 08080808 00080030 2a2a1600     ........0.....**
9d002e30:08002a2a 221e0000 00222222 1c000008     **....."""".....
9d002e40:1c222222 00000800 1e22221e 00080202     """......"".....
9d002e50:22223c00 0860203c 04380000 00040404     .<""< `...8.....
9d002e60:1c000008 1e201c02 08000800 0808081c     ...... .........
9d002e70:00080030 22222200 08001c22 22220000     0...."""".....""
9d002e80:00081414 22000008 142a2a2a 00000800     ......."***.....
9d002e90:14081422 00080022 22222200 081c203c     "..."...."""< ..
9d002ea0:103e0000 003e0408 10700008 7010100c     ..>...>...p....p
9d002eb0:10000800 10101010 00080010 0830080e     ..............0.
9d002ec0:08000e08 00142800 00000000 14080008     .....(..........
9d002ed0:3e222222 423c0800 99858599 00083c42     """>..<B....B<..
9d002ee0:00000000 08000000 00000000 00000000     ................
9d002ef0:00000008 00000000 00000800 00000000     ................
9d002f00:00080000 00000000 08000000 00000000     ................
9d002f10:00000000 00000008 00000000 00000800     ................
9d002f20:00000000 00080000 00000000 08000000     ................
...
9d002f38:00000008 00000000 00000800 00000000     ................
9d002f48:00080000 00000000 08000000 00000000     ................
9d002f58:00000000 00000008 00000000 00000800     ................
9d002f68:00000000 00080000 00000000 08000000     ................
...
9d002f80:00000008 00000000 00000800 00000000     ................
9d002f90:00080000 00000000 08000000 00000000     ................
9d002fa0:00000000 00000008 00000000 00000800     ................
9d002fb0:00000000 00080000 00000000 08000000     ................
...
9d002fc8:00000008 00000000 00000800 00000000     ................
9d002fd8:00080000 00000000 08000000 00000000     ................
9d002fe8:00000000 00000008 00000000 00000800     ................
9d002ff8:00000000 00080000 00000000 08000000     ................
...
9d003010:00000008 00000000 00000800 00000000     ................
9d003020:00080000 00000000 08000000 00000000     ................
9d003030:00000000 00000008 00000000 00000800     ................
9d003040:00000000 00080000 00000000 08000000     ................
...
9d003058:00000008 00000000 00000800 00000000     ................
9d003068:00080000 00000000 08000000 00000000     ................
9d003078:00000000 00000008 00000000 00aa0800     ................
9d003088:00aa0055 aa080055 aa55aa55 0855aa55     U...U...U.U.U.U.
9d003098:55ff55ff 55ff55ff 08080808 08080808     .U.U.U.U........
9d0030a8:08080808 080f0808 08080808 080f0808     ................
9d0030b8:0808080f 14141414 14141417 00000008     ................
9d0030c8:14141f00 00000814 0f080f00 14080808     ................
9d0030d8:10171414 08141417 14141414 14141414     ................
9d0030e8:00000008 1417101f 14140814 1f101714     ................
9d0030f8:14080000 1f141414 08000000 0f080808     ................
9d003108:00000f08 00000008 08080f00 08080808     ................
9d003118:00f80808 08080000 ff080808 08000000     ................
9d003128:00000000 080808ff 08080808 0808f808     ................
9d003138:00000808 00ff0000 08080000 ff080808     ................
9d003148:08080808 f8080808 0808f808 14141408     ................
9d003158:1414f414 14140814 fc04f414 00080000     ................
9d003168:04fc0000 081414f4 f7141414 0000ff00     ................
9d003178:00000008 14f700ff 14140814 f404f414     ................
9d003188:00081414 00ff0000 080000ff f7141414     ................
9d003198:1414f700 08080808 00ff00ff 14140800     ................
9d0031a8:00ff1414 00080000 00ff0000 080808ff     ................
9d0031b8:00000000 141414ff 14141408 0000fc14     ................
9d0031c8:08080800 f808f808 00080000 08f80000     ................
9d0031d8:080808f8 00000000 141414fc 14141408     ................
9d0031e8:1414ff14 08080814 ff08ff08 08080808     ................
9d0031f8:0f080808 08000000 00000000 080808f8     ................
9d003208:ffffff08 ffffffff 000008ff ffff0000     ................
9d003218:0f08ffff 0f0f0f0f 080f0f0f f0f0f0f0     ................
9d003228:f0f0f0f0 ffffff08 000000ff 0f0f0800     ................
9d003238:00000f0f f0080000 00f0f0f0 08000000     ................
9d003248:00000000 0f0f0f0f 00000008 f0f0f000     ................
9d003258:f0f008f0 fffff0f0 0f08ffff ff0f0f0f     ................
9d003268:08ffffff ffffffff 0f0f0f0f ffffff08     ................
9d003278:f0f0f0ff 0f0f08f0 f0f00f0f f008f0f0     ................
9d003288:0ff0f0f0 080f0f0f f0e0c080 fffefcf8     ................
9d003298:fcfeff08 c0e0f0f8 7eff0880 3c18183c     ...........~<..<
9d0032a8:8108ff7e ffffe7c3 0881c3e7 0103070f     ~...............
9d0032b8:00000000 c0e0f008 00000080 00000800     ................
9d0032c8:c0800000 0008f0e0 01000000 080f0703     ................
9d0032d8:fefcf8f0 ffffffff 3f1f0f08 ffffff7f     ...........?....
9d0032e8:ffff08ff 3f7fffff ff080f1f feffffff     .......?........
9d0032f8:08f0f8fc 7f3f1f0f f0f8fcfe fcf8f008     ......?.........
9d003308:1f3f7ffe 7eff080f 0000183c 00080000     ..?....~<.......
9d003318:18000000 08ff7e3c 0f070301 0103070f     ....<~..........
9d003328:e0c08008 c0e0f0f0 070f0880 c0800103     ................
9d003338:f008f0e0 0180c0e0 080f0703 cccc3333     ............33..
9d003348:cccc3333 00000008 00000000 00000000     33..............

Disassembly of section .rodata._ZN5Fonts7DefaultE.Default:

9d003358 <_ZN5Fonts7DefaultE>:
9d003358:ff000108 00000601 00000000 0e060000     ................
9d003368:1b1f151f 06000e11 1f151f0e 000e1b11     ................
9d003378:1f0a0006 040e1f1f 04000600 0e1f1f0e     ................
9d003388:0e060004 1f151f0a 06000e04 1f1f0e04     ................
9d003398:000e041f 04000006 00040e0e 1f1f0600     ................
9d0033a8:1b11111b 00061f1f 0a0a0400 06000004     ................
9d0033b8:151b1f1f 1f1f1b15 181c0006 02050516     ................
9d0033c8:110e0600 1f040e11 1e060004 02021e12     ................
9d0033d8:06000302 121e121e 00031a12 0e150406     ................
9d0033e8:150e1b1b 03010604 030f1f0f 10060001     ................
9d0033f8:1e1f1e18 06001018 04150e04 00040e15     ................
9d003408:1b1b1b06 1b001b1b 151e0600 14141615     ................
9d003418:0c060014 08140a12 060c1212 00000000     ................
9d003428:001f1f00 150e0406 040e1504 0400061f     ................
9d003438:0404150e 00060004 15040404 0600040e     ................
9d003448:1f080400 00000408 02040006 0004021f     ................
9d003458:01000600 001f0101 00060000 0a1f1f0a     ................
9d003468:06000000 0e040400 00001f1f 1f1f0006     ................
9d003478:0004040e 00000600 00000000 04060000     ................
9d003488:04040404 06000400 000a0a0a 00000000     ................
9d003498:1f0a0a06 0a0a1f0a 1e040600 0f140e05     ................
9d0034a8:03060004 02040813 06001819 02050502     ................
9d0034b8:00160915 040c0c06 00000002 04080600     ................
9d0034c8:04020202 02060008 08080804 06000204     ................
9d0034d8:1f0e1504 0004150e 04040006 0004041f     ................
9d0034e8:00000600 0c0c0000 00060204 001f0000     ................
9d0034f8:06000000 00000000 000c0c00 08100006     ................
9d003508:00010204 110e0600 11131519 0406000e     ................
9d003518:04040406 06000e04 0e10110e 001f0101     ................
9d003528:08101f06 0e11100c 0c080600 081f090a     ................
9d003538:1f060008 10100f01 06000e11 0f01021c     ................
9d003548:000e1111 10101f06 01020408 110e0600     ................
9d003558:11110e11 0e06000e 101e1111 06000708     ................
9d003568:00040000 00000004 04000006 02040400     ................
9d003578:08100600 08040204 00060010 1f001f00     ................
9d003588:06000000 10080402 00020408 10110e06     ................
9d003598:0400040c 110e0600 010d1d15 0406001e     ................
9d0035a8:1f11110a 06001111 0f11110f 000f1111     ................
9d0035b8:01110e06 0e110101 110f0600 11111111     ................
9d0035c8:1f06000f 010f0101 06001f01 0f01011f     ................
9d0035d8:00010101 01111e06 1e111901 11110600     ................
9d0035e8:11111f11 0e060011 04040404 06000e04     ................
9d0035f8:0808081c 00060908 05091106 11090503     ................
9d003608:01010600 01010101 1106001f 1515151b     ................
9d003618:06001111 15131111 00111119 11110e06     ................
9d003628:0e111111 110f0600 01010f11 0e060001     ................
9d003638:15111111 06001609 0f11110f 00110905     ................
9d003648:01110e06 0e11100e 151f0600 04040404     ................
9d003658:11060004 11111111 06000e11 11111111     ................
9d003668:00040a11 11111106 0a151515 11110600     ................
9d003678:110a040a 11060011 04040a11 06000404     ................
9d003688:0e08101f 001f0102 02021e06 1e020202     ................
9d003698:01000600 10080402 1e060000 10101010     ................
9d0036a8:06001e10 00110a04 00000000 00000006     ................
9d0036b8:1f000000 06060600 00000804 00060000     ................
9d0036c8:0e080600 06001e09 130d0101 000d1311     ................
9d0036d8:0e000006 0e110111 10100600 19111916     ................
9d0036e8:00060016 1f110e00 06000e01 0e041408     ................
9d0036f8:00040404 0e000006 10161919 0101060e     ................
9d003708:1111130d 04060011 04040600 06000e04     ................
9d003718:08080008 00060908 09010106 09050305     ................
9d003728:04060600 04040404 0006000e 15150b00     ................
9d003738:06001515 130d0000 00111111 0e000006     ................
9d003748:0e111111 00000600 0d13130d 00060101     ................
9d003758:19191600 06101016 130d0000 00010101     ................
9d003768:1e000006 0f100e01 04040600 1404041f     ................
9d003778:00060008 11111100 06001619 11110000     ................
9d003788:00040a11 11000006 0a151511 00000600     ................
9d003798:0a040a11 00060011 1e111100 060e1110     ................
9d0037a8:081f0000 001f0204 04040806 08040402     ................
9d0037b8:04040600 04040004 02060004 04080404     ................
9d0037c8:06000204 00081502 00000000 1b0e0406     ................
9d0037d8:001f1111 110e0600 0e110101 00060608     ................
9d0037e8:11110011 06001619 110e0018 001e011f     ................
9d0037f8:06001f06 1e090e08 00110600 090e0806     ................
9d003808:0306001e 0e080600 06001e09 0806000c     ................
9d003818:001e090e 031e0006 0c081e03 001f0600     ................
9d003828:011f110e 1106001e 1f110e00 06001e01     ................
9d003838:110e0003 001e011f 0c001406 1c080808     ................
9d003848:120c0600 0808080c 0606001c 08080c00     ................
9d003858:06001c08 0a04000a 11111f11 04000406     ................
9d003868:111f110a 000c0611 0107010f 0006000f     ................
9d003878:1e081e00 06001e09 1f090a1c 00190909     ................
9d003888:00110e06 0e11110e 11000600 11110e00     ................
9d003898:0006000e 110e0003 06000e11 1100110e     ................
9d0038a8:00161911 00030006 16191111 00120600     ................
9d0038b8:1c121212 11060e10 11110e00 06000e11     ................
9d0038c8:11110011 000e1111 1f040406 041f0505     ................
9d0038d8:1a0c0604 12020712 1b06001f 041f0e1b     ................
9d0038e8:0604041f 07090907 09091d09 04141806     ................
9d0038f8:0504040e 00180603 090e0806 1806001e     ................
9d003908:08080c00 06001c08 0e001800 000e1111     ................
9d003918:00180006 16191111 1e000600 12120e00     ................
9d003928:1f060012 1d171300 06001119 1e09090e     ................
9d003938:00001f00 11110e06 001f000e 00040600     ................
9d003948:11010604 0006000e 011f0000 06000001     ................
9d003958:1f000000 00001010 09110106 0419121d     ................
9d003968:1101061c 1d1a1509 04061010 04040004     ................
9d003978:06000404 050a1400 0000140a 0a050006     ................
9d003988:00050a14 11040600 11041104 0a061104     ................
9d003998:0a150a15 06150a15 08080808 08080808     ................
9d0039a8:08080806 08080f08 08080608 080f080f     ................
9d0039b8:14060808 17141414 06141414 00000000     ................
9d0039c8:1414141f 0f000006 08080f08 14140608     ................
9d0039d8:14171017 14061414 14141414 06141414     ................
9d0039e8:101f0000 14141417 17141406 00001f10     ................
9d0039f8:14140600 001f1414 08060000 0f080f08     ................
9d003a08:06000000 00000000 0808080f 08080806     ................
9d003a18:00001808 08080600 001f0808 00060000     ................
9d003a28:1f000000 06080808 08080808 08080818     ................
9d003a38:00000006 00001f00 08080600 081f0808     ................
9d003a48:08060808 18081808 06080808 14141414     ................
9d003a58:14141414 14141406 00001c04 00000600     ................
9d003a68:1414041c 14061414 1f001714 06000000     ................
9d003a78:001f0000 14141417 14141406 14141404     ................
9d003a88:00000614 001f001f 14060000 17001714     ................
9d003a98:06141414 001f0808 0000001f 14141406     ................
9d003aa8:00001f14 00000600 081f001f 00060808     ................
9d003ab8:1f000000 06141414 14141414 0000001c     ................
9d003ac8:18080806 00001808 00000600 08180818     ................
9d003ad8:00060808 1c000000 06141414 14141414     ................
9d003ae8:1414141f 1f080806 08081f08 08080608     ................
9d003af8:000f0808 00060000 18000000 06080808     ................
9d003b08:1f1f1f1f 1f1f1f1f 00000006 1f1f1f00     ................
9d003b18:0707061f 07070707 18060707 18181818     ................
9d003b28:06181818 1f1f1f1f 00000000 16000006     ................
9d003b38:16090909 0e000600 0f190f19 00060001     ................
9d003b48:0101191f 06000101 0a0a1f00 000a0a0a     ................
9d003b58:02111f06 1f110204 00000600 0909091e     ................
9d003b68:00060006 0a0a0a0a 06000316 04051f00     ................
9d003b78:00040404 0e041f06 040e1111 0a04061f     ................
9d003b88:0a111f11 04060004 0a11110a 06001b0a     ................
9d003b98:0e0c020c 000e1111 00000006 0e15150e     ................
9d003ba8:0e100600 13151519 0e06010e 010f0101     ................
9d003bb8:06000e01 1111110e 00111111 001f0006     ................
9d003bc8:001f001f 04040600 0004041f 0206001f     ................
9d003bd8:02040804 06001f00 04020408 001f0008     ................
9d003be8:04141c06 04040404 04040604 05040404     ................
9d003bf8:0c060705 001f000c 06000c0c 001d1700     ................
9d003c08:00001d17 1b1b0e06 0000000e 00000600     ................
9d003c18:000c0c00 00060000 0c000000 06000000     ................
9d003c28:0404041c 04060505 12120e06 00001212     ................
9d003c38:180e0600 001e060c 00060000 1e1e1e00     ................
9d003c48:0600001e 00000000 00000000              ............

Disassembly of section .text.__ieee754_pow:

9d003c54 <__ieee754_pow>:
9d003c54:27bdffb0 addiusp,sp,-80
9d003c58:afbf003c swra,60(sp)
9d003c5c:afbe0038 sws8,56(sp)
9d003c60:afb70034 sws7,52(sp)
9d003c64:afb60030 sws6,48(sp)
9d003c68:afb5002c sws5,44(sp)
9d003c6c:afb40028 sws4,40(sp)
9d003c70:afb30024 sws3,36(sp)
9d003c74:afb20020 sws2,32(sp)
9d003c78:afb1001c sws1,28(sp)
9d003c7c:afb00018 sws0,24(sp)
9d003c80:f7b40040 sdc1$f20,64(sp)
9d003c84:46206506 mov.d$f20,$f12
9d003c88:44107000 mfc1s0,$f14
9d003c8c:44717000 mfhc1s1,$f14
9d003c90:44126000 mfc1s2,$f12
9d003c94:44736000 mfhc1s3,$f12
9d003c98:7e36f000 exts6,s1,0x0,0x1f
9d003c9c:02d02825 ora1,s6,s0
9d003ca0:10a001f9 beqza1,9d004488 <__ieee754_pow+0x834>
9d003ca4:02001021 movev0,s0
9d003ca8:7e75f000 exts5,s3,0x0,0x1f
9d003cac:3c057ff0 luia1,0x7ff0
9d003cb0:24a70001 addiua3,a1,1
9d003cb4:02a7402a sltt0,s5,a3
9d003cb8:1100000f beqzt0,9d003cf8 <__ieee754_pow+0xa4>
9d003cbc:0260f021 moves8,s3
9d003cc0:02403021 movea2,s2
9d003cc4:0220b821 moves7,s1
9d003cc8:16a50003 bnes5,a1,9d003cd8 <__ieee754_pow+0x84>
9d003ccc:02002021 movea0,s0
9d003cd0:5640000a bnezls2,9d003cfc <__ieee754_pow+0xa8>
9d003cd4:3c02c010 luiv0,0xc010
9d003cd8:02c7382a slta3,s6,a3
9d003cdc:50e00007 beqzla3,9d003cfc <__ieee754_pow+0xa8>
9d003ce0:3c02c010 luiv0,0xc010
9d003ce4:3c057ff0 luia1,0x7ff0
9d003ce8:16c5000d bnes6,a1,9d003d20 <__ieee754_pow+0xcc>
9d003cec:00000000 nop
9d003cf0:1080000b beqza0,9d003d20 <__ieee754_pow+0xcc>
9d003cf4:00000000 nop
9d003cf8:3c02c010 luiv0,0xc010
9d003cfc:02a2a821 addus5,s5,v0
9d003d00:02b29025 ors2,s5,s2
9d003d04:524001e1 beqzls2,9d00448c <__ieee754_pow+0x838>
9d003d08:3c029d01 luiv0,0x9d01
9d003d0c:3c049d01 luia0,0x9d01
9d003d10:0f40308f jal9d00c23c <.LFE92>
9d003d14:24849740 addiua0,a0,-26816
9d003d18:0b400f99 j9d003e64 <__ieee754_pow+0x210>
9d003d1c:44020000 mfc1v0,$f0
9d003d20:07c10020 bgezs8,9d003da4 <__ieee754_pow+0x150>
9d003d24:0000a021 moves4,zero
9d003d28:3c054340 luia1,0x4340
9d003d2c:02c5282a slta1,s6,a1
9d003d30:50a0001c beqzla1,9d003da4 <__ieee754_pow+0x150>
9d003d34:24140002 lis4,2
9d003d38:3c053ff0 luia1,0x3ff0
9d003d3c:02c5282a slta1,s6,a1
9d003d40:14a00018 bneza1,9d003da4 <__ieee754_pow+0x150>
9d003d44:00162d03 sraa1,s6,0x14
9d003d48:28a70414 sltia3,a1,1044
9d003d4c:14e00009 bneza3,9d003d74 <__ieee754_pow+0x120>
9d003d50:24030433 liv1,1075
9d003d54:00652823 subua1,v1,a1
9d003d58:00a21006 srlvv0,v0,a1
9d003d5c:00a22804 sllva1,v0,a1
9d003d60:14a40010 bnea1,a0,9d003da4 <__ieee754_pow+0x150>
9d003d64:30420001 andiv0,v0,0x1
9d003d68:24140002 lis4,2
9d003d6c:0b400f69 j9d003da4 <__ieee754_pow+0x150>
9d003d70:0282a023 subus4,s4,v0
9d003d74:1480003e bneza0,9d003e70 <__ieee754_pow+0x21c>
9d003d78:4620a306 mov.d$f12,$f20
9d003d7c:24020413 liv0,1043
9d003d80:00452823 subua1,v0,a1
9d003d84:00b61007 sravv0,s6,a1
9d003d88:00a22804 sllva1,v0,a1
9d003d8c:54b6001d bnela1,s6,9d003e04 <__ieee754_pow+0x1b0>
9d003d90:3c023ff0 luiv0,0x3ff0
9d003d94:30420001 andiv0,v0,0x1
9d003d98:24140002 lis4,2
9d003d9c:0b400f80 j9d003e00 <__ieee754_pow+0x1ac>
9d003da0:0282a023 subus4,s4,v0
9d003da4:14800031 bneza0,9d003e6c <__ieee754_pow+0x218>
9d003da8:3c027ff0 luiv0,0x7ff0
9d003dac:16c20015 bnes6,v0,9d003e04 <__ieee754_pow+0x1b0>
9d003db0:3c023ff0 luiv0,0x3ff0
9d003db4:3c02c010 luiv0,0xc010
9d003db8:02a21021 adduv0,s5,v0
9d003dbc:00529025 ors2,v0,s2
9d003dc0:124001b1 beqzs2,9d004488 <__ieee754_pow+0x834>
9d003dc4:3c023ff0 luiv0,0x3ff0
9d003dc8:02a2a82a slts5,s5,v0
9d003dcc:16a00006 bnezs5,9d003de8 <__ieee754_pow+0x194>
9d003dd0:02001021 movev0,s0
9d003dd4:06e101af bgezs7,9d004494 <__ieee754_pow+0x840>
9d003dd8:02201821 movev1,s1
9d003ddc:00001021 movev0,zero
9d003de0:0b401125 j9d004494 <__ieee754_pow+0x840>
9d003de4:00001821 movev1,zero
9d003de8:06e3fffd bgezls7,9d003de0 <__ieee754_pow+0x18c>
9d003dec:00001021 movev0,zero
9d003df0:02001021 movev0,s0
9d003df4:3c048000 luia0,0x8000
9d003df8:0b401125 j9d004494 <__ieee754_pow+0x840>
9d003dfc:00911826 xorv1,a0,s1
9d003e00:3c023ff0 luiv0,0x3ff0
9d003e04:16c2000c bnes6,v0,9d003e38 <__ieee754_pow+0x1e4>
9d003e08:3c024000 luiv0,0x4000
9d003e0c:4402a000 mfc1v0,$f20
9d003e10:06e101a0 bgezs7,9d004494 <__ieee754_pow+0x840>
9d003e14:4463a000 mfhc1v1,$f20
9d003e18:3c049d01 luia0,0x9d01
9d003e1c:d4809748 ldc1$f0,-26808(a0)
9d003e20:44820800 mtc1v0,$f1
9d003e24:44e30800 mthc1v1,$f1
9d003e28:46210043 div.d$f1,$f0,$f1
9d003e2c:44020800 mfc1v0,$f1
9d003e30:0b401125 j9d004494 <__ieee754_pow+0x840>
9d003e34:44630800 mfhc1v1,$f1
9d003e38:56e20003 bnels7,v0,9d003e48 <__ieee754_pow+0x1f4>
9d003e3c:3c023fe0 luiv0,0x3fe0
9d003e40:0b40111f j9d00447c <__ieee754_pow+0x828>
9d003e44:4634a502 mul.d$f20,$f20,$f20
9d003e48:16e20009 bnes7,v0,9d003e70 <__ieee754_pow+0x21c>
9d003e4c:4620a306 mov.d$f12,$f20
9d003e50:07c00007 bltzs8,9d003e70 <__ieee754_pow+0x21c>
9d003e54:00000000 nop
9d003e58:0f401ce3 jal9d00738c <.LFE182>
9d003e5c:4620a306 mov.d$f12,$f20
9d003e60:44020000 mfc1v0,$f0
9d003e64:0b401125 j9d004494 <__ieee754_pow+0x840>
9d003e68:44630000 mfhc1v1,$f0
9d003e6c:4620a306 mov.d$f12,$f20
9d003e70:0f40305d jal9d00c174 <.LFE91>
9d003e74:afa60010 swa2,16(sp)
9d003e78:8fa60010 lwa2,16(sp)
9d003e7c:14c00021 bneza2,9d003f04 <__ieee754_pow+0x2b0>
9d003e80:00133fc2 srla3,s3,0x1f
9d003e84:12a00004 beqzs5,9d003e98 <__ieee754_pow+0x244>
9d003e88:7e63e800 extv1,s3,0x0,0x1e
9d003e8c:3c023ff0 luiv0,0x3ff0
9d003e90:1462001d bnev1,v0,9d003f08 <__ieee754_pow+0x2b4>
9d003e94:24e7ffff addiua3,a3,-1
9d003e98:06e10005 bgezs7,9d003eb0 <__ieee754_pow+0x25c>
9d003e9c:44020000 mfc1v0,$f0
9d003ea0:3c029d01 luiv0,0x9d01
9d003ea4:d4429748 ldc1$f2,-26808(v0)
9d003ea8:46201003 div.d$f0,$f2,$f0
9d003eac:44020000 mfc1v0,$f0
9d003eb0:07c10178 bgezs8,9d004494 <__ieee754_pow+0x840>
9d003eb4:44630000 mfhc1v1,$f0
9d003eb8:3c04c010 luia0,0xc010
9d003ebc:02a4a821 addus5,s5,a0
9d003ec0:0295a825 ors5,s4,s5
9d003ec4:56a00007 bnezls5,9d003ee4 <__ieee754_pow+0x290>
9d003ec8:24040001 lia0,1
9d003ecc:44820000 mtc1v0,$f0
9d003ed0:44e30000 mthc1v1,$f0
9d003ed4:44821000 mtc1v0,$f2
9d003ed8:44e31000 mthc1v1,$f2
9d003edc:0b400fc6 j9d003f18 <__ieee754_pow+0x2c4>
9d003ee0:46220001 sub.d$f0,$f0,$f2
9d003ee4:5684016c bnels4,a0,9d004498 <__ieee754_pow+0x844>
9d003ee8:44820000 mtc1v0,$f0
9d003eec:00402021 movea0,v0
9d003ef0:3c028000 luiv0,0x8000
9d003ef4:00432826 xora1,v0,v1
9d003ef8:00801021 movev0,a0
9d003efc:0b401125 j9d004494 <__ieee754_pow+0x840>
9d003f00:00a01821 movev1,a1
9d003f04:24e7ffff addiua3,a3,-1
9d003f08:02871025 orv0,s4,a3
9d003f0c:54400004 bnezlv0,9d003f20 <__ieee754_pow+0x2cc>
9d003f10:3c0241e0 luiv0,0x41e0
9d003f14:4634a001 sub.d$f0,$f20,$f20
9d003f18:0b400f98 j9d003e60 <__ieee754_pow+0x20c>
9d003f1c:46200003 div.d$f0,$f0,$f0
9d003f20:24420001 addiuv0,v0,1
9d003f24:02c2102a sltv0,s6,v0
9d003f28:1440003a bnezv0,9d004014 <__ieee754_pow+0x3c0>
9d003f2c:3c030010 luiv1,0x10
9d003f30:3c0243f0 luiv0,0x43f0
9d003f34:24420001 addiuv0,v0,1
9d003f38:02c2b02a slts6,s6,v0
9d003f3c:16c0000b bnezs6,9d003f6c <__ieee754_pow+0x318>
9d003f40:3c023fef luiv0,0x3fef
9d003f44:3c023ff0 luiv0,0x3ff0
9d003f48:02a2a82a slts5,s5,v0
9d003f4c:12a0000e beqzs5,9d003f88 <__ieee754_pow+0x334>
9d003f50:00000000 nop
9d003f54:06e3ffa2 bgezls7,9d003de0 <__ieee754_pow+0x18c>
9d003f58:00001021 movev0,zero
9d003f5c:3c029d01 luiv0,0x9d01
9d003f60:d4409758 ldc1$f0,-26792(v0)
9d003f64:0b400f98 j9d003e60 <__ieee754_pow+0x20c>
9d003f68:46200002 mul.d$f0,$f0,$f0
9d003f6c:3442ffff oriv0,v0,0xffff
9d003f70:02a2182a sltv1,s5,v0
9d003f74:1460fff7 bnezv1,9d003f54 <__ieee754_pow+0x300>
9d003f78:24420002 addiuv0,v0,2
9d003f7c:02a2a82a slts5,s5,v0
9d003f80:16a00005 bnezs5,9d003f98 <__ieee754_pow+0x344>
9d003f84:3c029d01 luiv0,0x9d01
9d003f88:5ee0fff5 bgtzls7,9d003f60 <__ieee754_pow+0x30c>
9d003f8c:3c029d01 luiv0,0x9d01
9d003f90:0b400f78 j9d003de0 <__ieee754_pow+0x18c>
9d003f94:00001021 movev0,zero
9d003f98:d4429748 ldc1$f2,-26808(v0)
9d003f9c:46220001 sub.d$f0,$f0,$f2
9d003fa0:3c029d01 luiv0,0x9d01
9d003fa4:d44e9760 ldc1$f14,-26784(v0)
9d003fa8:462e0382 mul.d$f14,$f0,$f14
9d003fac:46200282 mul.d$f10,$f0,$f0
9d003fb0:3c029d01 luiv0,0x9d01
9d003fb4:d4429770 ldc1$f2,-26768(v0)
9d003fb8:46220082 mul.d$f2,$f0,$f2
9d003fbc:3c049d01 luia0,0x9d01
9d003fc0:d4849778 ldc1$f4,-26760(a0)
9d003fc4:46222081 sub.d$f2,$f4,$f2
9d003fc8:46220082 mul.d$f2,$f0,$f2
9d003fcc:3c049d01 luia0,0x9d01
9d003fd0:d4849780 ldc1$f4,-26752(a0)
9d003fd4:46222081 sub.d$f2,$f4,$f2
9d003fd8:46225102 mul.d$f4,$f10,$f2
9d003fdc:3c049d01 luia0,0x9d01
9d003fe0:d4829788 ldc1$f2,-26744(a0)
9d003fe4:46222082 mul.d$f2,$f4,$f2
9d003fe8:3c049d01 luia0,0x9d01
9d003fec:d48a9768 ldc1$f10,-26776(a0)
9d003ff0:4c4a0029 msub.d$f0,$f2,$f0,$f10
9d003ff4:46207040 add.d$f1,$f14,$f0
9d003ff8:44650800 mfhc1a1,$f1
9d003ffc:00002021 movea0,zero
9d004000:44844000 mtc1a0,$f8
9d004004:44e54000 mthc1a1,$f8
9d004008:462e4381 sub.d$f14,$f8,$f14
9d00400c:0b40108d j9d004234 <__ieee754_pow+0x5e0>
9d004010:462e0001 sub.d$f0,$f0,$f14
9d004014:02a3182a sltv1,s5,v1
9d004018:10600007 beqzv1,9d004038 <__ieee754_pow+0x3e4>
9d00401c:00001021 movev0,zero
9d004020:3c029d01 luiv0,0x9d01
9d004024:d4429790 ldc1$f2,-26736(v0)
9d004028:46220002 mul.d$f0,$f0,$f2
9d00402c:44630000 mfhc1v1,$f0
9d004030:0060a821 moves5,v1
9d004034:2402ffcb liv0,-53
9d004038:00154503 srat0,s5,0x14
9d00403c:2508fc01 addiut0,t0,-1023
9d004040:00484021 addut0,v0,t0
9d004044:7eb59800 exts5,s5,0x0,0x14
9d004048:3c0c3ff0 luit4,0x3ff0
9d00404c:02ac6025 ort4,s5,t4
9d004050:3c020003 luiv0,0x3
9d004054:3442988f oriv0,v0,0x988f
9d004058:02a2102a sltv0,s5,v0
9d00405c:1440000a bnezv0,9d004088 <__ieee754_pow+0x434>
9d004060:00004821 movet1,zero
9d004064:3c02000b luiv0,0xb
9d004068:3442b67a oriv0,v0,0xb67a
9d00406c:02a2a82a slts5,s5,v0
9d004070:16a00005 bnezs5,9d004088 <__ieee754_pow+0x434>
9d004074:24090001 lit1,1
9d004078:25080001 addiut0,t0,1
9d00407c:3c02fff0 luiv0,0xfff0
9d004080:01826021 addut4,t4,v0
9d004084:00004821 movet1,zero
9d004088:44020000 mfc1v0,$f0
9d00408c:44821000 mtc1v0,$f2
9d004090:44ec1000 mthc1t4,$f2
9d004094:000930c0 slla2,t1,0x3
9d004098:3c049d01 luia0,0x9d01
9d00409c:2484c2b0 addiua0,a0,-15696
9d0040a0:4cc40381 ldxc1$f14,a0(a2)
9d0040a4:462e1401 sub.d$f16,$f2,$f14
9d0040a8:462e1000 add.d$f0,$f2,$f14
9d0040ac:3c049d01 luia0,0x9d01
9d0040b0:d4849748 ldc1$f4,-26808(a0)
9d0040b4:46202103 div.d$f4,$f4,$f0
9d0040b8:46248202 mul.d$f8,$f16,$f4
9d0040bc:446b4000 mfhc1t3,$f8
9d0040c0:00005021 movet2,zero
9d0040c4:448a3000 mtc1t2,$f6
9d0040c8:44eb3000 mthc1t3,$f6
9d0040cc:00002021 movea0,zero
9d0040d0:000c6043 srat4,t4,0x1
9d0040d4:3c0a2000 luit2,0x2000
9d0040d8:018a6025 ort4,t4,t2
9d0040dc:3c0a0008 luit2,0x8
9d0040e0:018a6021 addut4,t4,t2
9d0040e4:00094c80 sllt1,t1,0x12
9d0040e8:01892821 addua1,t4,t1
9d0040ec:44840000 mtc1a0,$f0
9d0040f0:44e50000 mthc1a1,$f0
9d0040f4:46203302 mul.d$f12,$f6,$f0
9d0040f8:462c8401 sub.d$f16,$f16,$f12
9d0040fc:462e0001 sub.d$f0,$f0,$f14
9d004100:46201001 sub.d$f0,$f2,$f0
9d004104:46203002 mul.d$f0,$f6,$f0
9d004108:46208001 sub.d$f0,$f16,$f0
9d00410c:46202382 mul.d$f14,$f4,$f0
9d004110:46284082 mul.d$f2,$f8,$f8
9d004114:46221302 mul.d$f12,$f2,$f2
9d004118:3c049d01 luia0,0x9d01
9d00411c:d48097a0 ldc1$f0,-26720(a0)
9d004120:3c049d01 luia0,0x9d01
9d004124:d48a9798 ldc1$f10,-26728(a0)
9d004128:4c0a12a1 madd.d$f10,$f0,$f2,$f10
9d00412c:3c049d01 luia0,0x9d01
9d004130:d48097a8 ldc1$f0,-26712(a0)
9d004134:4c0a12a1 madd.d$f10,$f0,$f2,$f10
9d004138:3c049d01 luia0,0x9d01
9d00413c:d48097b0 ldc1$f0,-26704(a0)
9d004140:4c0a12a1 madd.d$f10,$f0,$f2,$f10
9d004144:3c049d01 luia0,0x9d01
9d004148:d48097b8 ldc1$f0,-26696(a0)
9d00414c:4c0a12a1 madd.d$f10,$f0,$f2,$f10
9d004150:3c049d01 luia0,0x9d01
9d004154:d48497c0 ldc1$f4,-26688(a0)
9d004158:4c8a10a1 madd.d$f2,$f4,$f2,$f10
9d00415c:46283100 add.d$f4,$f6,$f8
9d004160:46247102 mul.d$f4,$f14,$f4
9d004164:4c8260a1 madd.d$f2,$f4,$f12,$f2
9d004168:46263102 mul.d$f4,$f6,$f6
9d00416c:3c049d01 luia0,0x9d01
9d004170:d48a97c8 ldc1$f10,-26680(a0)
9d004174:462a2000 add.d$f0,$f4,$f10
9d004178:46220000 add.d$f0,$f0,$f2
9d00417c:44650000 mfhc1a1,$f0
9d004180:00002021 movea0,zero
9d004184:44846000 mtc1a0,$f12
9d004188:44e56000 mthc1a1,$f12
9d00418c:462c3182 mul.d$f6,$f6,$f12
9d004190:462a6281 sub.d$f10,$f12,$f10
9d004194:46245101 sub.d$f4,$f10,$f4
9d004198:46241081 sub.d$f2,$f2,$f4
9d00419c:46281202 mul.d$f8,$f2,$f8
9d0041a0:4d0c7321 madd.d$f12,$f8,$f14,$f12
9d0041a4:462c3080 add.d$f2,$f6,$f12
9d0041a8:44651000 mfhc1a1,$f2
9d0041ac:00002021 movea0,zero
9d0041b0:44845000 mtc1a0,$f10
9d0041b4:44e55000 mthc1a1,$f10
9d0041b8:3c029d01 luiv0,0x9d01
9d0041bc:d45097d0 ldc1$f16,-26672(v0)
9d0041c0:46305402 mul.d$f16,$f10,$f16
9d0041c4:46265181 sub.d$f6,$f10,$f6
9d0041c8:46266301 sub.d$f12,$f12,$f6
9d0041cc:3c029d01 luiv0,0x9d01
9d0041d0:d45297e0 ldc1$f18,-26656(v0)
9d0041d4:46326302 mul.d$f12,$f12,$f18
9d0041d8:3c029d01 luiv0,0x9d01
9d0041dc:d44097d8 ldc1$f0,-26664(v0)
9d0041e0:4d8052a1 madd.d$f10,$f12,$f10,$f0
9d0041e4:3c029d01 luiv0,0x9d01
9d0041e8:2442c2d0 addiuv0,v0,-15664
9d0041ec:4cc20481 ldxc1$f18,v0(a2)
9d0041f0:46325280 add.d$f10,$f10,$f18
9d0041f4:44880800 mtc1t0,$f1
9d0041f8:46800821 cvt.d.w$f0,$f1
9d0041fc:3c029d01 luiv0,0x9d01
9d004200:2442c2c0 addiuv0,v0,-15680
9d004204:4cc20081 ldxc1$f2,v0(a2)
9d004208:462a8100 add.d$f4,$f16,$f10
9d00420c:46222100 add.d$f4,$f4,$f2
9d004210:46202100 add.d$f4,$f4,$f0
9d004214:44652000 mfhc1a1,$f4
9d004218:00002021 movea0,zero
9d00421c:44844000 mtc1a0,$f8
9d004220:44e54000 mthc1a1,$f8
9d004224:46204001 sub.d$f0,$f8,$f0
9d004228:46220001 sub.d$f0,$f0,$f2
9d00422c:46300001 sub.d$f0,$f0,$f16
9d004230:46205001 sub.d$f0,$f10,$f0
9d004234:2694ffff addius4,s4,-1
9d004238:02873825 ora3,s4,a3
9d00423c:14e00004 bneza3,9d004250 <__ieee754_pow+0x5fc>
9d004240:3c029d01 luiv0,0x9d01
9d004244:3c029d01 luiv0,0x9d01
9d004248:0b401095 j9d004254 <__ieee754_pow+0x600>
9d00424c:d4549750 ldc1$f20,-26800(v0)
9d004250:d4549748 ldc1$f20,-26808(v0)
9d004254:00002021 movea0,zero
9d004258:44841000 mtc1a0,$f2
9d00425c:44f11000 mthc1s1,$f2
9d004260:44900800 mtc1s0,$f1
9d004264:44f10800 mthc1s1,$f1
9d004268:46220901 sub.d$f4,$f1,$f2
9d00426c:46200802 mul.d$f0,$f1,$f0
9d004270:4c0821a1 madd.d$f6,$f0,$f4,$f8
9d004274:46281102 mul.d$f4,$f2,$f8
9d004278:46243000 add.d$f0,$f6,$f4
9d00427c:44040000 mfc1a0,$f0
9d004280:44650000 mfhc1a1,$f0
9d004284:3c024090 luiv0,0x4090
9d004288:00a2182a sltv1,a1,v0
9d00428c:1460000f bnezv1,9d0042cc <__ieee754_pow+0x678>
9d004290:00a04021 movet0,a1
9d004294:00a21023 subuv0,a1,v0
9d004298:00441025 orv0,v0,a0
9d00429c:14400009 bnezv0,9d0042c4 <__ieee754_pow+0x670>
9d0042a0:3c029d01 luiv0,0x9d01
9d0042a4:3c029d01 luiv0,0x9d01
9d0042a8:d44297e8 ldc1$f2,-26648(v0)
9d0042ac:46223080 add.d$f2,$f6,$f2
9d0042b0:46240001 sub.d$f0,$f0,$f4
9d0042b4:4622003c c.lt.d$f0,$f2
9d0042b8:45020018 bc1fl9d00431c <__ieee754_pow+0x6c8>
9d0042bc:7ca2f000 extv0,a1,0x0,0x1f
9d0042c0:3c029d01 luiv0,0x9d01
9d0042c4:0b4010c4 j9d004310 <__ieee754_pow+0x6bc>
9d0042c8:d4409758 ldc1$f0,-26792(v0)
9d0042cc:7ca6f000 exta2,a1,0x0,0x1f
9d0042d0:3443cc00 oriv1,v0,0xcc00
9d0042d4:00c3102a sltv0,a2,v1
9d0042d8:14400010 bnezv0,9d00431c <__ieee754_pow+0x6c8>
9d0042dc:7ca2f000 extv0,a1,0x0,0x1f
9d0042e0:3c023f6f luiv0,0x3f6f
9d0042e4:24423400 addiuv0,v0,13312
9d0042e8:00451021 adduv0,v0,a1
9d0042ec:00441025 orv0,v0,a0
9d0042f0:14400006 bnezv0,9d00430c <__ieee754_pow+0x6b8>
9d0042f4:3c029d01 luiv0,0x9d01
9d0042f8:46240001 sub.d$f0,$f0,$f4
9d0042fc:4620313e c.le.d$fcc1,$f6,$f0
9d004300:45060006 bc1fl$fcc1,9d00431c <__ieee754_pow+0x6c8>
9d004304:7ca2f000 extv0,a1,0x0,0x1f
9d004308:3c029d01 luiv0,0x9d01
9d00430c:d44097f0 ldc1$f0,-26640(v0)
9d004310:4620a082 mul.d$f2,$f20,$f0
9d004314:0b400f98 j9d003e60 <__ieee754_pow+0x20c>
9d004318:46201002 mul.d$f0,$f2,$f0
9d00431c:3c033fe0 luiv1,0x3fe0
9d004320:24630001 addiuv1,v1,1
9d004324:0043182a sltv1,v0,v1
9d004328:14600018 bnezv1,9d00438c <__ieee754_pow+0x738>
9d00432c:00003021 movea2,zero
9d004330:00021503 srav0,v0,0x14
9d004334:2442fc02 addiuv0,v0,-1022
9d004338:3c040010 luia0,0x10
9d00433c:00441007 sravv0,a0,v0
9d004340:00452821 addua1,v0,a1
9d004344:7ca75500 exta3,a1,0x14,0xb
9d004348:00001021 movev0,zero
9d00434c:24e6fc01 addiua2,a3,-1023
9d004350:2489ffff addiut1,a0,-1
9d004354:00c93007 srava2,t1,a2
9d004358:00063027 nora2,zero,a2
9d00435c:00c51824 andv1,a2,a1
9d004360:44820000 mtc1v0,$f0
9d004364:44e30000 mthc1v1,$f0
9d004368:7ca59800 exta1,a1,0x0,0x14
9d00436c:00a42025 ora0,a1,a0
9d004370:24060413 lia2,1043
9d004374:00c73823 subua3,a2,a3
9d004378:00e43007 srava2,a0,a3
9d00437c:00062023 negua0,a2
9d004380:29050000 sltia1,t0,0
9d004384:0085300b movna2,a0,a1
9d004388:46202101 sub.d$f4,$f4,$f0
9d00438c:46243080 add.d$f2,$f6,$f4
9d004390:44631000 mfhc1v1,$f2
9d004394:00001021 movev0,zero
9d004398:44824000 mtc1v0,$f8
9d00439c:44e34000 mthc1v1,$f8
9d0043a0:3c029d01 luiv0,0x9d01
9d0043a4:d44a97f8 ldc1$f10,-26632(v0)
9d0043a8:462a4282 mul.d$f10,$f8,$f10
9d0043ac:46244101 sub.d$f4,$f8,$f4
9d0043b0:46243001 sub.d$f0,$f6,$f4
9d0043b4:3c029d01 luiv0,0x9d01
9d0043b8:d44e9808 ldc1$f14,-26616(v0)
9d0043bc:462e4382 mul.d$f14,$f8,$f14
9d0043c0:3c029d01 luiv0,0x9d01
9d0043c4:d4509800 ldc1$f16,-26624(v0)
9d0043c8:4dd00221 madd.d$f8,$f14,$f0,$f16
9d0043cc:46285080 add.d$f2,$f10,$f8
9d0043d0:462a1001 sub.d$f0,$f2,$f10
9d0043d4:46204181 sub.d$f6,$f8,$f0
9d0043d8:46221302 mul.d$f12,$f2,$f2
9d0043dc:3c029d01 luiv0,0x9d01
9d0043e0:d4409818 ldc1$f0,-26600(v0)
9d0043e4:3c029d01 luiv0,0x9d01
9d0043e8:d4489810 ldc1$f8,-26608(v0)
9d0043ec:4c086229 msub.d$f8,$f0,$f12,$f8
9d0043f0:3c029d01 luiv0,0x9d01
9d0043f4:d4409820 ldc1$f0,-26592(v0)
9d0043f8:4c086221 madd.d$f8,$f0,$f12,$f8
9d0043fc:3c029d01 luiv0,0x9d01
9d004400:d4409828 ldc1$f0,-26584(v0)
9d004404:4c086229 msub.d$f8,$f0,$f12,$f8
9d004408:3c029d01 luiv0,0x9d01
9d00440c:d4409830 ldc1$f0,-26576(v0)
9d004410:4c086221 madd.d$f8,$f0,$f12,$f8
9d004414:46286302 mul.d$f12,$f12,$f8
9d004418:462c1301 sub.d$f12,$f2,$f12
9d00441c:462c1202 mul.d$f8,$f2,$f12
9d004420:3c029d01 luiv0,0x9d01
9d004424:d4449838 ldc1$f4,-26568(v0)
9d004428:46246301 sub.d$f12,$f12,$f4
9d00442c:462c4303 div.d$f12,$f8,$f12
9d004430:4cc61021 madd.d$f0,$f6,$f2,$f6
9d004434:46206301 sub.d$f12,$f12,$f0
9d004438:46226081 sub.d$f2,$f12,$f2
9d00443c:3c029d01 luiv0,0x9d01
9d004440:d44c9748 ldc1$f12,-26808(v0)
9d004444:46226301 sub.d$f12,$f12,$f2
9d004448:44636000 mfhc1v1,$f12
9d00444c:00061500 sllv0,a2,0x14
9d004450:00431021 adduv0,v0,v1
9d004454:00021d03 srav1,v0,0x14
9d004458:1c600005 bgtzv1,9d004470 <__ieee754_pow+0x81c>
9d00445c:44046000 mfc1a0,$f12
9d004460:0f4023d5 jal9d008f54 <.LBE4>
9d004464:00000000 nop
9d004468:0b40111f j9d00447c <__ieee754_pow+0x828>
9d00446c:4620a502 mul.d$f20,$f20,$f0
9d004470:44840000 mtc1a0,$f0
9d004474:44e20000 mthc1v0,$f0
9d004478:4620a502 mul.d$f20,$f20,$f0
9d00447c:4402a000 mfc1v0,$f20
9d004480:0b401125 j9d004494 <__ieee754_pow+0x840>
9d004484:4463a000 mfhc1v1,$f20
9d004488:3c029d01 luiv0,0x9d01
9d00448c:8c43974c lwv1,-26804(v0)
9d004490:8c429748 lwv0,-26808(v0)
9d004494:44820000 mtc1v0,$f0
9d004498:44e30000 mthc1v1,$f0
9d00449c:8fbf003c lwra,60(sp)
9d0044a0:8fbe0038 lws8,56(sp)
9d0044a4:8fb70034 lws7,52(sp)
9d0044a8:8fb60030 lws6,48(sp)
9d0044ac:8fb5002c lws5,44(sp)
9d0044b0:8fb40028 lws4,40(sp)
9d0044b4:8fb30024 lws3,36(sp)
9d0044b8:8fb20020 lws2,32(sp)
9d0044bc:8fb1001c lws1,28(sp)
9d0044c0:8fb00018 lws0,24(sp)
9d0044c4:d7b40040 ldc1$f20,64(sp)
9d0044c8:03e00008 jrra
9d0044cc:27bd0050 addiusp,sp,80

Disassembly of section .text._ZN7SSD128912startDisplayEv:

9d0044d0 <_ZN7SSD128912startDisplayEv>:
    digitalWrite(pin_cs, LOW);

    startDisplay();
}

void SSD1289::startDisplay() {
9d0044d0:27bdffe8 addiusp,sp,-24
9d0044d4:afbf0014 swra,20(sp)
9d0044d8:afb00010 sws0,16(sp)
9d0044dc:00808021 moves0,a0
    _width  = SSD1289::Width;
9d0044e0:240200f0 liv0,240
9d0044e4:ac820018 swv0,24(a0)
    _height = SSD1289::Height;
9d0044e8:24020140 liv0,320
9d0044ec:ac82001c swv0,28(a0)

9d0044f0 <.LVL74>:

    delay(15);
9d0044f0:0f402e47 jal9d00b91c <.LFE87>
9d0044f4:2404000f lia0,15

9d0044f8 <.LVL75>:
    command(0x0000); data(0x0001);
9d0044f8:8e020000 lwv0,0(s0)
9d0044fc:8c4200e0 lwv0,224(v0)
9d004500:02002021 movea0,s0
9d004504:0040f809 jalrv0
9d004508:00002821 movea1,zero

9d00450c <.LVL76>:
9d00450c:8e020000 lwv0,0(s0)
9d004510:8c4200e4 lwv0,228(v0)
9d004514:02002021 movea0,s0
9d004518:0040f809 jalrv0
9d00451c:24050001 lia1,1

9d004520 <.LVL77>:
    command(0x0003); data(0xA8A4);
9d004520:8e020000 lwv0,0(s0)
9d004524:8c4200e0 lwv0,224(v0)
9d004528:02002021 movea0,s0
9d00452c:0040f809 jalrv0
9d004530:24050003 lia1,3

9d004534 <.LVL78>:
9d004534:8e020000 lwv0,0(s0)
9d004538:8c4200e4 lwv0,228(v0)
9d00453c:02002021 movea0,s0
9d004540:0040f809 jalrv0
9d004544:3405a8a4 lia1,0xa8a4

9d004548 <.LVL79>:
    command(0x000C); data(0x0000);
9d004548:8e020000 lwv0,0(s0)
9d00454c:8c4200e0 lwv0,224(v0)
9d004550:02002021 movea0,s0
9d004554:0040f809 jalrv0
9d004558:2405000c lia1,12

9d00455c <.LVL80>:
9d00455c:8e020000 lwv0,0(s0)
9d004560:8c4200e4 lwv0,228(v0)
9d004564:02002021 movea0,s0
9d004568:0040f809 jalrv0
9d00456c:00002821 movea1,zero

9d004570 <.LVL81>:
    command(0x000D); data(0x800C);
9d004570:8e020000 lwv0,0(s0)
9d004574:8c4200e0 lwv0,224(v0)
9d004578:02002021 movea0,s0
9d00457c:0040f809 jalrv0
9d004580:2405000d lia1,13

9d004584 <.LVL82>:
9d004584:8e020000 lwv0,0(s0)
9d004588:8c4200e4 lwv0,228(v0)
9d00458c:02002021 movea0,s0
9d004590:0040f809 jalrv0
9d004594:3405800c lia1,0x800c

9d004598 <.LVL83>:
    command(0x000E); data(0x2B00);
9d004598:8e020000 lwv0,0(s0)
9d00459c:8c4200e0 lwv0,224(v0)
9d0045a0:02002021 movea0,s0
9d0045a4:0040f809 jalrv0
9d0045a8:2405000e lia1,14

9d0045ac <.LVL84>:
9d0045ac:8e020000 lwv0,0(s0)
9d0045b0:8c4200e4 lwv0,228(v0)
9d0045b4:02002021 movea0,s0
9d0045b8:0040f809 jalrv0
9d0045bc:24052b00 lia1,11008

9d0045c0 <.LVL85>:
    command(0x001E); data(0x00B7);
9d0045c0:8e020000 lwv0,0(s0)
9d0045c4:8c4200e0 lwv0,224(v0)
9d0045c8:02002021 movea0,s0
9d0045cc:0040f809 jalrv0
9d0045d0:2405001e lia1,30

9d0045d4 <.LVL86>:
9d0045d4:8e020000 lwv0,0(s0)
9d0045d8:8c4200e4 lwv0,228(v0)
9d0045dc:02002021 movea0,s0
9d0045e0:0040f809 jalrv0
9d0045e4:240500b7 lia1,183

9d0045e8 <.LVL87>:
    command(0x0001); data(0x2B3F);
9d0045e8:8e020000 lwv0,0(s0)
9d0045ec:8c4200e0 lwv0,224(v0)
9d0045f0:02002021 movea0,s0
9d0045f4:0040f809 jalrv0
9d0045f8:24050001 lia1,1

9d0045fc <.LVL88>:
9d0045fc:8e020000 lwv0,0(s0)
9d004600:8c4200e4 lwv0,228(v0)
9d004604:02002021 movea0,s0
9d004608:0040f809 jalrv0
9d00460c:24052b3f lia1,11071

9d004610 <.LVL89>:
    command(0x0002); data(0x0600);
9d004610:8e020000 lwv0,0(s0)
9d004614:8c4200e0 lwv0,224(v0)
9d004618:02002021 movea0,s0
9d00461c:0040f809 jalrv0
9d004620:24050002 lia1,2

9d004624 <.LVL90>:
9d004624:8e020000 lwv0,0(s0)
9d004628:8c4200e4 lwv0,228(v0)
9d00462c:02002021 movea0,s0
9d004630:0040f809 jalrv0
9d004634:24050600 lia1,1536

9d004638 <.LVL91>:
    command(0x0010); data(0x0000);
9d004638:8e020000 lwv0,0(s0)
9d00463c:8c4200e0 lwv0,224(v0)
9d004640:02002021 movea0,s0
9d004644:0040f809 jalrv0
9d004648:24050010 lia1,16

9d00464c <.LVL92>:
9d00464c:8e020000 lwv0,0(s0)
9d004650:8c4200e4 lwv0,228(v0)
9d004654:02002021 movea0,s0
9d004658:0040f809 jalrv0
9d00465c:00002821 movea1,zero

9d004660 <.LVL93>:
    command(0x0011); data(0x6070);
9d004660:8e020000 lwv0,0(s0)
9d004664:8c4200e0 lwv0,224(v0)
9d004668:02002021 movea0,s0
9d00466c:0040f809 jalrv0
9d004670:24050011 lia1,17

9d004674 <.LVL94>:
9d004674:8e020000 lwv0,0(s0)
9d004678:8c4200e4 lwv0,228(v0)
9d00467c:02002021 movea0,s0
9d004680:0040f809 jalrv0
9d004684:24056070 lia1,24688

9d004688 <.LVL95>:
    command(0x0005); data(0x0000);
9d004688:8e020000 lwv0,0(s0)
9d00468c:8c4200e0 lwv0,224(v0)
9d004690:02002021 movea0,s0
9d004694:0040f809 jalrv0
9d004698:24050005 lia1,5

9d00469c <.LVL96>:
9d00469c:8e020000 lwv0,0(s0)
9d0046a0:8c4200e4 lwv0,228(v0)
9d0046a4:02002021 movea0,s0
9d0046a8:0040f809 jalrv0
9d0046ac:00002821 movea1,zero

9d0046b0 <.LVL97>:
    command(0x0006); data(0x0000);
9d0046b0:8e020000 lwv0,0(s0)
9d0046b4:8c4200e0 lwv0,224(v0)
9d0046b8:02002021 movea0,s0
9d0046bc:0040f809 jalrv0
9d0046c0:24050006 lia1,6

9d0046c4 <.LVL98>:
9d0046c4:8e020000 lwv0,0(s0)
9d0046c8:8c4200e4 lwv0,228(v0)
9d0046cc:02002021 movea0,s0
9d0046d0:0040f809 jalrv0
9d0046d4:00002821 movea1,zero

9d0046d8 <.LVL99>:
    command(0x0016); data(0xEF1C);
9d0046d8:8e020000 lwv0,0(s0)
9d0046dc:8c4200e0 lwv0,224(v0)
9d0046e0:02002021 movea0,s0
9d0046e4:0040f809 jalrv0
9d0046e8:24050016 lia1,22

9d0046ec <.LVL100>:
9d0046ec:8e020000 lwv0,0(s0)
9d0046f0:8c4200e4 lwv0,228(v0)
9d0046f4:02002021 movea0,s0
9d0046f8:0040f809 jalrv0
9d0046fc:3405ef1c lia1,0xef1c

9d004700 <.LVL101>:
    command(0x0017); data(0x0003);
9d004700:8e020000 lwv0,0(s0)
9d004704:8c4200e0 lwv0,224(v0)
9d004708:02002021 movea0,s0
9d00470c:0040f809 jalrv0
9d004710:24050017 lia1,23

9d004714 <.LVL102>:
9d004714:8e020000 lwv0,0(s0)
9d004718:8c4200e4 lwv0,228(v0)
9d00471c:02002021 movea0,s0
9d004720:0040f809 jalrv0
9d004724:24050003 lia1,3

9d004728 <.LVL103>:
    command(0x0007); data(0x0233);
9d004728:8e020000 lwv0,0(s0)
9d00472c:8c4200e0 lwv0,224(v0)
9d004730:02002021 movea0,s0
9d004734:0040f809 jalrv0
9d004738:24050007 lia1,7

9d00473c <.LVL104>:
9d00473c:8e020000 lwv0,0(s0)
9d004740:8c4200e4 lwv0,228(v0)
9d004744:02002021 movea0,s0
9d004748:0040f809 jalrv0
9d00474c:24050233 lia1,563

9d004750 <.LVL105>:
    command(0x000B); data(0x0000);
9d004750:8e020000 lwv0,0(s0)
9d004754:8c4200e0 lwv0,224(v0)
9d004758:02002021 movea0,s0
9d00475c:0040f809 jalrv0
9d004760:2405000b lia1,11

9d004764 <.LVL106>:
9d004764:8e020000 lwv0,0(s0)
9d004768:8c4200e4 lwv0,228(v0)
9d00476c:02002021 movea0,s0
9d004770:0040f809 jalrv0
9d004774:00002821 movea1,zero

9d004778 <.LVL107>:
    command(0x000F); data(0x0000);
9d004778:8e020000 lwv0,0(s0)
9d00477c:8c4200e0 lwv0,224(v0)
9d004780:02002021 movea0,s0
9d004784:0040f809 jalrv0
9d004788:2405000f lia1,15

9d00478c <.LVL108>:
9d00478c:8e020000 lwv0,0(s0)
9d004790:8c4200e4 lwv0,228(v0)
9d004794:02002021 movea0,s0
9d004798:0040f809 jalrv0
9d00479c:00002821 movea1,zero

9d0047a0 <.LVL109>:
    command(0x0041); data(0x0000);
9d0047a0:8e020000 lwv0,0(s0)
9d0047a4:8c4200e0 lwv0,224(v0)
9d0047a8:02002021 movea0,s0
9d0047ac:0040f809 jalrv0
9d0047b0:24050041 lia1,65

9d0047b4 <.LVL110>:
9d0047b4:8e020000 lwv0,0(s0)
9d0047b8:8c4200e4 lwv0,228(v0)
9d0047bc:02002021 movea0,s0
9d0047c0:0040f809 jalrv0
9d0047c4:00002821 movea1,zero

9d0047c8 <.LVL111>:
    command(0x0042); data(0x0000);
9d0047c8:8e020000 lwv0,0(s0)
9d0047cc:8c4200e0 lwv0,224(v0)
9d0047d0:02002021 movea0,s0
9d0047d4:0040f809 jalrv0
9d0047d8:24050042 lia1,66

9d0047dc <.LVL112>:
9d0047dc:8e020000 lwv0,0(s0)
9d0047e0:8c4200e4 lwv0,228(v0)
9d0047e4:02002021 movea0,s0
9d0047e8:0040f809 jalrv0
9d0047ec:00002821 movea1,zero

9d0047f0 <.LVL113>:
    command(0x0048); data(0x0000);
9d0047f0:8e020000 lwv0,0(s0)
9d0047f4:8c4200e0 lwv0,224(v0)
9d0047f8:02002021 movea0,s0
9d0047fc:0040f809 jalrv0
9d004800:24050048 lia1,72

9d004804 <.LVL114>:
9d004804:8e020000 lwv0,0(s0)
9d004808:8c4200e4 lwv0,228(v0)
9d00480c:02002021 movea0,s0
9d004810:0040f809 jalrv0
9d004814:00002821 movea1,zero

9d004818 <.LVL115>:
    command(0x0049); data(0x013F);
9d004818:8e020000 lwv0,0(s0)
9d00481c:8c4200e0 lwv0,224(v0)
9d004820:02002021 movea0,s0
9d004824:0040f809 jalrv0
9d004828:24050049 lia1,73

9d00482c <.LVL116>:
9d00482c:8e020000 lwv0,0(s0)
9d004830:8c4200e4 lwv0,228(v0)
9d004834:02002021 movea0,s0
9d004838:0040f809 jalrv0
9d00483c:2405013f lia1,319

9d004840 <.LVL117>:
    command(0x004A); data(0x0000);
9d004840:8e020000 lwv0,0(s0)
9d004844:8c4200e0 lwv0,224(v0)
9d004848:02002021 movea0,s0
9d00484c:0040f809 jalrv0
9d004850:2405004a lia1,74

9d004854 <.LVL118>:
9d004854:8e020000 lwv0,0(s0)
9d004858:8c4200e4 lwv0,228(v0)
9d00485c:02002021 movea0,s0
9d004860:0040f809 jalrv0
9d004864:00002821 movea1,zero

9d004868 <.LVL119>:
    command(0x004B); data(0x0000);
9d004868:8e020000 lwv0,0(s0)
9d00486c:8c4200e0 lwv0,224(v0)
9d004870:02002021 movea0,s0
9d004874:0040f809 jalrv0
9d004878:2405004b lia1,75

9d00487c <.LVL120>:
9d00487c:8e020000 lwv0,0(s0)
9d004880:8c4200e4 lwv0,228(v0)
9d004884:02002021 movea0,s0
9d004888:0040f809 jalrv0
9d00488c:00002821 movea1,zero

9d004890 <.LVL121>:
    command(0x0044); data(0xEF95);
9d004890:8e020000 lwv0,0(s0)
9d004894:8c4200e0 lwv0,224(v0)
9d004898:02002021 movea0,s0
9d00489c:0040f809 jalrv0
9d0048a0:24050044 lia1,68

9d0048a4 <.LVL122>:
9d0048a4:8e020000 lwv0,0(s0)
9d0048a8:8c4200e4 lwv0,228(v0)
9d0048ac:02002021 movea0,s0
9d0048b0:0040f809 jalrv0
9d0048b4:3405ef95 lia1,0xef95

9d0048b8 <.LVL123>:
    command(0x0045); data(0x0000);
9d0048b8:8e020000 lwv0,0(s0)
9d0048bc:8c4200e0 lwv0,224(v0)
9d0048c0:02002021 movea0,s0
9d0048c4:0040f809 jalrv0
9d0048c8:24050045 lia1,69

9d0048cc <.LVL124>:
9d0048cc:8e020000 lwv0,0(s0)
9d0048d0:8c4200e4 lwv0,228(v0)
9d0048d4:02002021 movea0,s0
9d0048d8:0040f809 jalrv0
9d0048dc:00002821 movea1,zero

9d0048e0 <.LVL125>:
    command(0x0046); data(0x013F);
9d0048e0:8e020000 lwv0,0(s0)
9d0048e4:8c4200e0 lwv0,224(v0)
9d0048e8:02002021 movea0,s0
9d0048ec:0040f809 jalrv0
9d0048f0:24050046 lia1,70

9d0048f4 <.LVL126>:
9d0048f4:8e020000 lwv0,0(s0)
9d0048f8:8c4200e4 lwv0,228(v0)
9d0048fc:02002021 movea0,s0
9d004900:0040f809 jalrv0
9d004904:2405013f lia1,319

9d004908 <.LVL127>:
    command(0x0030); data(0x0707);
9d004908:8e020000 lwv0,0(s0)
9d00490c:8c4200e0 lwv0,224(v0)
9d004910:02002021 movea0,s0
9d004914:0040f809 jalrv0
9d004918:24050030 lia1,48

9d00491c <.LVL128>:
9d00491c:8e020000 lwv0,0(s0)
9d004920:8c4200e4 lwv0,228(v0)
9d004924:02002021 movea0,s0
9d004928:0040f809 jalrv0
9d00492c:24050707 lia1,1799

9d004930 <.LVL129>:
    command(0x0031); data(0x0204);
9d004930:8e020000 lwv0,0(s0)
9d004934:8c4200e0 lwv0,224(v0)
9d004938:02002021 movea0,s0
9d00493c:0040f809 jalrv0
9d004940:24050031 lia1,49

9d004944 <.LVL130>:
9d004944:8e020000 lwv0,0(s0)
9d004948:8c4200e4 lwv0,228(v0)
9d00494c:02002021 movea0,s0
9d004950:0040f809 jalrv0
9d004954:24050204 lia1,516

9d004958 <.LVL131>:
    command(0x0032); data(0x0204);
9d004958:8e020000 lwv0,0(s0)
9d00495c:8c4200e0 lwv0,224(v0)
9d004960:02002021 movea0,s0
9d004964:0040f809 jalrv0
9d004968:24050032 lia1,50

9d00496c <.LVL132>:
9d00496c:8e020000 lwv0,0(s0)
9d004970:8c4200e4 lwv0,228(v0)
9d004974:02002021 movea0,s0
9d004978:0040f809 jalrv0
9d00497c:24050204 lia1,516

9d004980 <.LVL133>:
    command(0x0033); data(0x0502);
9d004980:8e020000 lwv0,0(s0)
9d004984:8c4200e0 lwv0,224(v0)
9d004988:02002021 movea0,s0
9d00498c:0040f809 jalrv0
9d004990:24050033 lia1,51

9d004994 <.LVL134>:
9d004994:8e020000 lwv0,0(s0)
9d004998:8c4200e4 lwv0,228(v0)
9d00499c:02002021 movea0,s0
9d0049a0:0040f809 jalrv0
9d0049a4:24050502 lia1,1282

9d0049a8 <.LVL135>:
    command(0x0034); data(0x0507);
9d0049a8:8e020000 lwv0,0(s0)
9d0049ac:8c4200e0 lwv0,224(v0)
9d0049b0:02002021 movea0,s0
9d0049b4:0040f809 jalrv0
9d0049b8:24050034 lia1,52

9d0049bc <.LVL136>:
9d0049bc:8e020000 lwv0,0(s0)
9d0049c0:8c4200e4 lwv0,228(v0)
9d0049c4:02002021 movea0,s0
9d0049c8:0040f809 jalrv0
9d0049cc:24050507 lia1,1287

9d0049d0 <.LVL137>:
    command(0x0035); data(0x0204);
9d0049d0:8e020000 lwv0,0(s0)
9d0049d4:8c4200e0 lwv0,224(v0)
9d0049d8:02002021 movea0,s0
9d0049dc:0040f809 jalrv0
9d0049e0:24050035 lia1,53

9d0049e4 <.LVL138>:
9d0049e4:8e020000 lwv0,0(s0)
9d0049e8:8c4200e4 lwv0,228(v0)
9d0049ec:02002021 movea0,s0
9d0049f0:0040f809 jalrv0
9d0049f4:24050204 lia1,516

9d0049f8 <.LVL139>:
    command(0x0036); data(0x0204);
9d0049f8:8e020000 lwv0,0(s0)
9d0049fc:8c4200e0 lwv0,224(v0)
9d004a00:02002021 movea0,s0
9d004a04:0040f809 jalrv0
9d004a08:24050036 lia1,54

9d004a0c <.LVL140>:
9d004a0c:8e020000 lwv0,0(s0)
9d004a10:8c4200e4 lwv0,228(v0)
9d004a14:02002021 movea0,s0
9d004a18:0040f809 jalrv0
9d004a1c:24050204 lia1,516

9d004a20 <.LVL141>:
    command(0x0037); data(0x0502);
9d004a20:8e020000 lwv0,0(s0)
9d004a24:8c4200e0 lwv0,224(v0)
9d004a28:02002021 movea0,s0
9d004a2c:0040f809 jalrv0
9d004a30:24050037 lia1,55

9d004a34 <.LVL142>:
9d004a34:8e020000 lwv0,0(s0)
9d004a38:8c4200e4 lwv0,228(v0)
9d004a3c:02002021 movea0,s0
9d004a40:0040f809 jalrv0
9d004a44:24050502 lia1,1282

9d004a48 <.LVL143>:
    command(0x003A); data(0x0302);
9d004a48:8e020000 lwv0,0(s0)
9d004a4c:8c4200e0 lwv0,224(v0)
9d004a50:02002021 movea0,s0
9d004a54:0040f809 jalrv0
9d004a58:2405003a lia1,58

9d004a5c <.LVL144>:
9d004a5c:8e020000 lwv0,0(s0)
9d004a60:8c4200e4 lwv0,228(v0)
9d004a64:02002021 movea0,s0
9d004a68:0040f809 jalrv0
9d004a6c:24050302 lia1,770

9d004a70 <.LVL145>:
    command(0x003B); data(0x0302);
9d004a70:8e020000 lwv0,0(s0)
9d004a74:8c4200e0 lwv0,224(v0)
9d004a78:02002021 movea0,s0
9d004a7c:0040f809 jalrv0
9d004a80:2405003b lia1,59

9d004a84 <.LVL146>:
9d004a84:8e020000 lwv0,0(s0)
9d004a88:8c4200e4 lwv0,228(v0)
9d004a8c:02002021 movea0,s0
9d004a90:0040f809 jalrv0
9d004a94:24050302 lia1,770

9d004a98 <.LVL147>:
    command(0x0023); data(0x0000);
9d004a98:8e020000 lwv0,0(s0)
9d004a9c:8c4200e0 lwv0,224(v0)
9d004aa0:02002021 movea0,s0
9d004aa4:0040f809 jalrv0
9d004aa8:24050023 lia1,35

9d004aac <.LVL148>:
9d004aac:8e020000 lwv0,0(s0)
9d004ab0:8c4200e4 lwv0,228(v0)
9d004ab4:02002021 movea0,s0
9d004ab8:0040f809 jalrv0
9d004abc:00002821 movea1,zero

9d004ac0 <.LVL149>:
    command(0x0024); data(0x0000);
9d004ac0:8e020000 lwv0,0(s0)
9d004ac4:8c4200e0 lwv0,224(v0)
9d004ac8:02002021 movea0,s0
9d004acc:0040f809 jalrv0
9d004ad0:24050024 lia1,36

9d004ad4 <.LVL150>:
9d004ad4:8e020000 lwv0,0(s0)
9d004ad8:8c4200e4 lwv0,228(v0)
9d004adc:02002021 movea0,s0
9d004ae0:0040f809 jalrv0
9d004ae4:00002821 movea1,zero

9d004ae8 <.LVL151>:
    command(0x0025); data(0x8000);
9d004ae8:8e020000 lwv0,0(s0)
9d004aec:8c4200e0 lwv0,224(v0)
9d004af0:02002021 movea0,s0
9d004af4:0040f809 jalrv0
9d004af8:24050025 lia1,37

9d004afc <.LVL152>:
9d004afc:8e020000 lwv0,0(s0)
9d004b00:8c4200e4 lwv0,228(v0)
9d004b04:02002021 movea0,s0
9d004b08:0040f809 jalrv0
9d004b0c:34058000 lia1,0x8000

9d004b10 <.LVL153>:
    command(0x004f); data(0x0000);
9d004b10:8e020000 lwv0,0(s0)
9d004b14:8c4200e0 lwv0,224(v0)
9d004b18:02002021 movea0,s0
9d004b1c:0040f809 jalrv0
9d004b20:2405004f lia1,79

9d004b24 <.LVL154>:
9d004b24:8e020000 lwv0,0(s0)
9d004b28:8c4200e4 lwv0,228(v0)
9d004b2c:02002021 movea0,s0
9d004b30:0040f809 jalrv0
9d004b34:00002821 movea1,zero

9d004b38 <.LVL155>:
    command(0x004e); data(0x0000);
9d004b38:8e020000 lwv0,0(s0)
9d004b3c:8c4200e0 lwv0,224(v0)
9d004b40:02002021 movea0,s0
9d004b44:0040f809 jalrv0
9d004b48:2405004e lia1,78

9d004b4c <.LVL156>:
9d004b4c:8e020000 lwv0,0(s0)
9d004b50:8c4200e4 lwv0,228(v0)
9d004b54:02002021 movea0,s0
9d004b58:0040f809 jalrv0
9d004b5c:00002821 movea1,zero

9d004b60 <.LVL157>:
    command(0x0022);
9d004b60:8e020000 lwv0,0(s0)
9d004b64:8c5900e0 lwt9,224(v0)
9d004b68:02002021 movea0,s0
9d004b6c:24050022 lia1,34
}
9d004b70:8fbf0014 lwra,20(sp)
9d004b74:8fb00010 lws0,16(sp)

9d004b78 <.LVL158>:
    command(0x0023); data(0x0000);
    command(0x0024); data(0x0000);
    command(0x0025); data(0x8000);
    command(0x004f); data(0x0000);
    command(0x004e); data(0x0000);
    command(0x0022);
9d004b78:03200008 jrt9
9d004b7c:27bd0018 addiusp,sp,24

Disassembly of section .text.initADC:

9d004b80 <L0>:
{
    uint32_t    cTADWarmUp = 0;
    uint32_t    i = 0;

    // initialize configuration registers
    ADCCON1     = 0; 
9d004b80:3c02bf85 luiv0,0xbf85
9d004b84:ac40b000 swzero,-20480(v0)
    ADCCON2     = 0; 
9d004b88:3c02bf85 luiv0,0xbf85
9d004b8c:ac40b004 swzero,-20476(v0)
    ADCCON3     = 0; 
9d004b90:3c02bf85 luiv0,0xbf85
9d004b94:ac40b008 swzero,-20472(v0)
    ADCANCON    = 0;
9d004b98:3c02bf85 luiv0,0xbf85
9d004b9c:ac40b100 swzero,-20224(v0)

    // resolution 0 - 6bits, 1 - 8bits, 2 - 10bits, 3 - 12bits
    ADCCON1bits.SELRES  =   3;  // shared ADC, 12 bits resolution (bits+2 TADs, 12bit resolution = 14 TAD).
9d004ba0:3c05bf85 luia1,0xbf85
9d004ba4:8ca2b000 lwv0,-20480(a1)
9d004ba8:24030003 liv1,3
9d004bac:7c62b544 insv0,v1,0x15,0x2
9d004bb0:aca2b000 swv0,-20480(a1)

    // 0 - no trigger, 1 - clearing software trigger, 2 - not clearing software trigger, the rest see datasheet
    ADCCON1bits.STRGSRC     = 1;    //Global software trigger / self clearing.
9d004bb4:8ca2b000 lwv0,-20480(a1)
9d004bb8:24040001 lia0,1
9d004bbc:7c82a404 insv0,a0,0x10,0x5
9d004bc0:aca2b000 swv0,-20480(a1)

    // 0 - internal 3.3, 1 - use external VRef+, 2 - use external VRef-
    ADCCON3bits.VREFSEL     = 0;    // use internal 3.3 reference
9d004bc4:3c03bf85 luiv1,0xbf85
9d004bc8:8c62b008 lwv0,-20472(v1)
9d004bcc:7c027b44 insv0,zero,0xd,0x3
9d004bd0:ac62b008 swv0,-20472(v1)
    // ADCCON1bits.AICPMPEN    = 1;    // turn on the analog charge pump

    // set up the TQ and TAD and S&H times

    // TCLK: 00- pbClk3, 01 - SysClk, 10 - External Clk3, 11 - interal 8 MHz clk
    ADCCON3bits.ADCSEL      = 0b01;             // TCLK clk == Sys Clock == F_CPU  
9d004bd4:8c62b008 lwv0,-20472(v1)
9d004bd8:7c82ff84 insv0,a0,0x1e,0x2
9d004bdc:ac62b008 swv0,-20472(v1)

    // Global ADC TQ Clock: Global ADC prescaler 0 - 63; Divide by (CONCLKDIV*2) However, the value 0 means divide by 1
    ADCCON3bits.CONCLKDIV   = 0;                // Divide by 1 == TCLK == SYSCLK == F_CPU
9d004be0:8c62b008 lwv0,-20472(v1)
9d004be4:7c02ee04 insv0,zero,0x18,0x6
9d004be8:ac62b008 swv0,-20472(v1)

    // must be divisible by 2 (25 - 50MHz should be good; we are not in a hurry, so 25MHz).
    ADCCON2bits.ADCDIV      = ((F_CPU / ADCTADFREQ) + 1) / 2;   // run TAD at 25MHz
9d004bec:3c04bf85 luia0,0xbf85
9d004bf0:8c82b004 lwv0,-20476(a0)
9d004bf4:24060004 lia2,4
9d004bf8:7cc23004 insv0,a2,0x0,0x7
9d004bfc:ac82b004 swv0,-20476(a0)

    ADCCON2bits.SAMC        = ADCTADSH;   // for the shared S&H this will allow source impedances < 10Kohm
9d004c00:8c82b004 lwv0,-20476(a0)
9d004c04:24060044 lia2,68
9d004c08:7cc2cc04 insv0,a2,0x10,0xa
9d004c0c:ac82b004 swv0,-20476(a0)

    // with 25MHz TAD and 68 TAD S&H and 14 TAD for 12 bit resolution, that is 25000000 / (68+14) = 304,878 Sps or 3.28 us/sample

    // initialize the warm up timer
    // 20us or 500 TAD which ever is higher 1/20us == 50KHz
    cTADWarmUp = ((F_CPU / (ADCCON3bits.CONCLKDIV == 0 ? 1 : (ADCCON3bits.CONCLKDIV * 2))) / (F_CPU / ADCTADFREQ) / 50000ul);
9d004c10:8c66b008 lwa2,-20472(v1)
9d004c14:3c023f00 luiv0,0x3f00
9d004c18:00c21024 andv0,a2,v0
9d004c1c:54400001 bnezlv0,9d004c24 <.LVL1>
9d004c20:8c62b008 lwv0,-20472(v1)

9d004c24 <.LVL1>:
**Description:
**      Initialize the MZ EF ADCs for the WiFIRE
**
*/
void initADC(void)
{
9d004c24:00003021 movea2,zero
    }

    // get the next higher power of the count
    for(i=0; i<16; i++)
    {
        if((cTADWarmUp >> i) == 0)
9d004c28:240701f4 lia3,500
    {
        cTADWarmUp = 500;
    }

    // get the next higher power of the count
    for(i=0; i<16; i++)
9d004c2c:24020010 liv0,16

9d004c30 <.LVL2>:
    {
        if((cTADWarmUp >> i) == 0)
9d004c30:00c74006 srlvt0,a3,a2
9d004c34:51000005 beqzlt0,9d004c4c <.LVL2+0x1c>
9d004c38:3c02bf85 luiv0,0xbf85
    {
        cTADWarmUp = 500;
    }

    // get the next higher power of the count
    for(i=0; i<16; i++)
9d004c3c:24c60001 addiua2,a2,1
9d004c40:14c2fffc bnea2,v0,9d004c34 <.LVL2+0x4>
9d004c44:00c74006 srlvt0,a3,a2
            break;
        }
    }

    // the warm up count is 2^^X where X = 0 -15
    ADCANCONbits.WKUPCLKCNT = i; // Wakeup exponent = 2^^15 * TADx   
9d004c48:3c02bf85 luiv0,0xbf85
9d004c4c:8c47b100 lwa3,-20224(v0)
9d004c50:7cc7de04 insa3,a2,0x18,0x4
9d004c54:ac47b100 swa3,-20224(v0)
  
    // ADC 0
    ADC0TIMEbits.ADCDIV     = ADCCON2bits.ADCDIV;       // ADC0 clock frequency is half of control clock = TAD0 200 / 2 (pb) / 2 (clkdiv) / 2 (adcdiv) == TAD == 25 MHz
9d004c58:8c88b004 lwt0,-20476(a0)
9d004c5c:3c06bf85 luia2,0xbf85

9d004c60 <.LVL4>:
9d004c60:8cc7b0d4 lwa3,-20268(a2)
9d004c64:7d07b404 insa3,t0,0x10,0x7
9d004c68:acc7b0d4 swa3,-20268(a2)
    ADC0TIMEbits.SAMC       = ADCCON2bits.SAMC;    // ADC0 sampling time = (SAMC+2) * TAD0
9d004c6c:8c88b004 lwt0,-20476(a0)
9d004c70:7d084c00 extt0,t0,0x10,0xa
9d004c74:8cc7b0d4 lwa3,-20268(a2)
9d004c78:7d074804 insa3,t0,0x0,0xa
9d004c7c:acc7b0d4 swa3,-20268(a2)
    ADC0TIMEbits.SELRES     = ADCCON1bits.SELRES;             // ADC0 resolution is 12 bits 
9d004c80:8ca8b000 lwt0,-20480(a1)
9d004c84:7d080d40 extt0,t0,0x15,0x2
9d004c88:8cc7b0d4 lwa3,-20268(a2)
9d004c8c:7d07ce04 insa3,t0,0x18,0x2
9d004c90:acc7b0d4 swa3,-20268(a2)

    // ADC 1
    ADC1TIMEbits.ADCDIV     = ADCCON2bits.ADCDIV;       // ADC0 clock frequency is half of control clock = TAD0 200 / 2 (pb) / 2 (clkdiv) / 2 (adcdiv) == TAD == 25 MHz
9d004c94:8c88b004 lwt0,-20476(a0)
9d004c98:3c06bf85 luia2,0xbf85
9d004c9c:8cc7b0d8 lwa3,-20264(a2)
9d004ca0:7d07b404 insa3,t0,0x10,0x7
9d004ca4:acc7b0d8 swa3,-20264(a2)
    ADC1TIMEbits.SAMC       = ADCCON2bits.SAMC;    // ADC0 sampling time = (SAMC+2) * TAD0
9d004ca8:8c88b004 lwt0,-20476(a0)
9d004cac:7d084c00 extt0,t0,0x10,0xa
9d004cb0:8cc7b0d8 lwa3,-20264(a2)
9d004cb4:7d074804 insa3,t0,0x0,0xa
9d004cb8:acc7b0d8 swa3,-20264(a2)
    ADC1TIMEbits.SELRES     = ADCCON1bits.SELRES;             // ADC0 resolution is 12 bits 
9d004cbc:8ca8b000 lwt0,-20480(a1)
9d004cc0:7d080d40 extt0,t0,0x15,0x2
9d004cc4:8cc7b0d8 lwa3,-20264(a2)
9d004cc8:7d07ce04 insa3,t0,0x18,0x2
9d004ccc:acc7b0d8 swa3,-20264(a2)

    // ADC 2
    ADC2TIMEbits.ADCDIV     = ADCCON2bits.ADCDIV;       // ADC0 clock frequency is half of control clock = TAD0 200 / 2 (pb) / 2 (clkdiv) / 2 (adcdiv) == TAD == 25 MHz
9d004cd0:8c88b004 lwt0,-20476(a0)
9d004cd4:3c06bf85 luia2,0xbf85
9d004cd8:8cc7b0dc lwa3,-20260(a2)
9d004cdc:7d07b404 insa3,t0,0x10,0x7
9d004ce0:acc7b0dc swa3,-20260(a2)
    ADC2TIMEbits.SAMC       = ADCCON2bits.SAMC;    // ADC0 sampling time = (SAMC+2) * TAD0
9d004ce4:8c88b004 lwt0,-20476(a0)
9d004ce8:7d084c00 extt0,t0,0x10,0xa
9d004cec:8cc7b0dc lwa3,-20260(a2)
9d004cf0:7d074804 insa3,t0,0x0,0xa
9d004cf4:acc7b0dc swa3,-20260(a2)
    ADC2TIMEbits.SELRES     = ADCCON1bits.SELRES;             // ADC0 resolution is 12 bits 
9d004cf8:8ca8b000 lwt0,-20480(a1)
9d004cfc:7d080d40 extt0,t0,0x15,0x2
9d004d00:8cc7b0dc lwa3,-20260(a2)
9d004d04:7d07ce04 insa3,t0,0x18,0x2
9d004d08:acc7b0dc swa3,-20260(a2)

    // ADC 3
    ADC3TIMEbits.ADCDIV     = ADCCON2bits.ADCDIV;       // ADC0 clock frequency is half of control clock = TAD0 200 / 2 (pb) / 2 (clkdiv) / 2 (adcdiv) == TAD == 25 MHz
9d004d0c:8c88b004 lwt0,-20476(a0)
9d004d10:3c06bf85 luia2,0xbf85
9d004d14:8cc7b0e0 lwa3,-20256(a2)
9d004d18:7d07b404 insa3,t0,0x10,0x7
9d004d1c:acc7b0e0 swa3,-20256(a2)
    ADC3TIMEbits.SAMC       = ADCCON2bits.SAMC;    // ADC0 sampling time = (SAMC+2) * TAD0
9d004d20:8c88b004 lwt0,-20476(a0)
9d004d24:7d084c00 extt0,t0,0x10,0xa
9d004d28:8cc7b0e0 lwa3,-20256(a2)
9d004d2c:7d074804 insa3,t0,0x0,0xa
9d004d30:acc7b0e0 swa3,-20256(a2)
    ADC3TIMEbits.SELRES     = ADCCON1bits.SELRES;             // ADC0 resolution is 12 bits 
9d004d34:8ca8b000 lwt0,-20480(a1)
9d004d38:7d080d40 extt0,t0,0x15,0x2
9d004d3c:8cc7b0e0 lwa3,-20256(a2)
9d004d40:7d07ce04 insa3,t0,0x18,0x2
9d004d44:acc7b0e0 swa3,-20256(a2)

    // ADC 4
    ADC4TIMEbits.ADCDIV     = ADCCON2bits.ADCDIV;       // ADC0 clock frequency is half of control clock = TAD0 200 / 2 (pb) / 2 (clkdiv) / 2 (adcdiv) == TAD == 25 MHz
9d004d48:8c88b004 lwt0,-20476(a0)
9d004d4c:3c06bf85 luia2,0xbf85
9d004d50:8cc7b0e4 lwa3,-20252(a2)
9d004d54:7d07b404 insa3,t0,0x10,0x7
9d004d58:acc7b0e4 swa3,-20252(a2)
    ADC4TIMEbits.SAMC       = ADCCON2bits.SAMC;    // ADC0 sampling time = (SAMC+2) * TAD0
9d004d5c:8c88b004 lwt0,-20476(a0)
9d004d60:7d084c00 extt0,t0,0x10,0xa
9d004d64:8cc7b0e4 lwa3,-20252(a2)
9d004d68:7d074804 insa3,t0,0x0,0xa
9d004d6c:acc7b0e4 swa3,-20252(a2)
    ADC4TIMEbits.SELRES     = ADCCON1bits.SELRES;             // ADC0 resolution is 12 bits 
9d004d70:8ca8b000 lwt0,-20480(a1)
9d004d74:7d080d40 extt0,t0,0x15,0x2
9d004d78:8cc7b0e4 lwa3,-20252(a2)
9d004d7c:7d07ce04 insa3,t0,0x18,0x2
9d004d80:acc7b0e4 swa3,-20252(a2)

    /* Configure ADCIRQENx */
    ADCCMPEN1 = 0; // No interrupts are used
9d004d84:3c06bf85 luia2,0xbf85
9d004d88:acc0b038 swzero,-20424(a2)
    ADCCMPEN2 = 0;
9d004d8c:3c06bf85 luia2,0xbf85
9d004d90:acc0b040 swzero,-20416(a2)
    
    /* Configure ADCCSSx */
    ADCCSS1 = 0; // No scanning is used
9d004d94:3c06bf85 luia2,0xbf85
9d004d98:acc0b028 swzero,-20440(a2)
    ADCCSS2 = 0;
9d004d9c:3c06bf85 luia2,0xbf85
9d004da0:acc0b02c swzero,-20436(a2)
    
    /* Configure ADCCMPxCON */
    ADCCMP1 = 0; // No digital comparators are used. Setting the ADCCMPxCON
9d004da4:3c06bf85 luia2,0xbf85
9d004da8:acc0b03c swzero,-20420(a2)
    ADCCMP2 = 0; // register to '0' ensures that the comparator is disabled.
9d004dac:3c06bf85 luia2,0xbf85
9d004db0:acc0b044 swzero,-20412(a2)
    ADCCMP3 = 0; // Other registers are ?don't care?.
9d004db4:3c06bf85 luia2,0xbf85
9d004db8:acc0b04c swzero,-20404(a2)
    ADCCMP4 = 0;
9d004dbc:3c06bf85 luia2,0xbf85
9d004dc0:acc0b054 swzero,-20396(a2)
    ADCCMP5 = 0;
9d004dc4:3c06bf85 luia2,0xbf85
9d004dc8:acc0b05c swzero,-20388(a2)
    ADCCMP6 = 0;    
9d004dcc:3c06bf85 luia2,0xbf85
9d004dd0:acc0b064 swzero,-20380(a2)

    /* Configure ADCFLTRx */
    ADCFLTR1 = 0; // Clear all bits
9d004dd4:3c06bf85 luia2,0xbf85
9d004dd8:acc0b068 swzero,-20376(a2)
    ADCFLTR2 = 0;
9d004ddc:3c06bf85 luia2,0xbf85
9d004de0:acc0b06c swzero,-20372(a2)
    ADCFLTR3 = 0;
9d004de4:3c06bf85 luia2,0xbf85
9d004de8:acc0b070 swzero,-20368(a2)
    ADCFLTR4 = 0;
9d004dec:3c06bf85 luia2,0xbf85
9d004df0:acc0b074 swzero,-20364(a2)
    ADCFLTR5 = 0;
9d004df4:3c06bf85 luia2,0xbf85
9d004df8:acc0b078 swzero,-20360(a2)
    ADCFLTR6 = 0;
9d004dfc:3c06bf85 luia2,0xbf85
9d004e00:acc0b07c swzero,-20356(a2)
    
    // disable all global interrupts
    ADCGIRQEN1 = 0;
9d004e04:3c06bf85 luia2,0xbf85
9d004e08:acc0b020 swzero,-20448(a2)
    ADCGIRQEN2 = 0;
9d004e0c:3c06bf85 luia2,0xbf85
9d004e10:acc0b024 swzero,-20444(a2)
    
    /* Early interrupt */
    ADCEIEN1 = 0; // No early interrupt
9d004e14:3c06bf85 luia2,0xbf85
9d004e18:acc0b0f0 swzero,-20240(a2)
    ADCEIEN2 = 0;
9d004e1c:3c06bf85 luia2,0xbf85
9d004e20:acc0b0f4 swzero,-20236(a2)

    // no dedicated trigger sources
    ADCTRGMODE  =   0;
9d004e24:3c06bf85 luia2,0xbf85
9d004e28:acc0b00c swzero,-20468(a2)

    // put everything in single ended unsigned mode
    ADCIMCON1   = 0;
9d004e2c:3c06bf85 luia2,0xbf85
9d004e30:acc0b010 swzero,-20464(a2)
    ADCIMCON2   = 0;
9d004e34:3c06bf85 luia2,0xbf85
9d004e38:acc0b014 swzero,-20460(a2)
    ADCIMCON3   = 0;
9d004e3c:3c06bf85 luia2,0xbf85
9d004e40:acc0b018 swzero,-20456(a2)
//        ADCIMCON4   = 0;

    // triggers are all edge trigger
    ADCTRGSNS = 0;
9d004e44:3c06bf85 luia2,0xbf85
9d004e48:acc0b0d0 swzero,-20272(a2)

    // turn on the ADCs
    ADCCON1bits.ON = 1;
9d004e4c:8ca6b000 lwa2,-20480(a1)
9d004e50:24070001 lia3,1
9d004e54:7ce67bc4 insa2,a3,0xf,0x1
9d004e58:aca6b000 swa2,-20480(a1)

    /* Wait for voltage reference to be stable */
    while(!ADCCON2bits.BGVRRDY); // Wait until the reference voltage is ready
9d004e5c:8c85b004 lwa1,-20476(a0)
9d004e60:04a1fffe bgeza1,9d004e5c <.LVL4+0x1fc>
9d004e64:3c064000 luia2,0x4000
    while(ADCCON2bits.REFFLT); // Wait if there is a fault with the reference voltage
9d004e68:8c85b004 lwa1,-20476(a0)
9d004e6c:00a62824 anda1,a1,a2
9d004e70:14a0fffd bneza1,9d004e68 <.LVL4+0x208>
9d004e74:00000000 nop
    
    /* Enable clock to analog circuit */
    ADCANCONbits.ANEN0 = 1; // Enable the clock to analog bias and digital control
9d004e78:8c45b100 lwa1,-20224(v0)
9d004e7c:24040001 lia0,1
9d004e80:7c850004 insa1,a0,0x0,0x1
9d004e84:ac45b100 swa1,-20224(v0)
    ADCANCONbits.ANEN1 = 1; // Enable the clock to analog bias and digital control
9d004e88:8c45b100 lwa1,-20224(v0)
9d004e8c:7c850844 insa1,a0,0x1,0x1
9d004e90:ac45b100 swa1,-20224(v0)
    ADCANCONbits.ANEN2 = 1; // Enable the clock to analog bias and digital control
9d004e94:8c45b100 lwa1,-20224(v0)
9d004e98:7c851084 insa1,a0,0x2,0x1
9d004e9c:ac45b100 swa1,-20224(v0)
    ADCANCONbits.ANEN3 = 1; // Enable the clock to analog bias and digital control
9d004ea0:8c45b100 lwa1,-20224(v0)
9d004ea4:7c8518c4 insa1,a0,0x3,0x1
9d004ea8:ac45b100 swa1,-20224(v0)
    ADCANCONbits.ANEN4 = 1; // Enable the clock to analog bias and digital control
9d004eac:8c45b100 lwa1,-20224(v0)
9d004eb0:7c852104 insa1,a0,0x4,0x1
9d004eb4:ac45b100 swa1,-20224(v0)
    ADCANCONbits.ANEN7 = 1; // Enable the clock to analog bias and digital control
9d004eb8:8c45b100 lwa1,-20224(v0)
9d004ebc:7c8539c4 insa1,a0,0x7,0x1
9d004ec0:ac45b100 swa1,-20224(v0)
   
    /* Wait for ADC to be ready */
    while(!ADCANCONbits.WKRDY0); // Wait until ADC0 is ready
9d004ec4:8c44b100 lwa0,-20224(v0)
9d004ec8:30840100 andia0,a0,0x100
9d004ecc:1080fffd beqza0,9d004ec4 <.LVL4+0x264>
9d004ed0:00000000 nop
    while(!ADCANCONbits.WKRDY1); // Wait until ADC1 is ready
9d004ed4:8c44b100 lwa0,-20224(v0)
9d004ed8:30840200 andia0,a0,0x200
9d004edc:1080fffd beqza0,9d004ed4 <.LVL4+0x274>
9d004ee0:00000000 nop
    while(!ADCANCONbits.WKRDY2); // Wait until ADC2 is ready
9d004ee4:8c44b100 lwa0,-20224(v0)
9d004ee8:30840400 andia0,a0,0x400
9d004eec:1080fffd beqza0,9d004ee4 <.LVL4+0x284>
9d004ef0:00000000 nop
    while(!ADCANCONbits.WKRDY3); // Wait until ADC3 is ready
9d004ef4:8c44b100 lwa0,-20224(v0)
9d004ef8:30840800 andia0,a0,0x800
9d004efc:1080fffd beqza0,9d004ef4 <.LVL4+0x294>
9d004f00:00000000 nop
    while(!ADCANCONbits.WKRDY4); // Wait until ADC3 is ready
9d004f04:8c44b100 lwa0,-20224(v0)
9d004f08:30841000 andia0,a0,0x1000
9d004f0c:1080fffd beqza0,9d004f04 <.LVL4+0x2a4>
9d004f10:00000000 nop
    while(!ADCANCONbits.WKRDY7); // Wait until ADC0 is ready
9d004f14:8c44b100 lwa0,-20224(v0)
9d004f18:30848000 andia0,a0,0x8000
9d004f1c:1080fffd beqza0,9d004f14 <.LVL4+0x2b4>
9d004f20:00000000 nop
        
    /* Enable the ADC module */
    ADCCON3bits.DIGEN0 = 1; // Enable ADC0
9d004f24:8c64b008 lwa0,-20472(v1)
9d004f28:24020001 liv0,1
9d004f2c:7c448404 insa0,v0,0x10,0x1
9d004f30:ac64b008 swa0,-20472(v1)
    ADCCON3bits.DIGEN1 = 1; // Enable ADC1
9d004f34:8c64b008 lwa0,-20472(v1)
9d004f38:7c448c44 insa0,v0,0x11,0x1
9d004f3c:ac64b008 swa0,-20472(v1)
    ADCCON3bits.DIGEN2 = 1; // Enable ADC2
9d004f40:8c64b008 lwa0,-20472(v1)
9d004f44:7c449484 insa0,v0,0x12,0x1
9d004f48:ac64b008 swa0,-20472(v1)
    ADCCON3bits.DIGEN3 = 1; // Enable ADC3
9d004f4c:8c64b008 lwa0,-20472(v1)
9d004f50:7c449cc4 insa0,v0,0x13,0x1
9d004f54:ac64b008 swa0,-20472(v1)
    ADCCON3bits.DIGEN4 = 1; // Enable ADC3
9d004f58:8c64b008 lwa0,-20472(v1)
9d004f5c:7c44a504 insa0,v0,0x14,0x1
9d004f60:ac64b008 swa0,-20472(v1)
    ADCCON3bits.DIGEN7 = 1; // Enable shared ADC
9d004f64:8c64b008 lwa0,-20472(v1)
9d004f68:7c44bdc4 insa0,v0,0x17,0x1
9d004f6c:ac64b008 swa0,-20472(v1)
9d004f70:03e00008 jrra
9d004f74:00000000 nop

Disassembly of section .text._ZN11DisplayCore8drawCharEiihtt:

9d004f78 <_ZN11DisplayCore8drawCharEiihtt>:
 *
 *  Example:
 *
 *      tft.drawChar(30, 30, 'Q', Color::Red, Color::Blue);
 */
int DisplayCore::drawChar(int x, int y, unsigned char c, color_t color, color_t bg) {
9d004f78:27bdffa8 addiusp,sp,-88
9d004f7c:afbf0054 swra,84(sp)
9d004f80:afbe0050 sws8,80(sp)
9d004f84:afb7004c sws7,76(sp)
9d004f88:afb60048 sws6,72(sp)
9d004f8c:afb50044 sws5,68(sp)
9d004f90:afb40040 sws4,64(sp)
9d004f94:afb3003c sws3,60(sp)
9d004f98:afb20038 sws2,56(sp)
9d004f9c:afb10034 sws1,52(sp)
9d004fa0:afb00030 sws0,48(sp)
9d004fa4:03a0f021 moves8,sp
9d004fa8:00808821 moves1,a0
9d004fac:afc5005c swa1,92(s8)
9d004fb0:afc60060 swa2,96(s8)
9d004fb4:30f000ff andis0,a3,0xff
9d004fb8:97d70068 lhus7,104(s8)

9d004fbc <.LBB26>:

    if (font == NULL) {
9d004fbc:8c9300bc lws3,188(a0)
9d004fc0:126000d2 beqzs3,9d00530c <.LVL98>
9d004fc4:97d2006c lhus2,108(s8)

9d004fc8 <.LVL45>:
        return 0;
    }

    FontHeader *header = (FontHeader *)font;

    if (c < header->startGlyph || c > header->endGlyph) {
9d004fc8:92650002 lbua1,2(s3)

9d004fcc <.LVL46>:
9d004fcc:0205282b sltua1,s0,a1
9d004fd0:14a000cf bneza1,9d005310 <.LBE47>
9d004fd4:00001021 movev0,zero
9d004fd8:92650003 lbua1,3(s3)
9d004fdc:00b0282b sltua1,a1,s0
9d004fe0:54a000cc bnezla1,9d005314 <.LBE47+0x4>
9d004fe4:03c0e821 movesp,s8
        return 0;
    }

    startBuffer();
9d004fe8:8c820000 lwv0,0(a0)
9d004fec:8c4200c4 lwv0,196(v0)
9d004ff0:0040f809 jalrv0
9d004ff4:0000b021 moves6,zero

9d004ff8 <.LVL47>:

    c = c - header->startGlyph;
9d004ff8:92740002 lbus4,2(s3)
9d004ffc:0214a023 subus4,s0,s4

    // Start of this character's data is the character number multiplied by the
    // number of lines in a character (plus one for the character width) multiplied
    // by the number of bytes in a line, and then offset by 4 for the header.
    uint32_t charstart = (c * ((header->linesPerCharacter * header->bytesPerLine) + 1)) + sizeof(FontHeader); // Start of character data
9d005000:329400ff andis4,s4,0xff
9d005004:92640000 lbua0,0(s3)
9d005008:92620001 lbuv0,1(s3)
9d00500c:70821002 mulv0,a0,v0
9d005010:24420001 addiuv0,v0,1
9d005014:7282a002 muls4,s4,v0
9d005018:26940005 addius4,s4,5

9d00501c <.LVL48>:
    uint8_t charwidth = font[charstart++]; // The first byte of a block is the width of the character
9d00501c:8e2200bc lwv0,188(s1)
9d005020:7c54118a lbuxv0,s4(v0)
9d005024:afc2001c swv0,28(s8)

9d005028 <.LVL49>:

    uint8_t nCols = 1 << header->bitsPerPixel;
9d005028:92620004 lbuv0,4(s3)
9d00502c:24040001 lia0,1
9d005030:00441004 sllvv0,a0,v0

9d005034 <.LVL50>:
    uint32_t bitmask = nCols - 1;
9d005034:304400ff andia0,v0,0xff
9d005038:2490ffff addius0,a0,-1

9d00503c <.LVL51>:
    color_t cmap[nCols];
9d00503c:00042040 slla0,a0,0x1
9d005040:24840008 addiua0,a0,8
9d005044:308403f8 andia0,a0,0x3f8
9d005048:03a4e823 subusp,sp,a0
9d00504c:27a30018 addiuv1,sp,24

9d005050 <.LVL52>:

    if (bg != color) {
9d005050:16570003 bnes2,s7,9d005060 <.LBB29>
9d005054:afc30018 swv1,24(s8)

9d005058 <.LBE26>:
9d005058:0b401484 j9d005210 <.LBE35>
9d00505c:0000b821 moves7,zero

9d005060 <.LBB29>:
        for (uint8_t i = 0; i < nCols; i++) {
9d005060:305500ff andis5,v0,0xff
9d005064:240b00ff lit3,255

9d005068 <.LVL53>:
9d005068:32c200ff andiv0,s6,0xff
9d00506c:0055102b sltuv0,v0,s5
9d005070:10400010 beqzv0,9d0050b4 <.LBE29>
9d005074:72cb3802 mula3,s6,t3
            cmap[i] = mix(bg, color, 255 * i / bitmask);
9d005078:00f0001b divuzero,a3,s0
9d00507c:020001f4 teqs0,zero,0x7
9d005080:00003812 mfloa3
9d005084:02202021 movea0,s1
9d005088:02402821 movea1,s2
9d00508c:02e03021 movea2,s7
9d005090:0f4028af jal9d00a2bc <.LFE84>
9d005094:afcb0020 swt3,32(s8)

9d005098 <.LVL54>:
9d005098:00162040 slla0,s6,0x1
9d00509c:8fc30018 lwv1,24(s8)
9d0050a0:00642021 addua0,v1,a0
9d0050a4:a4820000 shv0,0(a0)

9d0050a8 <.LVL55>:
9d0050a8:26d60001 addius6,s6,1

9d0050ac <.LVL56>:
9d0050ac:0b40141a j9d005068 <.LVL53>
9d0050b0:8fcb0020 lwt3,32(s8)

9d0050b4 <.LBE29>:
        }

        openWindow(x, y, charwidth, header->linesPerCharacter);
9d0050b4:8e220000 lwv0,0(s1)
9d0050b8:92640000 lbua0,0(s3)
9d0050bc:afa40010 swa0,16(sp)

9d0050c0 <.LVL58>:
9d0050c0:8c4200ac lwv0,172(v0)
9d0050c4:02202021 movea0,s1
9d0050c8:8fc5005c lwa1,92(s8)
9d0050cc:8fc60060 lwa2,96(s8)
9d0050d0:0040f809 jalrv0
9d0050d4:8fc7001c lwa3,28(s8)

9d0050d8 <.LBB30>:

        for (int8_t lineNumber = 0; lineNumber < header->linesPerCharacter; lineNumber++ ) {
9d0050d8:0000b021 moves6,zero

9d0050dc <.LVL60>:
9d0050dc:92620000 lbuv0,0(s3)
9d0050e0:02c2102a sltv0,s6,v0
9d0050e4:10400029 beqzv0,9d00518c <.LBE30>
9d0050e8:0000b821 moves7,zero
9d0050ec:00001021 movev0,zero
9d0050f0:2415ffff lis5,-1
9d0050f4:00009021 moves2,zero

9d0050f8 <.LBB31>:

            int8_t bitsLeft = -1;
            uint8_t byteNumber = 0;


            for (int8_t pixelNumber = 0; pixelNumber < charwidth; pixelNumber++) {
9d0050f8:8fc3001c lwv1,28(s8)
9d0050fc:0043202a slta0,v0,v1
9d005100:50800020 beqzla0,9d005184 <.LVL73+0x8>
9d005104:26d60001 addius6,s6,1

9d005108 <.LBB33>:
                if (bitsLeft <= 0) {
9d005108:5ea0000c bgtzls5,9d00513c <.LVL67+0x4>
9d00510c:8e240000 lwa0,0(s1)

9d005110 <.LVL62>:
                    bitsLeft = 8;
                    lineData = font[charstart + (lineNumber * header->bytesPerLine) + (header->bytesPerLine - byteNumber - 1)];
9d005110:92640001 lbua0,1(s3)
9d005114:00972823 subua1,a0,s7
9d005118:8e3200bc lws2,188(s1)

9d00511c <.LVL63>:
9d00511c:02549021 addus2,s2,s4
9d005120:72c41802 mulv1,s6,a0
9d005124:00729021 addus2,v1,s2
9d005128:7e45918a lbuxs2,a1(s2)

9d00512c <.LVL64>:
                    byteNumber++;
9d00512c:26f70001 addius7,s7,1

9d005130 <.LVL65>:
9d005130:32f700ff andis7,s7,0xff

9d005134 <.LVL66>:
            uint8_t byteNumber = 0;


            for (int8_t pixelNumber = 0; pixelNumber < charwidth; pixelNumber++) {
                if (bitsLeft <= 0) {
                    bitsLeft = 8;
9d005134:24150008 lis5,8

9d005138 <.LVL67>:
                    lineData = font[charstart + (lineNumber * header->bytesPerLine) + (header->bytesPerLine - byteNumber - 1)];
                    byteNumber++;
                }
                uint32_t pixelValue = lineData & bitmask;

                windowData(cmap[pixelValue]);
9d005138:8e240000 lwa0,0(s1)
                if (bitsLeft <= 0) {
                    bitsLeft = 8;
                    lineData = font[charstart + (lineNumber * header->bytesPerLine) + (header->bytesPerLine - byteNumber - 1)];
                    byteNumber++;
                }
                uint32_t pixelValue = lineData & bitmask;
9d00513c:02502824 anda1,s2,s0

                windowData(cmap[pixelValue]);
9d005140:00052840 slla1,a1,0x1
9d005144:8fc30018 lwv1,24(s8)
9d005148:00652821 addua1,v1,a1
9d00514c:8c8600b0 lwa2,176(a0)
9d005150:02202021 movea0,s1
9d005154:94a50000 lhua1,0(a1)
9d005158:00c0f809 jalra2
9d00515c:afc20020 swv0,32(s8)

9d005160 <.LVL68>:
    
                lineData >>= header->bitsPerPixel;
9d005160:92640004 lbua0,4(s3)
9d005164:00929007 sravs2,s2,a0

9d005168 <.LVL69>:
9d005168:325200ff andis2,s2,0xff

9d00516c <.LVL70>:
                bitsLeft -= header->bitsPerPixel;
9d00516c:02a4a823 subus5,s5,a0

9d005170 <.LVL71>:
9d005170:7c15ac20 sebs5,s5

9d005174 <.LVL72>:
9d005174:8fc20020 lwv0,32(s8)
9d005178:24420001 addiuv0,v0,1

9d00517c <.LVL73>:
9d00517c:0b40143e j9d0050f8 <.LBB31>
9d005180:7c021420 sebv0,v0
9d005184:0b401437 j9d0050dc <.LVL60>
9d005188:7c16b420 sebs6,s6

9d00518c <.LBE30>:
            }
        }
        closeWindow();
9d00518c:8e220000 lwv0,0(s1)
9d005190:8c4200b8 lwv0,184(v0)
9d005194:0040f809 jalrv0
9d005198:02202021 movea0,s1

9d00519c <.LVL76>:
9d00519c:0b4014be j9d0052f8 <.LBB47+0x4>
9d0051a0:8e220000 lwv0,0(s1)

9d0051a4 <.LBB34>:
            int8_t bitsLeft = -1;
            uint8_t byteNumber = 0;


            for (int8_t pixelNumber = 0; pixelNumber < charwidth; pixelNumber++) {
                if (bitsLeft <= 0) {
9d0051a4:1ec0000c bgtzs6,9d0051d8 <.LVL83>
9d0051a8:02b03824 anda3,s5,s0

9d0051ac <.LVL78>:
                    bitsLeft = 8;
                    lineData = font[charstart + (lineNumber * header->bytesPerLine) + (header->bytesPerLine - byteNumber - 1)];
9d0051ac:92620001 lbuv0,1(s3)
9d0051b0:004d2023 subua0,v0,t5
9d0051b4:8e2a00bc lwt2,188(s1)
9d0051b8:01545021 addut2,t2,s4
9d0051bc:72e21802 mulv1,s7,v0
9d0051c0:006a5021 addut2,v1,t2
9d0051c4:7d44a98a lbuxs5,a0(t2)

9d0051c8 <.LVL79>:
                    byteNumber++;
9d0051c8:25ad0001 addiut5,t5,1

9d0051cc <.LVL80>:
9d0051cc:31ad00ff andit5,t5,0xff

9d0051d0 <.LVL81>:
            uint8_t byteNumber = 0;


            for (int8_t pixelNumber = 0; pixelNumber < charwidth; pixelNumber++) {
                if (bitsLeft <= 0) {
                    bitsLeft = 8;
9d0051d0:24160008 lis6,8

9d0051d4 <.LVL82>:
                    lineData = font[charstart + (lineNumber * header->bytesPerLine) + (header->bytesPerLine - byteNumber - 1)];
                    byteNumber++;
                }
                uint32_t pixelValue = lineData & bitmask;
9d0051d4:02b03824 anda3,s5,s0

9d0051d8 <.LVL83>:

                // If we have some kind of foreground colour...
                if (pixelValue > 0) {
9d0051d8:54e00018 bnezla3,9d00523c <.LVL89>
9d0051dc:8e220000 lwv0,0(s1)

9d0051e0 <.LVL84>:
                    } else {
                        color_t bgc = colorAt(x+pixelNumber, y+lineNumber);
                        setPixel(x + pixelNumber, y + lineNumber, mix(bgc, color, 255 * pixelValue / bitmask));
                    }
                }
                lineData >>= header->bitsPerPixel;
9d0051e0:92620004 lbuv0,4(s3)
9d0051e4:00555007 sravt2,s5,v0
9d0051e8:315500ff andis5,t2,0xff

9d0051ec <.LVL85>:
                bitsLeft -= header->bitsPerPixel;
9d0051ec:02c25823 subut3,s6,v0
9d0051f0:7c0bb420 sebs6,t3

9d0051f4 <.LVL86>:
9d0051f4:258c0001 addiut4,t4,1
9d0051f8:7c0c6420 sebt4,t4

9d0051fc <.LBE37>:

            int8_t bitsLeft = -1;
            uint8_t byteNumber = 0;


            for (int8_t pixelNumber = 0; pixelNumber < charwidth; pixelNumber++) {
9d0051fc:8fc3001c lwv1,28(s8)
9d005200:0183102a sltv0,t4,v1
9d005204:1440ffe7 bnezv0,9d0051a4 <.LBB34>
9d005208:26e90001 addiut1,s7,1
9d00520c:7c09bc20 sebs7,t1

9d005210 <.LBE35>:
            }
        }
        closeWindow();
    } else {

        for (int8_t lineNumber = 0; lineNumber < header->linesPerCharacter; lineNumber++ ) {
9d005210:92620000 lbuv0,0(s3)
9d005214:02e2102a sltv0,s7,v0
9d005218:10400036 beqzv0,9d0052f4 <.LBB47>
9d00521c:00006021 movet4,zero
9d005220:00006821 movet5,zero
9d005224:2416ffff lis6,-1
9d005228:0000a821 moves5,zero
9d00522c:8fc30060 lwv1,96(s8)
9d005230:00771821 adduv1,v1,s7
9d005234:0b40147f j9d0051fc <.LBE37>
9d005238:afc30018 swv1,24(s8)

9d00523c <.LVL89>:
9d00523c:8fc3005c lwv1,92(s8)

9d005240 <.LBB42>:
                uint32_t pixelValue = lineData & bitmask;

                // If we have some kind of foreground colour...
                if (pixelValue > 0) {
                    // If it is at full opacity...
                    if (pixelValue == bitmask) {
9d005240:14f0000c bnea3,s0,9d005274 <.LBB40>
9d005244:006c7021 addut6,v1,t4
                        setPixel(x + pixelNumber, y + lineNumber, color);
9d005248:8c420084 lwv0,132(v0)
9d00524c:02202021 movea0,s1
9d005250:01c02821 movea1,t6
9d005254:8fc60018 lwa2,24(s8)
9d005258:02403821 movea3,s2

9d00525c <.LVL90>:
9d00525c:afcc002c swt4,44(s8)
9d005260:0040f809 jalrv0
9d005264:afcd0028 swt5,40(s8)

9d005268 <.LVL91>:
9d005268:8fcc002c lwt4,44(s8)
9d00526c:0b401478 j9d0051e0 <.LVL84>
9d005270:8fcd0028 lwt5,40(s8)

9d005274 <.LBB40>:
                    // Otherwise mix or fade the colour...
                    } else {
                        color_t bgc = colorAt(x+pixelNumber, y+lineNumber);
9d005274:8c4200bc lwv0,188(v0)
9d005278:02202021 movea0,s1
9d00527c:01c02821 movea1,t6
9d005280:8fc60018 lwa2,24(s8)
9d005284:afc70020 swa3,32(s8)
9d005288:afcc002c swt4,44(s8)
9d00528c:afcd0028 swt5,40(s8)
9d005290:0040f809 jalrv0
9d005294:afce0024 swt6,36(s8)

9d005298 <.LVL93>:
                        setPixel(x + pixelNumber, y + lineNumber, mix(bgc, color, 255 * pixelValue / bitmask));
9d005298:8e240000 lwa0,0(s1)
9d00529c:8c8f0084 lwt7,132(a0)
9d0052a0:8fc70020 lwa3,32(s8)
9d0052a4:240300ff liv1,255
9d0052a8:70e33802 mula3,a3,v1
9d0052ac:00f0001b divuzero,a3,s0
9d0052b0:020001f4 teqs0,zero,0x7
9d0052b4:00003812 mfloa3
9d0052b8:02202021 movea0,s1
9d0052bc:00402821 movea1,v0
9d0052c0:02403021 movea2,s2
9d0052c4:0f4028af jal9d00a2bc <.LFE84>
9d0052c8:afcf0020 swt7,32(s8)

9d0052cc <.LVL94>:
9d0052cc:02202021 movea0,s1
9d0052d0:8fce0024 lwt6,36(s8)
9d0052d4:01c02821 movea1,t6
9d0052d8:8fc60018 lwa2,24(s8)
9d0052dc:8fcf0020 lwt7,32(s8)
9d0052e0:01e0f809 jalrt7
9d0052e4:00403821 movea3,v0

9d0052e8 <.LVL95>:
9d0052e8:8fcd0028 lwt5,40(s8)

9d0052ec <.LBE34>:
9d0052ec:0b401478 j9d0051e0 <.LVL84>
9d0052f0:8fcc002c lwt4,44(s8)

9d0052f4 <.LBB47>:
                lineData >>= header->bitsPerPixel;
                bitsLeft -= header->bitsPerPixel;
            }
        }
    }
    endBuffer();
9d0052f4:8e220000 lwv0,0(s1)
9d0052f8:8c4200c8 lwv0,200(v0)
9d0052fc:0040f809 jalrv0
9d005300:02202021 movea0,s1

9d005304 <.LVL97>:
    return charwidth;
9d005304:0b4014c4 j9d005310 <.LBE47>
9d005308:8fc2001c lwv0,28(s8)

9d00530c <.LVL98>:
 *      tft.drawChar(30, 30, 'Q', Color::Red, Color::Blue);
 */
int DisplayCore::drawChar(int x, int y, unsigned char c, color_t color, color_t bg) {

    if (font == NULL) {
        return 0;
9d00530c:00001021 movev0,zero

9d005310 <.LBE47>:
            }
        }
    }
    endBuffer();
    return charwidth;
}
9d005310:03c0e821 movesp,s8
9d005314:8fbf0054 lwra,84(sp)
9d005318:8fbe0050 lws8,80(sp)
9d00531c:8fb7004c lws7,76(sp)
9d005320:8fb60048 lws6,72(sp)
9d005324:8fb50044 lws5,68(sp)
9d005328:8fb40040 lws4,64(sp)
9d00532c:8fb3003c lws3,60(sp)
9d005330:8fb20038 lws2,56(sp)
9d005334:8fb10034 lws1,52(sp)

9d005338 <.LVL100>:
9d005338:8fb00030 lws0,48(sp)
9d00533c:03e00008 jrra
9d005340:27bd0058 addiusp,sp,88

Disassembly of section .text.loop:

9d005344 <L0>:
setBorderSingle(Color::Black);
cls(Color::Black);
delay(1000);
setBorderSingle(Color::White);
delay(500);
cls(Color::White);
9d005344:27bdffe0 addiusp,sp,-32
9d005348:afbf001c swra,28(sp)
9d00534c:afb10018 sws1,24(sp)
9d005350:afb00014 sws0,20(sp)
tft.setCursor(32, 208);
9d005354:0f402a19 jal9d00a864 <.LFE190>
9d005358:00002021 movea0,zero

9d00535c <.LVL102>:
tft.setTextColor(Color::Black, Color::White);
9d00535c:0f402f19 jal9d00bc64 <.LFE8>
9d005360:00002021 movea0,zero

9d005364 <.LVL103>:
tft.print("  \x80 1982 Sinclair Research Ltd");
9d005364:0f402e47 jal9d00b91c <.LFE87>
9d005368:240403e8 lia0,1000

9d00536c <.LVL104>:
delay(3000);
9d00536c:0f402a19 jal9d00a864 <.LFE190>
9d005370:3404ffff lia0,0xffff

9d005374 <.LVL105>:
cls(Color::White);
9d005374:0f402e47 jal9d00b91c <.LFE87>
9d005378:240401f4 lia0,500

9d00537c <.LVL106>:
for (int i = 0; i < 2; i++) {
9d00537c:0f402f19 jal9d00bc64 <.LFE8>
9d005380:3404ffff lia0,0xffff

9d005384 <.LVL107>:
tft.setCursor(32, 208);
9d005384:27848338 addiua0,gp,-31944
9d005388:24050020 lia1,32
9d00538c:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d005390:240600d0 lia2,208

9d005394 <.LVL108>:
tft.setTextColor(Color::White, Color::Black);
9d005394:27848338 addiua0,gp,-31944
9d005398:00002821 movea1,zero
9d00539c:0f403080 jal9d00c200 <.LFE180>
9d0053a0:3406ffff lia2,0xffff

9d0053a4 <.LVL109>:
tft.print("K");
9d0053a4:27848338 addiua0,gp,-31944
9d0053a8:3c059d01 luia1,0x9d01
9d0053ac:0f4030e5 jal9d00c394 <.LFE186>
9d0053b0:24a5b968 addiua1,a1,-18072

9d0053b4 <.LVL110>:
delay(500);
9d0053b4:0f402e47 jal9d00b91c <.LFE87>
9d0053b8:24040bb8 lia0,3000

9d0053bc <.LVL111>:
tft.setCursor(32, 208);
9d0053bc:0f402f19 jal9d00bc64 <.LFE8>
9d0053c0:3404ffff lia0,0xffff

9d0053c4 <.LVL112>:
9d0053c4:24100002 lis0,2

9d0053c8 <.LBB16>:
tft.setTextColor(Color::Black, Color::White);
tft.print("K");
delay(500);
}
9d0053c8:3c119d01 luis1,0x9d01
9d0053cc:2631b988 addius1,s1,-18040

9d0053d0 <.LVL113>:
tft.setTextColor(Color::White, Color::Black);
tft.print("K");
delay(500);
tft.setCursor(32, 208);
tft.setTextColor(Color::Black, Color::White);
tft.print("K");
9d0053d0:27848338 addiua0,gp,-31944
9d0053d4:24050020 lia1,32
9d0053d8:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d0053dc:240600d0 lia2,208

9d0053e0 <.LVL114>:
delay(500);
9d0053e0:27848338 addiua0,gp,-31944
9d0053e4:3405ffff lia1,0xffff
9d0053e8:0f403080 jal9d00c200 <.LFE180>
9d0053ec:00003021 movea2,zero

9d0053f0 <.LVL115>:
}
9d0053f0:27848338 addiua0,gp,-31944
9d0053f4:0f4030e5 jal9d00c394 <.LFE186>
9d0053f8:02202821 movea1,s1

9d0053fc <.LVL116>:

9d0053fc:0f402e47 jal9d00b91c <.LFE87>
9d005400:240401f4 lia0,500

9d005404 <.LVL117>:
tft.setTextColor(Color::Black, Color::White);
9d005404:27848338 addiua0,gp,-31944
9d005408:24050020 lia1,32
9d00540c:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d005410:240600d0 lia2,208

9d005414 <.LVL118>:
tft.setCursor(32, 208);
9d005414:27848338 addiua0,gp,-31944
9d005418:00002821 movea1,zero
9d00541c:0f403080 jal9d00c200 <.LFE180>
9d005420:3406ffff lia2,0xffff

9d005424 <.LVL119>:
tft.print("LOAD");
9d005424:27848338 addiua0,gp,-31944
9d005428:0f4030e5 jal9d00c394 <.LFE186>
9d00542c:02202821 movea1,s1

9d005430 <.LVL120>:

9d005430:0f402e47 jal9d00b91c <.LFE87>
9d005434:240401f4 lia0,500

9d005438 <.LVL121>:
9d005438:2610ffff addius0,s0,-1

9d00543c <.LVL122>:
tft.setCursor(32, 208);
tft.setTextColor(Color::White, Color::Black);
tft.print("K");
delay(500);
tft.setCursor(32, 208);
tft.setTextColor(Color::Black, Color::White);
9d00543c:1600ffe5 bnezs0,9d0053d4 <.LVL113+0x4>
9d005440:27848338 addiua0,gp,-31944

9d005444 <.LBE16>:
tft.setCursor(32, 208);
tft.print("LOAD");

for (int i = 0; i < 3; i++) {
tft.setCursor(72, 208);
tft.setTextColor(Color::White, Color::Black);
9d005444:00002821 movea1,zero
9d005448:0f403080 jal9d00c200 <.LFE180>
9d00544c:3406ffff lia2,0xffff

9d005450 <.LVL123>:
tft.print("L");
9d005450:27848338 addiua0,gp,-31944
9d005454:24050020 lia1,32
9d005458:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d00545c:240600d0 lia2,208

9d005460 <.LVL124>:
delay(500);
9d005460:27848338 addiua0,gp,-31944
9d005464:3c059d01 luia1,0x9d01
9d005468:0f4030e5 jal9d00c394 <.LFE186>
9d00546c:24a5b98c addiua1,a1,-18036

9d005470 <.LVL125>:
9d005470:24110003 lis1,3

9d005474 <.LBB17>:
tft.setCursor(72, 208);
tft.setTextColor(Color::Black, Color::White);
tft.print("L");
delay(500);
}
9d005474:3c109d01 luis0,0x9d01

9d005478 <.LVL126>:
9d005478:2610b994 addius0,s0,-18028

9d00547c <.LVL127>:
tft.setTextColor(Color::White, Color::Black);
tft.print("L");
delay(500);
tft.setCursor(72, 208);
tft.setTextColor(Color::Black, Color::White);
tft.print("L");
9d00547c:27848338 addiua0,gp,-31944
9d005480:24050048 lia1,72
9d005484:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d005488:240600d0 lia2,208

9d00548c <.LVL128>:
delay(500);
9d00548c:27848338 addiua0,gp,-31944
9d005490:3405ffff lia1,0xffff
9d005494:0f403080 jal9d00c200 <.LFE180>
9d005498:00003021 movea2,zero

9d00549c <.LVL129>:
}
9d00549c:27848338 addiua0,gp,-31944
9d0054a0:0f4030e5 jal9d00c394 <.LFE186>
9d0054a4:02002821 movea1,s0

9d0054a8 <.LVL130>:

9d0054a8:0f402e47 jal9d00b91c <.LFE87>
9d0054ac:240401f4 lia0,500

9d0054b0 <.LVL131>:
tft.setTextColor(Color::Black, Color::White);
9d0054b0:27848338 addiua0,gp,-31944
9d0054b4:24050048 lia1,72
9d0054b8:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d0054bc:240600d0 lia2,208

9d0054c0 <.LVL132>:
tft.setCursor(72, 208);
9d0054c0:27848338 addiua0,gp,-31944
9d0054c4:00002821 movea1,zero
9d0054c8:0f403080 jal9d00c200 <.LFE180>
9d0054cc:3406ffff lia2,0xffff

9d0054d0 <.LVL133>:
tft.print("\"");
9d0054d0:27848338 addiua0,gp,-31944
9d0054d4:0f4030e5 jal9d00c394 <.LFE186>
9d0054d8:02002821 movea1,s0

9d0054dc <.LVL134>:

9d0054dc:0f402e47 jal9d00b91c <.LFE87>
9d0054e0:240401f4 lia0,500

9d0054e4 <.LVL135>:
9d0054e4:2631ffff addius1,s1,-1

9d0054e8 <.LVL136>:
tft.setCursor(72, 208);
tft.setTextColor(Color::White, Color::Black);
tft.print("L");
delay(500);
tft.setCursor(72, 208);
tft.setTextColor(Color::Black, Color::White);
9d0054e8:1620ffe5 bnezs1,9d005480 <.LVL127+0x4>
9d0054ec:27848338 addiua0,gp,-31944

9d0054f0 <.LBE17>:
tft.setCursor(72, 208);
tft.print("\"");

for (int i = 0; i < 1; i++) {
tft.setCursor(80, 208);
tft.setTextColor(Color::White, Color::Black);
9d0054f0:00002821 movea1,zero
9d0054f4:0f403080 jal9d00c200 <.LFE180>
9d0054f8:3406ffff lia2,0xffff

9d0054fc <.LVL137>:
tft.print("L");
9d0054fc:27848338 addiua0,gp,-31944
9d005500:24050048 lia1,72
9d005504:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d005508:240600d0 lia2,208

9d00550c <.LVL138>:
delay(500);
9d00550c:27848338 addiua0,gp,-31944
9d005510:3c119d01 luis1,0x9d01

9d005514 <.LVL139>:
9d005514:0f4030e5 jal9d00c394 <.LFE186>
9d005518:2625b998 addiua1,s1,-18024

9d00551c <.LBB18>:
tft.setCursor(80, 208);
tft.setTextColor(Color::Black, Color::White);
tft.print("L");
9d00551c:27848338 addiua0,gp,-31944
9d005520:24050050 lia1,80
9d005524:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d005528:240600d0 lia2,208

9d00552c <.LVL141>:
delay(500);
9d00552c:27848338 addiua0,gp,-31944
9d005530:3405ffff lia1,0xffff
9d005534:0f403080 jal9d00c200 <.LFE180>
9d005538:00003021 movea2,zero

9d00553c <.LVL142>:
}
9d00553c:27848338 addiua0,gp,-31944
9d005540:0f4030e5 jal9d00c394 <.LFE186>
9d005544:02002821 movea1,s0

9d005548 <.LVL143>:

9d005548:0f402e47 jal9d00b91c <.LFE87>
9d00554c:240401f4 lia0,500

9d005550 <.LVL144>:
tft.setTextColor(Color::Black, Color::White);
9d005550:27848338 addiua0,gp,-31944
9d005554:24050050 lia1,80
9d005558:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d00555c:240600d0 lia2,208

9d005560 <.LVL145>:
tft.setCursor(80, 208);
9d005560:27848338 addiua0,gp,-31944
9d005564:00002821 movea1,zero
9d005568:0f403080 jal9d00c200 <.LFE180>
9d00556c:3406ffff lia2,0xffff

9d005570 <.LVL146>:
tft.print("\"");
9d005570:27848338 addiua0,gp,-31944
9d005574:0f4030e5 jal9d00c394 <.LFE186>
9d005578:02002821 movea1,s0

9d00557c <.LVL147>:

9d00557c:0f402e47 jal9d00b91c <.LFE87>
9d005580:240401f4 lia0,500

9d005584 <.LBE18>:
for (int i = 0; i < 2; i++) {
tft.setCursor(88, 208);
tft.setTextColor(Color::White, Color::Black);
9d005584:27848338 addiua0,gp,-31944
9d005588:00002821 movea1,zero
9d00558c:0f403080 jal9d00c200 <.LFE180>
9d005590:3406ffff lia2,0xffff

9d005594 <.LVL149>:
tft.print("L");
9d005594:27848338 addiua0,gp,-31944
9d005598:24050050 lia1,80
9d00559c:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d0055a0:240600d0 lia2,208

9d0055a4 <.LVL150>:
delay(500);
9d0055a4:27848338 addiua0,gp,-31944
9d0055a8:0f4030e5 jal9d00c394 <.LFE186>
9d0055ac:2625b998 addiua1,s1,-18024

9d0055b0 <.LVL151>:
9d0055b0:24110002 lis1,2

9d0055b4 <.LBB19>:
tft.setCursor(88, 208);
tft.setTextColor(Color::Black, Color::White);
tft.print("L");
9d0055b4:27848338 addiua0,gp,-31944
9d0055b8:24050058 lia1,88
9d0055bc:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d0055c0:240600d0 lia2,208

9d0055c4 <.LVL153>:
delay(500);
9d0055c4:27848338 addiua0,gp,-31944
9d0055c8:3405ffff lia1,0xffff
9d0055cc:0f403080 jal9d00c200 <.LFE180>
9d0055d0:00003021 movea2,zero

9d0055d4 <.LVL154>:
}
9d0055d4:27848338 addiua0,gp,-31944
9d0055d8:0f4030e5 jal9d00c394 <.LFE186>
9d0055dc:02002821 movea1,s0

9d0055e0 <.LVL155>:

9d0055e0:0f402e47 jal9d00b91c <.LFE87>
9d0055e4:240401f4 lia0,500

9d0055e8 <.LVL156>:

9d0055e8:27848338 addiua0,gp,-31944
9d0055ec:24050058 lia1,88
9d0055f0:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d0055f4:240600d0 lia2,208

9d0055f8 <.LVL157>:
cls(Color::White);
9d0055f8:27848338 addiua0,gp,-31944
9d0055fc:00002821 movea1,zero
9d005600:0f403080 jal9d00c200 <.LFE180>
9d005604:3406ffff lia2,0xffff

9d005608 <.LVL158>:

9d005608:27848338 addiua0,gp,-31944
9d00560c:0f4030e5 jal9d00c394 <.LFE186>
9d005610:02002821 movea1,s0

9d005614 <.LVL159>:
silence(5000);
9d005614:0f402e47 jal9d00b91c <.LFE87>
9d005618:240401f4 lia0,500

9d00561c <.LVL160>:
9d00561c:2631ffff addius1,s1,-1

9d005620 <.LVL161>:
tft.setCursor(88, 208);
tft.setTextColor(Color::White, Color::Black);
tft.print("L");
delay(500);
tft.setCursor(88, 208);
tft.setTextColor(Color::Black, Color::White);
9d005620:5620ffe5 bnezls1,9d0055b8 <.LBB19+0x4>
9d005624:27848338 addiua0,gp,-31944

9d005628 <.LBE19>:

silence(5000);
loadHeader(1000);
loadBody(250);
tft.setCursor(32, 32);
tft.print("Program: PIC32-TFT");
9d005628:0f402f19 jal9d00bc64 <.LFE8>
9d00562c:3404ffff lia0,0xffff

9d005630 <.LVL162>:
silence(1000);
loadHeader(1000);
9d005630:0f402a43 jal9d00a90c <.LFE179>
9d005634:24041388 lia0,5000

9d005638 <.LVL163>:
loadBody(3000);
9d005638:0f402c06 jal9d00b018 <.LFE187>
9d00563c:240403e8 lia0,1000

9d005640 <.LVL164>:

9d005640:0f402d5e jal9d00b578 <_Z8loadBodym>
9d005644:240400fa lia0,250

9d005648 <.LVL165>:
cls(Color::Black);
9d005648:27848338 addiua0,gp,-31944
9d00564c:24050020 lia1,32
9d005650:0f4030bc jal9d00c2f0 <_ZN11DisplayCore9setCursorEii>
9d005654:24060020 lia2,32

9d005658 <.LVL166>:
silence(2000);
9d005658:27848338 addiua0,gp,-31944
9d00565c:3c059d01 luia1,0x9d01
9d005660:0f4030e5 jal9d00c394 <.LFE186>
9d005664:24a5b99c addiua1,a1,-18020

9d005668 <.LVL167>:
loadHeader(1000);
9d005668:0f402a43 jal9d00a90c <.LFE179>
9d00566c:240403e8 lia0,1000

9d005670 <.LVL168>:
loadBody(250);
9d005670:0f402c06 jal9d00b018 <.LFE187>
9d005674:240403e8 lia0,1000

9d005678 <.LVL169>:
silence(1000);
9d005678:0f402d5e jal9d00b578 <_Z8loadBodym>
9d00567c:24040bb8 lia0,3000

9d005680 <.LVL170>:
loadHeader(1000);
loadBody(7000);
9d005680:0f402f19 jal9d00bc64 <.LFE8>
9d005684:00002021 movea0,zero

9d005688 <.LVL171>:

9d005688:0f402a43 jal9d00a90c <.LFE179>
9d00568c:240407d0 lia0,2000

9d005690 <.LVL172>:
silence(1000);
9d005690:0f402c06 jal9d00b018 <.LFE187>
9d005694:240403e8 lia0,1000

9d005698 <.LVL173>:
loadHeader(1000);
9d005698:0f402d5e jal9d00b578 <_Z8loadBodym>
9d00569c:240400fa lia0,250

9d0056a0 <.LVL174>:
loadBody(250);
9d0056a0:0f402a43 jal9d00a90c <.LFE179>
9d0056a4:240403e8 lia0,1000

9d0056a8 <.LVL175>:
silence(1000);
9d0056a8:0f402c06 jal9d00b018 <.LFE187>
9d0056ac:240403e8 lia0,1000

9d0056b0 <.LVL176>:
loadHeader(1000);
9d0056b0:0f402d5e jal9d00b578 <_Z8loadBodym>
9d0056b4:24041b58 lia0,7000

9d0056b8 <.LVL177>:
loadBody(30000);
setBorderSingle(Color::Black);
9d0056b8:0f402a43 jal9d00a90c <.LFE179>
9d0056bc:240403e8 lia0,1000

9d0056c0 <.LVL178>:
delay(5000);
9d0056c0:0f402c06 jal9d00b018 <.LFE187>
9d0056c4:240403e8 lia0,1000

9d0056c8 <.LVL179>:
}
9d0056c8:0f402d5e jal9d00b578 <_Z8loadBodym>
9d0056cc:240400fa lia0,250

9d0056d0 <.LVL180>:
9d0056d0:0f402a43 jal9d00a90c <.LFE179>
9d0056d4:240403e8 lia0,1000

9d0056d8 <.LVL181>:
9d0056d8:0f402c06 jal9d00b018 <.LFE187>
9d0056dc:240403e8 lia0,1000

9d0056e0 <.LVL182>:
9d0056e0:0f402d5e jal9d00b578 <_Z8loadBodym>
9d0056e4:24047530 lia0,30000

9d0056e8 <.LVL183>:
9d0056e8:0f402a19 jal9d00a864 <.LFE190>
9d0056ec:00002021 movea0,zero

9d0056f0 <.LVL184>:
9d0056f0:24041388 lia0,5000
9d0056f4:8fbf001c lwra,28(sp)
9d0056f8:8fb10018 lws1,24(sp)

9d0056fc <.LVL185>:
9d0056fc:8fb00014 lws0,20(sp)
}
9d005700:0b402e47 j9d00b91c <.LFE87>
9d005704:27bd0020 addiusp,sp,32

Disassembly of section .text.pow:

9d005708 <pow>:
9d005708:27bdff88 addiusp,sp,-120
9d00570c:afbf004c swra,76(sp)
9d005710:afb20048 sws2,72(sp)
9d005714:afb10044 sws1,68(sp)
9d005718:afb00040 sws0,64(sp)
9d00571c:f7ba0068 sdc1$f26,104(sp)
9d005720:f7b80060 sdc1$f24,96(sp)
9d005724:f7b60058 sdc1$f22,88(sp)
9d005728:f7b40050 sdc1$f20,80(sp)
9d00572c:46206586 mov.d$f22,$f12
9d005730:0f400f15 jal9d003c54 <__ieee754_pow>
9d005734:46207506 mov.d$f20,$f14
9d005738:3c118000 luis1,0x8000
9d00573c:8e22238c lwv0,9100(s1)
9d005740:2412ffff lis2,-1
9d005744:105200ca beqv0,s2,9d005a70 <pow+0x368>
9d005748:46200686 mov.d$f26,$f0
9d00574c:4620a306 mov.d$f12,$f20
9d005750:0f402cf7 jal9d00b3dc <.LFE172>
9d005754:f7a00038 sdc1$f0,56(sp)
9d005758:d7a00038 ldc1$f0,56(sp)
9d00575c:104000c4 beqzv0,9d005a70 <pow+0x368>
9d005760:46200686 mov.d$f26,$f0
9d005764:0f402cf7 jal9d00b3dc <.LFE172>
9d005768:4620b306 mov.d$f12,$f22
9d00576c:4480c000 mtc1zero,$f24
9d005770:44e0c000 mthc1zero,$f24
9d005774:14400016 bnezv0,9d0057d0 <pow+0xc8>
9d005778:d7a00038 ldc1$f0,56(sp)
9d00577c:4638a032 c.eq.d$f20,$f24
9d005780:450000bb bc1f9d005a70 <pow+0x368>
9d005784:46200686 mov.d$f26,$f0
9d005788:24020001 liv0,1
9d00578c:afa20010 swv0,16(sp)
9d005790:3c029d01 luiv0,0x9d01
9d005794:2442bd48 addiuv0,v0,-17080
9d005798:afa20014 swv0,20(sp)
9d00579c:afa00030 swzero,48(sp)
9d0057a0:f7b60018 sdc1$f22,24(sp)
9d0057a4:f7b40020 sdc1$f20,32(sp)
9d0057a8:3c029d01 luiv0,0x9d01
9d0057ac:d440bd50 ldc1$f0,-17072(v0)
9d0057b0:f7a00028 sdc1$f0,40(sp)
9d0057b4:8e22238c lwv0,9100(s1)
9d0057b8:105200a5 beqv0,s2,9d005a50 <pow+0x348>
9d0057bc:24030002 liv1,2
9d0057c0:1443004e bnev0,v1,9d0058fc <pow+0x1f4>
9d0057c4:8fa20030 lwv0,48(sp)
9d0057c8:0b401695 j9d005a54 <pow+0x34c>
9d0057cc:00000000 nop
9d0057d0:4638b132 c.eq.d$fcc1,$f22,$f24
9d0057d4:45040027 bc1f$fcc1,9d005874 <pow+0x16c>
9d0057d8:4638a232 c.eq.d$fcc2,$f20,$f24
9d0057dc:4508000f bc1f$fcc2,9d00581c <pow+0x114>
9d0057e0:24020001 liv0,1
9d0057e4:afa20010 swv0,16(sp)
9d0057e8:3c029d01 luiv0,0x9d01
9d0057ec:2442bd48 addiuv0,v0,-17080
9d0057f0:afa20014 swv0,20(sp)
9d0057f4:afa00030 swzero,48(sp)
9d0057f8:f7b60018 sdc1$f22,24(sp)
9d0057fc:f7b40020 sdc1$f20,32(sp)
9d005800:f7b80028 sdc1$f24,40(sp)
9d005804:8e22238c lwv0,9100(s1)
9d005808:1040003c beqzv0,9d0058fc <pow+0x1f4>
9d00580c:3c029d01 luiv0,0x9d01
9d005810:d440bd50 ldc1$f0,-17072(v0)
9d005814:0b401694 j9d005a50 <pow+0x348>
9d005818:f7a00028 sdc1$f0,40(sp)
9d00581c:0f403063 jal9d00c18c <.LFE91+0x18>
9d005820:4620a306 mov.d$f12,$f20
9d005824:10400093 beqzv0,9d005a74 <pow+0x36c>
9d005828:4620d006 mov.d$f0,$f26
9d00582c:4638a33c c.lt.d$fcc3,$f20,$f24
9d005830:450c0091 bc1f$fcc3,9d005a78 <pow+0x370>
9d005834:8fbf004c lwra,76(sp)
9d005838:24020001 liv0,1
9d00583c:afa20010 swv0,16(sp)
9d005840:3c029d01 luiv0,0x9d01
9d005844:2442bd48 addiuv0,v0,-17080
9d005848:afa20014 swv0,20(sp)
9d00584c:afa00030 swzero,48(sp)
9d005850:f7b60018 sdc1$f22,24(sp)
9d005854:f7b40020 sdc1$f20,32(sp)
9d005858:8e22238c lwv0,9100(s1)
9d00585c:50400027 beqzlv0,9d0058fc <pow+0x1f4>
9d005860:f7b80028 sdc1$f24,40(sp)
9d005864:3c039d01 luiv1,0x9d01
9d005868:d460bd58 ldc1$f0,-17064(v1)
9d00586c:0b40163c j9d0058f0 <pow+0x1e8>
9d005870:f7a00028 sdc1$f0,40(sp)
9d005874:02208021 moves0,s1
9d005878:46200306 mov.d$f12,$f0
9d00587c:0f403063 jal9d00c18c <.LFE91+0x18>
9d005880:f7a00038 sdc1$f0,56(sp)
9d005884:1440004e bnezv0,9d0059c0 <pow+0x2b8>
9d005888:d7a00038 ldc1$f0,56(sp)
9d00588c:0f403063 jal9d00c18c <.LFE91+0x18>
9d005890:4620b306 mov.d$f12,$f22
9d005894:1040004a beqzv0,9d0059c0 <pow+0x2b8>
9d005898:d7a00038 ldc1$f0,56(sp)
9d00589c:0f403063 jal9d00c18c <.LFE91+0x18>
9d0058a0:4620a306 mov.d$f12,$f20
9d0058a4:10400046 beqzv0,9d0059c0 <pow+0x2b8>
9d0058a8:d7a00038 ldc1$f0,56(sp)
9d0058ac:0f402cf7 jal9d00b3dc <.LFE172>
9d0058b0:46200306 mov.d$f12,$f0
9d0058b4:3c039d01 luiv1,0x9d01
9d0058b8:14400018 bnezv0,9d00591c <pow+0x214>
9d0058bc:2463bd48 addiuv1,v1,-17080
9d0058c0:24020001 liv0,1
9d0058c4:afa20010 swv0,16(sp)
9d0058c8:afa30014 swv1,20(sp)
9d0058cc:afa00030 swzero,48(sp)
9d0058d0:f7b60018 sdc1$f22,24(sp)
9d0058d4:f7b40020 sdc1$f20,32(sp)
9d0058d8:8e22238c lwv0,9100(s1)
9d0058dc:54400003 bnezlv0,9d0058ec <pow+0x1e4>
9d0058e0:4638c603 div.d$f24,$f24,$f24
9d0058e4:0b40163f j9d0058fc <pow+0x1f4>
9d0058e8:f7b80028 sdc1$f24,40(sp)
9d0058ec:f7b80028 sdc1$f24,40(sp)
9d0058f0:24030002 liv1,2
9d0058f4:10430005 beqv0,v1,9d00590c <pow+0x204>
9d0058f8:00000000 nop
9d0058fc:0f4030ed jal9d00c3b4 <.LFE104>
9d005900:27a40010 addiua0,sp,16
9d005904:54400053 bnezlv0,9d005a54 <pow+0x34c>
9d005908:8fa20030 lwv0,48(sp)
9d00590c:0f4030c8 jal9d00c320 <.LFE21>
9d005910:00000000 nop
9d005914:0b401693 j9d005a4c <pow+0x344>
9d005918:24030021 liv1,33
9d00591c:24020003 liv0,3
9d005920:afa20010 swv0,16(sp)
9d005924:afa30014 swv1,20(sp)
9d005928:afa00030 swzero,48(sp)
9d00592c:f7b60018 sdc1$f22,24(sp)
9d005930:f7b40020 sdc1$f20,32(sp)
9d005934:8e22238c lwv0,9100(s1)
9d005938:14400011 bnezv0,9d005980 <pow+0x278>
9d00593c:3c029d01 luiv0,0x9d01
9d005940:3c029d01 luiv0,0x9d01
9d005944:d440bd60 ldc1$f0,-17056(v0)
9d005948:4638b43c c.lt.d$fcc4,$f22,$f24
9d00594c:45100034 bc1f$fcc4,9d005a20 <pow+0x318>
9d005950:f7a00028 sdc1$f0,40(sp)
9d005954:3c029d01 luiv0,0x9d01
9d005958:d440bd68 ldc1$f0,-17048(v0)
9d00595c:4620a502 mul.d$f20,$f20,$f0
9d005960:0f401ff4 jal9d007fd0 <.LFE172>
9d005964:4620a306 mov.d$f12,$f20
9d005968:46340532 c.eq.d$fcc5,$f0,$f20
9d00596c:4515002d bc1t$fcc5,9d005a24 <pow+0x31c>
9d005970:8e03238c lwv1,9100(s0)
9d005974:3c029d01 luiv0,0x9d01
9d005978:0b40166e j9d0059b8 <pow+0x2b0>
9d00597c:d440bd70 ldc1$f0,-17040(v0)
9d005980:d440bd78 ldc1$f0,-17032(v0)
9d005984:4638b63c c.lt.d$fcc6,$f22,$f24
9d005988:45180025 bc1f$fcc6,9d005a20 <pow+0x318>
9d00598c:f7a00028 sdc1$f0,40(sp)
9d005990:3c029d01 luiv0,0x9d01
9d005994:d440bd68 ldc1$f0,-17048(v0)
9d005998:4620a502 mul.d$f20,$f20,$f0
9d00599c:0f401ff4 jal9d007fd0 <.LFE172>
9d0059a0:4620a306 mov.d$f12,$f20
9d0059a4:46340732 c.eq.d$fcc7,$f0,$f20
9d0059a8:451d001e bc1t$fcc7,9d005a24 <pow+0x31c>
9d0059ac:8e03238c lwv1,9100(s0)
9d0059b0:3c029d01 luiv0,0x9d01
9d0059b4:d440bd58 ldc1$f0,-17064(v0)
9d0059b8:0b401688 j9d005a20 <pow+0x318>
9d0059bc:f7a00028 sdc1$f0,40(sp)
9d0059c0:46380032 c.eq.d$f0,$f24
9d0059c4:4500002a bc1f9d005a70 <pow+0x368>
9d0059c8:46200686 mov.d$f26,$f0
9d0059cc:4620b306 mov.d$f12,$f22
9d0059d0:0f403063 jal9d00c18c <.LFE91+0x18>
9d0059d4:f7a00038 sdc1$f0,56(sp)
9d0059d8:d7a00038 ldc1$f0,56(sp)
9d0059dc:10400024 beqzv0,9d005a70 <pow+0x368>
9d0059e0:46200686 mov.d$f26,$f0
9d0059e4:0f403063 jal9d00c18c <.LFE91+0x18>
9d0059e8:4620a306 mov.d$f12,$f20
9d0059ec:d7a00038 ldc1$f0,56(sp)
9d0059f0:1040001f beqzv0,9d005a70 <pow+0x368>
9d0059f4:46200686 mov.d$f26,$f0
9d0059f8:24020004 liv0,4
9d0059fc:afa20010 swv0,16(sp)
9d005a00:3c029d01 luiv0,0x9d01
9d005a04:2442bd48 addiuv0,v0,-17080
9d005a08:afa20014 swv0,20(sp)
9d005a0c:afa00030 swzero,48(sp)
9d005a10:f7b60018 sdc1$f22,24(sp)
9d005a14:f7b40020 sdc1$f20,32(sp)
9d005a18:afa00028 swzero,40(sp)
9d005a1c:afa0002c swzero,44(sp)
9d005a20:8e03238c lwv1,9100(s0)
9d005a24:24020002 liv0,2
9d005a28:10620005 beqv1,v0,9d005a40 <pow+0x338>
9d005a2c:00000000 nop
9d005a30:0f4030ed jal9d00c3b4 <.LFE104>
9d005a34:27a40010 addiua0,sp,16
9d005a38:14400006 bnezv0,9d005a54 <pow+0x34c>
9d005a3c:8fa20030 lwv0,48(sp)
9d005a40:0f4030c8 jal9d00c320 <.LFE21>
9d005a44:00000000 nop
9d005a48:24030022 liv1,34
9d005a4c:ac430000 swv1,0(v0)
9d005a50:8fa20030 lwv0,48(sp)
9d005a54:10400006 beqzv0,9d005a70 <pow+0x368>
9d005a58:d7ba0028 ldc1$f26,40(sp)
9d005a5c:0f4030c8 jal9d00c320 <.LFE21>
9d005a60:00000000 nop
9d005a64:8fa30030 lwv1,48(sp)
9d005a68:ac430000 swv1,0(v0)
9d005a6c:d7ba0028 ldc1$f26,40(sp)
9d005a70:4620d006 mov.d$f0,$f26
9d005a74:8fbf004c lwra,76(sp)
9d005a78:8fb20048 lws2,72(sp)
9d005a7c:8fb10044 lws1,68(sp)
9d005a80:8fb00040 lws0,64(sp)
9d005a84:d7ba0068 ldc1$f26,104(sp)
9d005a88:d7b80060 ldc1$f24,96(sp)
9d005a8c:d7b60058 ldc1$f22,88(sp)
9d005a90:d7b40050 ldc1$f20,80(sp)
9d005a94:03e00008 jrra
9d005a98:27bd0078 addiusp,sp,120

Disassembly of section .text._ZN7SSD128916initializeDeviceEv:

9d005a9c <_ZN7SSD128916initializeDeviceEv>:
    com & 0x8000 ? port_d15->lat.set = mask_d15 : port_d15->lat.clr = mask_d15;
    port_wr->lat.clr = mask_wr;
    port_wr->lat.set = mask_wr;
}

void SSD1289::initializeDevice() {
9d005a9c:27bdffe8 addiusp,sp,-24
9d005aa0:afbf0014 swra,20(sp)
9d005aa4:afb00010 sws0,16(sp)
9d005aa8:00808021 moves0,a0
    pinMode(pin_rs, OUTPUT);
9d005aac:908400da lbua0,218(a0)

9d005ab0 <.LVL19>:
9d005ab0:0f40227f jal9d0089fc <.LFE181>
9d005ab4:24050001 lia1,1

9d005ab8 <.LVL20>:
    pinMode(pin_cs, OUTPUT);
9d005ab8:920400dd lbua0,221(s0)
9d005abc:0f40227f jal9d0089fc <.LFE181>
9d005ac0:24050001 lia1,1

9d005ac4 <.LVL21>:
    pinMode(pin_rd, OUTPUT);
9d005ac4:920400db lbua0,219(s0)
9d005ac8:0f40227f jal9d0089fc <.LFE181>
9d005acc:24050001 lia1,1

9d005ad0 <.LVL22>:
    pinMode(pin_wr, OUTPUT);
9d005ad0:920400dc lbua0,220(s0)
9d005ad4:0f40227f jal9d0089fc <.LFE181>
9d005ad8:24050001 lia1,1

9d005adc <.LVL23>:
    pinMode(pin_reset, OUTPUT);
9d005adc:920400de lbua0,222(s0)
9d005ae0:0f40227f jal9d0089fc <.LFE181>
9d005ae4:24050001 lia1,1

9d005ae8 <.LVL24>:
    pinMode(pin_d0, OUTPUT);
9d005ae8:920400df lbua0,223(s0)
9d005aec:0f40227f jal9d0089fc <.LFE181>
9d005af0:24050001 lia1,1

9d005af4 <.LVL25>:
    pinMode(pin_d1, OUTPUT);
9d005af4:920400e0 lbua0,224(s0)
9d005af8:0f40227f jal9d0089fc <.LFE181>
9d005afc:24050001 lia1,1

9d005b00 <.LVL26>:
    pinMode(pin_d2, OUTPUT);
9d005b00:920400e1 lbua0,225(s0)
9d005b04:0f40227f jal9d0089fc <.LFE181>
9d005b08:24050001 lia1,1

9d005b0c <.LVL27>:
    pinMode(pin_d3, OUTPUT);
9d005b0c:920400e2 lbua0,226(s0)
9d005b10:0f40227f jal9d0089fc <.LFE181>
9d005b14:24050001 lia1,1

9d005b18 <.LVL28>:
    pinMode(pin_d4, OUTPUT);
9d005b18:920400e3 lbua0,227(s0)
9d005b1c:0f40227f jal9d0089fc <.LFE181>
9d005b20:24050001 lia1,1

9d005b24 <.LVL29>:
    pinMode(pin_d5, OUTPUT);
9d005b24:920400e4 lbua0,228(s0)
9d005b28:0f40227f jal9d0089fc <.LFE181>
9d005b2c:24050001 lia1,1

9d005b30 <.LVL30>:
    pinMode(pin_d6, OUTPUT);
9d005b30:920400e5 lbua0,229(s0)
9d005b34:0f40227f jal9d0089fc <.LFE181>
9d005b38:24050001 lia1,1

9d005b3c <.LVL31>:
    pinMode(pin_d7, OUTPUT);
9d005b3c:920400e6 lbua0,230(s0)
9d005b40:0f40227f jal9d0089fc <.LFE181>
9d005b44:24050001 lia1,1

9d005b48 <.LVL32>:
    pinMode(pin_d8, OUTPUT);
9d005b48:920400e7 lbua0,231(s0)
9d005b4c:0f40227f jal9d0089fc <.LFE181>
9d005b50:24050001 lia1,1

9d005b54 <.LVL33>:
    pinMode(pin_d9, OUTPUT);
9d005b54:920400e8 lbua0,232(s0)
9d005b58:0f40227f jal9d0089fc <.LFE181>
9d005b5c:24050001 lia1,1

9d005b60 <.LVL34>:
    pinMode(pin_d10, OUTPUT);
9d005b60:920400e9 lbua0,233(s0)
9d005b64:0f40227f jal9d0089fc <.LFE181>
9d005b68:24050001 lia1,1

9d005b6c <.LVL35>:
    pinMode(pin_d11, OUTPUT);
9d005b6c:920400ea lbua0,234(s0)
9d005b70:0f40227f jal9d0089fc <.LFE181>
9d005b74:24050001 lia1,1

9d005b78 <.LVL36>:
    pinMode(pin_d12, OUTPUT);
9d005b78:920400eb lbua0,235(s0)
9d005b7c:0f40227f jal9d0089fc <.LFE181>
9d005b80:24050001 lia1,1

9d005b84 <.LVL37>:
    pinMode(pin_d13, OUTPUT);
9d005b84:920400ec lbua0,236(s0)
9d005b88:0f40227f jal9d0089fc <.LFE181>
9d005b8c:24050001 lia1,1

9d005b90 <.LVL38>:
    pinMode(pin_d14, OUTPUT);
9d005b90:920400ed lbua0,237(s0)
9d005b94:0f40227f jal9d0089fc <.LFE181>
9d005b98:24050001 lia1,1

9d005b9c <.LVL39>:
    pinMode(pin_d15, OUTPUT);
9d005b9c:920400ee lbua0,238(s0)
9d005ba0:0f40227f jal9d0089fc <.LFE181>
9d005ba4:24050001 lia1,1

9d005ba8 <.LVL40>:

    port_rs = getPortInformation(pin_rs, &mask_rs);
9d005ba8:02002021 movea0,s0
9d005bac:920500da lbua1,218(s0)
9d005bb0:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005bb4:2606013c addiua2,s0,316

9d005bb8 <.LVL41>:
9d005bb8:ae0200f0 swv0,240(s0)
    port_rd = getPortInformation(pin_rd, &mask_rd);
9d005bbc:02002021 movea0,s0
9d005bc0:920500db lbua1,219(s0)
9d005bc4:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005bc8:26060140 addiua2,s0,320

9d005bcc <.LVL42>:
9d005bcc:ae0200f4 swv0,244(s0)
    port_wr = getPortInformation(pin_wr, &mask_wr);
9d005bd0:02002021 movea0,s0
9d005bd4:920500dc lbua1,220(s0)
9d005bd8:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005bdc:26060144 addiua2,s0,324

9d005be0 <.LVL43>:
9d005be0:ae0200f8 swv0,248(s0)
    port_d0 = getPortInformation(pin_d0, &mask_d0);
9d005be4:02002021 movea0,s0
9d005be8:920500df lbua1,223(s0)
9d005bec:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005bf0:26060148 addiua2,s0,328

9d005bf4 <.LVL44>:
9d005bf4:ae0200fc swv0,252(s0)
    port_d1 = getPortInformation(pin_d1, &mask_d1);
9d005bf8:02002021 movea0,s0
9d005bfc:920500e0 lbua1,224(s0)
9d005c00:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c04:2606014c addiua2,s0,332

9d005c08 <.LVL45>:
9d005c08:ae020100 swv0,256(s0)
    port_d2 = getPortInformation(pin_d2, &mask_d2);
9d005c0c:02002021 movea0,s0
9d005c10:920500e1 lbua1,225(s0)
9d005c14:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c18:26060150 addiua2,s0,336

9d005c1c <.LVL46>:
9d005c1c:ae020104 swv0,260(s0)
    port_d3 = getPortInformation(pin_d3, &mask_d3);
9d005c20:02002021 movea0,s0
9d005c24:920500e2 lbua1,226(s0)
9d005c28:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c2c:26060154 addiua2,s0,340

9d005c30 <.LVL47>:
9d005c30:ae020108 swv0,264(s0)
    port_d4 = getPortInformation(pin_d4, &mask_d4);
9d005c34:02002021 movea0,s0
9d005c38:920500e3 lbua1,227(s0)
9d005c3c:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c40:26060158 addiua2,s0,344

9d005c44 <.LVL48>:
9d005c44:ae02010c swv0,268(s0)
    port_d5 = getPortInformation(pin_d5, &mask_d5);
9d005c48:02002021 movea0,s0
9d005c4c:920500e4 lbua1,228(s0)
9d005c50:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c54:2606015c addiua2,s0,348

9d005c58 <.LVL49>:
9d005c58:ae020110 swv0,272(s0)
    port_d6 = getPortInformation(pin_d6, &mask_d6);
9d005c5c:02002021 movea0,s0
9d005c60:920500e5 lbua1,229(s0)
9d005c64:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c68:26060160 addiua2,s0,352

9d005c6c <.LVL50>:
9d005c6c:ae020114 swv0,276(s0)
    port_d7 = getPortInformation(pin_d7, &mask_d7);
9d005c70:02002021 movea0,s0
9d005c74:920500e6 lbua1,230(s0)
9d005c78:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c7c:26060164 addiua2,s0,356

9d005c80 <.LVL51>:
9d005c80:ae020118 swv0,280(s0)
    port_d8 = getPortInformation(pin_d8, &mask_d8);
9d005c84:02002021 movea0,s0
9d005c88:920500e7 lbua1,231(s0)
9d005c8c:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005c90:26060168 addiua2,s0,360

9d005c94 <.LVL52>:
9d005c94:ae02011c swv0,284(s0)
    port_d9 = getPortInformation(pin_d9, &mask_d9);
9d005c98:02002021 movea0,s0
9d005c9c:920500e8 lbua1,232(s0)
9d005ca0:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005ca4:2606016c addiua2,s0,364

9d005ca8 <.LVL53>:
9d005ca8:ae020120 swv0,288(s0)
    port_d10 = getPortInformation(pin_d10, &mask_d10);
9d005cac:02002021 movea0,s0
9d005cb0:920500e9 lbua1,233(s0)
9d005cb4:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005cb8:26060170 addiua2,s0,368

9d005cbc <.LVL54>:
9d005cbc:ae020124 swv0,292(s0)
    port_d11 = getPortInformation(pin_d11, &mask_d11);
9d005cc0:02002021 movea0,s0
9d005cc4:920500ea lbua1,234(s0)
9d005cc8:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005ccc:26060174 addiua2,s0,372

9d005cd0 <.LVL55>:
9d005cd0:ae020128 swv0,296(s0)
    port_d12 = getPortInformation(pin_d12, &mask_d12);
9d005cd4:02002021 movea0,s0
9d005cd8:920500eb lbua1,235(s0)
9d005cdc:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005ce0:26060178 addiua2,s0,376

9d005ce4 <.LVL56>:
9d005ce4:ae02012c swv0,300(s0)
    port_d13 = getPortInformation(pin_d13, &mask_d13);
9d005ce8:02002021 movea0,s0
9d005cec:920500ec lbua1,236(s0)
9d005cf0:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005cf4:2606017c addiua2,s0,380

9d005cf8 <.LVL57>:
9d005cf8:ae020130 swv0,304(s0)
    port_d14 = getPortInformation(pin_d14, &mask_d14);
9d005cfc:02002021 movea0,s0
9d005d00:920500ed lbua1,237(s0)
9d005d04:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005d08:26060180 addiua2,s0,384

9d005d0c <.LVL58>:
9d005d0c:ae020134 swv0,308(s0)
    port_d15 = getPortInformation(pin_d15, &mask_d15);
9d005d10:02002021 movea0,s0
9d005d14:920500ee lbua1,238(s0)
9d005d18:0f402db9 jal9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>
9d005d1c:26060184 addiua2,s0,388

9d005d20 <.LVL59>:
9d005d20:ae020138 swv0,312(s0)

    digitalWrite(pin_rs, HIGH);
9d005d24:920400da lbua0,218(s0)
9d005d28:0f402778 jal9d009de0 <.LFE170>
9d005d2c:24050001 lia1,1

9d005d30 <.LVL60>:
    digitalWrite(pin_cs, HIGH);
9d005d30:920400dd lbua0,221(s0)
9d005d34:0f402778 jal9d009de0 <.LFE170>
9d005d38:24050001 lia1,1

9d005d3c <.LVL61>:
    digitalWrite(pin_rd, HIGH);
9d005d3c:920400db lbua0,219(s0)
9d005d40:0f402778 jal9d009de0 <.LFE170>
9d005d44:24050001 lia1,1

9d005d48 <.LVL62>:
    digitalWrite(pin_wr, HIGH);
9d005d48:920400dc lbua0,220(s0)
9d005d4c:0f402778 jal9d009de0 <.LFE170>
9d005d50:24050001 lia1,1

9d005d54 <.LVL63>:
    digitalWrite(pin_reset, HIGH);
9d005d54:920400de lbua0,222(s0)
9d005d58:0f402778 jal9d009de0 <.LFE170>
9d005d5c:24050001 lia1,1

9d005d60 <.LVL64>:
    delay(100);
9d005d60:0f402e47 jal9d00b91c <.LFE87>
9d005d64:24040064 lia0,100

9d005d68 <.LVL65>:
    digitalWrite(pin_reset, LOW);
9d005d68:920400de lbua0,222(s0)
9d005d6c:0f402778 jal9d009de0 <.LFE170>
9d005d70:00002821 movea1,zero

9d005d74 <.LVL66>:
    delay(100);
9d005d74:0f402e47 jal9d00b91c <.LFE87>
9d005d78:24040064 lia0,100

9d005d7c <.LVL67>:
    digitalWrite(pin_reset, HIGH);
9d005d7c:920400de lbua0,222(s0)
9d005d80:0f402778 jal9d009de0 <.LFE170>
9d005d84:24050001 lia1,1

9d005d88 <.LVL68>:
    delay(100);
9d005d88:0f402e47 jal9d00b91c <.LFE87>
9d005d8c:24040064 lia0,100

9d005d90 <.LVL69>:
    digitalWrite(pin_cs, LOW);
9d005d90:920400dd lbua0,221(s0)
9d005d94:0f402778 jal9d009de0 <.LFE170>
9d005d98:00002821 movea1,zero

9d005d9c <.LVL70>:

    startDisplay();
9d005d9c:02002021 movea0,s0
}
9d005da0:8fbf0014 lwra,20(sp)
9d005da4:8fb00010 lws0,16(sp)

9d005da8 <.LVL71>:
    delay(100);
    digitalWrite(pin_reset, HIGH);
    delay(100);
    digitalWrite(pin_cs, LOW);

    startDisplay();
9d005da8:0b401134 j9d0044d0 <_ZN7SSD128912startDisplayEv>
9d005dac:27bd0018 addiusp,sp,24

Disassembly of section .text._ZN11DisplayCore12fillTriangleEiiiiiit:

9d005db0 <L0>:
 *
 *  Example:
 *
 *      tft.fillTriangle(40, 10, 60, 30, 20, 30, Color::Cyan);
 */
void DisplayCore::fillTriangle ( int x0, int y0, int x1, int y1, int x2, int y2, color_t color) {
9d005db0:27bdffa0 addiusp,sp,-96
9d005db4:afbf005c swra,92(sp)
9d005db8:afbe0058 sws8,88(sp)
9d005dbc:afb70054 sws7,84(sp)
9d005dc0:afb60050 sws6,80(sp)
9d005dc4:afb5004c sws5,76(sp)
9d005dc8:afb40048 sws4,72(sp)
9d005dcc:afb30044 sws3,68(sp)
9d005dd0:afb20040 sws2,64(sp)
9d005dd4:afb1003c sws1,60(sp)
9d005dd8:afb00038 sws0,56(sp)
9d005ddc:0080a021 moves4,a0
9d005de0:00a08021 moves0,a1
9d005de4:00c09821 moves3,a2
9d005de8:00e08821 moves1,a3
9d005dec:8fb20070 lws2,112(sp)
9d005df0:8fb60074 lws6,116(sp)
9d005df4:8fb70078 lws7,120(sp)

9d005df8 <.LBB27>:
    int a, b, y, last;

    startBuffer();
9d005df8:8c820000 lwv0,0(a0)
9d005dfc:8c4200c4 lwv0,196(v0)
9d005e00:0040f809 jalrv0
9d005e04:97be007c lhus8,124(sp)

9d005e08 <.LVL11>:

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
9d005e08:0253102a sltv0,s2,s3
9d005e0c:10400008 beqzv0,9d005e30 <.LBE28+0x4>
9d005e10:02f2102a sltv0,s7,s2
9d005e14:02601021 movev0,s3
9d005e18:02409821 moves3,s2

9d005e1c <.LVL12>:
9d005e1c:00409021 moves2,v0
9d005e20:02001021 movev0,s0

9d005e24 <.LBB28>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d005e24:02208021 moves0,s1

9d005e28 <.LVL14>:
    i1 = i2;
9d005e28:00408821 moves1,v0

9d005e2c <.LBE28>:
        swap(y0, y1); swap(x0, x1);
    }
    if (y1 > y2) {
9d005e2c:02f2102a sltv0,s7,s2
9d005e30:10400008 beqzv0,9d005e54 <.LBE30+0x4>
9d005e34:0253102a sltv0,s2,s3
9d005e38:02401021 movev0,s2
9d005e3c:02e09021 moves2,s7

9d005e40 <.LVL16>:
9d005e40:0040b821 moves7,v0
9d005e44:02201021 movev0,s1

9d005e48 <.LBB30>:
9d005e48:02c08821 moves1,s6

9d005e4c <.LVL18>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d005e4c:0040b021 moves6,v0

9d005e50 <.LBE30>:
        swap(y2, y1); swap(x2, x1);
    }
    if (y0 > y1) {
9d005e50:0253102a sltv0,s2,s3
9d005e54:10400006 beqzv0,9d005e70 <.LBE32>
9d005e58:02601021 movev0,s3
9d005e5c:02409821 moves3,s2

9d005e60 <.LVL20>:
9d005e60:00409021 moves2,v0

9d005e64 <.LVL21>:
9d005e64:02001021 movev0,s0

9d005e68 <.LBB32>:
9d005e68:02208021 moves0,s1

9d005e6c <.LVL23>:
    i1 = i2;
9d005e6c:00408821 moves1,v0

9d005e70 <.LBE32>:
        swap(y0, y1); swap(x0, x1);
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
9d005e70:16770018 bnes3,s7,9d005ed4 <.LBB34>
9d005e74:02575826 xort3,s2,s7

9d005e78 <.LVL25>:
        a = b = x0;
        if(x1 < a)      a = x1;
9d005e78:0230102a sltv0,s1,s0
9d005e7c:14400005 bnezv0,9d005e94 <.LVL27+0x4>
9d005e80:02d1102a sltv0,s6,s1
9d005e84:02201021 movev0,s1
9d005e88:02008821 moves1,s0

9d005e8c <.LVL26>:
9d005e8c:00408021 moves0,v0

9d005e90 <.LVL27>:
        else if(x1 > b) b = x1;
        if(x2 < a)      a = x2;
9d005e90:02d1102a sltv0,s6,s1
9d005e94:14400003 bnezv0,9d005ea4 <.LVL29>
9d005e98:0216102a sltv0,s0,s6
9d005e9c:02c2800b movns0,s6,v0

9d005ea0 <.LVL28>:
9d005ea0:0220b021 moves6,s1

9d005ea4 <.LVL29>:
        else if(x2 > b) b = x2;
        drawHorizontalLine(a, y0, b-a+1, color);
9d005ea4:8e820000 lwv0,0(s4)
9d005ea8:02163823 subua3,s0,s6
9d005eac:afbe0010 sws8,16(sp)
9d005eb0:8c42008c lwv0,140(v0)
9d005eb4:02802021 movea0,s4
9d005eb8:02c02821 movea1,s6
9d005ebc:02603021 movea2,s3
9d005ec0:0040f809 jalrv0
9d005ec4:24e70001 addiua3,a3,1

9d005ec8 <.LVL30>:
        endBuffer();
9d005ec8:8e820000 lwv0,0(s4)

9d005ecc <.LBE27>:
9d005ecc:0b401812 j9d006048 <.LVL51>
9d005ed0:8c5900c8 lwt9,200(v0)

9d005ed4 <.LBB34>:
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
    else         last = y1-1; // Skip it
9d005ed4:000b582b sltut3,zero,t3
9d005ed8:024b5823 subut3,s2,t3

9d005edc <.LVL32>:
9d005edc:02306023 subut4,s1,s0
9d005ee0:02d04023 subut0,s6,s0

    for(y=y0; y<=last; y++) {
9d005ee4:0260a821 moves5,s3
9d005ee8:00001821 movev1,zero
9d005eec:00001021 movev0,zero
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
9d005ef0:02534823 subut1,s2,s3
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
9d005ef4:02f35023 subut2,s7,s3

9d005ef8 <.LVL33>:
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
    else         last = y1-1; // Skip it

    for(y=y0; y<=last; y++) {
9d005ef8:0175202a slta0,t3,s5
9d005efc:54800029 bnezla0,9d005fa4 <.LVL39+0x2c>
9d005f00:02d11823 subuv1,s6,s1
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
9d005f04:0049001a divzero,v0,t1
9d005f08:012001f4 teqt1,zero,0x7
9d005f0c:00003812 mfloa3
9d005f10:02073821 addua3,s0,a3

9d005f14 <.LVL34>:
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
9d005f14:006a001a divzero,v1,t2
9d005f18:014001f4 teqt2,zero,0x7
9d005f1c:00002812 mfloa1
9d005f20:02052821 addua1,s0,a1

9d005f24 <.LVL35>:
        if(a > b) swap(a,b);
9d005f24:00a7202a slta0,a1,a3
9d005f28:54800005 bnezla0,9d005f40 <.LVL37+0x4>
9d005f2c:8e840000 lwa0,0(s4)
9d005f30:00a02021 movea0,a1
9d005f34:00e02821 movea1,a3

9d005f38 <.LVL36>:
9d005f38:00803821 movea3,a0

9d005f3c <.LVL37>:
        drawHorizontalLine(a, y, b-a+1, color);
9d005f3c:8e840000 lwa0,0(s4)
9d005f40:00e53823 subua3,a3,a1

9d005f44 <.LVL38>:
9d005f44:afbe0010 sws8,16(sp)
9d005f48:8c8d008c lwt5,140(a0)
9d005f4c:02802021 movea0,s4
9d005f50:02a03021 movea2,s5
9d005f54:24e70001 addiua3,a3,1
9d005f58:afa20028 swv0,40(sp)
9d005f5c:afa30030 swv1,48(sp)
9d005f60:afa8002c swt0,44(sp)
9d005f64:afa90020 swt1,32(sp)
9d005f68:afaa0024 swt2,36(sp)
9d005f6c:afab0018 swt3,24(sp)
9d005f70:01a0f809 jalrt5
9d005f74:afac001c swt4,28(sp)

9d005f78 <.LVL39>:
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
    else         last = y1-1; // Skip it

    for(y=y0; y<=last; y++) {
9d005f78:26b50001 addius5,s5,1
9d005f7c:8fa20028 lwv0,40(sp)
9d005f80:8fac001c lwt4,28(sp)
9d005f84:004c1021 adduv0,v0,t4
9d005f88:8fa30030 lwv1,48(sp)
9d005f8c:8fa8002c lwt0,44(sp)
9d005f90:00681821 adduv1,v1,t0
9d005f94:8fab0018 lwt3,24(sp)
9d005f98:8faa0024 lwt2,36(sp)
9d005f9c:0b4017be j9d005ef8 <.LVL33>
9d005fa0:8fa90020 lwt1,32(sp)
9d005fa4:02b21023 subuv0,s5,s2
9d005fa8:70431002 mulv0,v0,v1
9d005fac:02b3b023 subus6,s5,s3

9d005fb0 <.LVL41>:
9d005fb0:72c8b002 muls6,s6,t0
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    for(; y<=y2; y++) {
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
9d005fb4:02f29023 subus2,s7,s2

9d005fb8 <.LVL42>:
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
9d005fb8:02f39823 subus3,s7,s3

9d005fbc <.LVL43>:
        drawHorizontalLine(a, y, b-a+1, color);
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    for(; y<=y2; y++) {
9d005fbc:02f5282a slta1,s7,s5
9d005fc0:14a00020 bneza1,9d006044 <.LVL49+0x1c>
9d005fc4:8e840000 lwa0,0(s4)
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
9d005fc8:0052001a divzero,v0,s2
9d005fcc:024001f4 teqs2,zero,0x7
9d005fd0:00003812 mfloa3
9d005fd4:02273821 addua3,s1,a3

9d005fd8 <.LVL44>:
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
9d005fd8:02d3001a divzero,s6,s3
9d005fdc:026001f4 teqs3,zero,0x7
9d005fe0:00002812 mfloa1
9d005fe4:02052821 addua1,s0,a1

9d005fe8 <.LVL45>:
        if(a > b) swap(a,b);
9d005fe8:00a7302a slta2,a1,a3
9d005fec:54c00005 bnezla2,9d006004 <.LVL48>
9d005ff0:00e53823 subua3,a3,a1
9d005ff4:00a03021 movea2,a1
9d005ff8:00e02821 movea1,a3

9d005ffc <.LVL46>:
9d005ffc:00c03821 movea3,a2

9d006000 <.LVL47>:
        drawHorizontalLine(a, y, b-a+1, color);
9d006000:00e53823 subua3,a3,a1

9d006004 <.LVL48>:
9d006004:afbe0010 sws8,16(sp)
9d006008:8c89008c lwt1,140(a0)
9d00600c:02802021 movea0,s4
9d006010:02a03021 movea2,s5
9d006014:24e70001 addiua3,a3,1
9d006018:afa20028 swv0,40(sp)
9d00601c:afa30030 swv1,48(sp)
9d006020:0120f809 jalrt1
9d006024:afa8002c swt0,44(sp)

9d006028 <.LVL49>:
        drawHorizontalLine(a, y, b-a+1, color);
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    for(; y<=y2; y++) {
9d006028:26b50001 addius5,s5,1
9d00602c:8fa20028 lwv0,40(sp)
9d006030:8fa30030 lwv1,48(sp)
9d006034:00431021 adduv0,v0,v1
9d006038:8fa8002c lwt0,44(sp)
9d00603c:0b4017ef j9d005fbc <.LVL43>
9d006040:02c8b021 addus6,s6,t0
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        if(a > b) swap(a,b);
        drawHorizontalLine(a, y, b-a+1, color);
    }
    endBuffer();
9d006044:8c9900c8 lwt9,200(a0)

9d006048 <.LVL51>:
9d006048:02802021 movea0,s4

9d00604c <.LBE34>:
}
9d00604c:8fbf005c lwra,92(sp)
9d006050:8fbe0058 lws8,88(sp)
9d006054:8fb70054 lws7,84(sp)

9d006058 <.LVL52>:
9d006058:8fb60050 lws6,80(sp)
9d00605c:8fb5004c lws5,76(sp)
9d006060:8fb40048 lws4,72(sp)

9d006064 <.LVL53>:
9d006064:8fb30044 lws3,68(sp)
9d006068:8fb20040 lws2,64(sp)
9d00606c:8fb1003c lws1,60(sp)
9d006070:8fb00038 lws0,56(sp)

9d006074 <.LBB35>:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        if(a > b) swap(a,b);
        drawHorizontalLine(a, y, b-a+1, color);
    }
    endBuffer();
9d006074:03200008 jrt9
9d006078:27bd0060 addiusp,sp,96

Disassembly of section .text._ZN11DisplayCore10fillBezierEiiiiiiiiit:

9d00607c <_ZN11DisplayCore10fillBezierEiiiiiiiiit>:
    int x1, int y1,
    int x2, int y2,
    int x3, int y3,
    int resolution,
    color_t color
) {
9d00607c:27bdff40 addiusp,sp,-192
9d006080:afbf005c swra,92(sp)
9d006084:afbe0058 sws8,88(sp)
9d006088:afb70054 sws7,84(sp)
9d00608c:afb60050 sws6,80(sp)
9d006090:afb5004c sws5,76(sp)
9d006094:afb40048 sws4,72(sp)
9d006098:afb30044 sws3,68(sp)
9d00609c:afb20040 sws2,64(sp)
9d0060a0:afb1003c sws1,60(sp)
9d0060a4:afb00038 sws0,56(sp)
9d0060a8:f7be00b0 sdc1$f30,176(sp)
9d0060ac:f7bd00a8 sdc1$f29,168(sp)
9d0060b0:f7bc00a0 sdc1$f28,160(sp)
9d0060b4:f7bb0098 sdc1$f27,152(sp)
9d0060b8:f7ba0090 sdc1$f26,144(sp)
9d0060bc:f7b90088 sdc1$f25,136(sp)
9d0060c0:f7b80080 sdc1$f24,128(sp)
9d0060c4:f7b70078 sdc1$f23,120(sp)
9d0060c8:f7b60070 sdc1$f22,112(sp)
9d0060cc:f7b50068 sdc1$f21,104(sp)
9d0060d0:f7b40060 sdc1$f20,96(sp)
9d0060d4:0080b821 moves7,a0
9d0060d8:00a08821 moves1,a1
9d0060dc:00c08021 moves0,a2
9d0060e0:00e09821 moves3,a3
9d0060e4:8fa200d0 lwv0,208(sp)
9d0060e8:afa20020 swv0,32(sp)
9d0060ec:8fa200d4 lwv0,212(sp)
9d0060f0:afa20024 swv0,36(sp)
9d0060f4:8fb600d8 lws6,216(sp)
9d0060f8:8fb400dc lws4,220(sp)
9d0060fc:8fb500e0 lws5,224(sp)
9d006100:8fbe00e4 lws8,228(sp)

9d006104 <.LBB5>:

    startBuffer();
9d006104:8c820000 lwv0,0(a0)
9d006108:8c4200c4 lwv0,196(v0)
9d00610c:0040f809 jalrv0
9d006110:97b200e8 lhus2,232(sp)

9d006114 <.LVL26>:

    boolean first = true;
    double points = 1.0/(double)resolution;
9d006114:449e0800 mtc1s8,$f1
9d006118:46800821 cvt.d.w$f0,$f1
9d00611c:3c029d01 luiv0,0x9d01
9d006120:d45ac260 ldc1$f26,-15776(v0)
9d006124:4620d743 div.d$f29,$f26,$f0

9d006128 <.LVL27>:
    double t = 0.0, sx = 0, sy = 0;
9d006128:00003021 movea2,zero
9d00612c:00003821 movea3,zero
9d006130:4486c800 mtc1a2,$f25
9d006134:44e7c800 mthc1a3,$f25
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
9d006138:4486a000 mtc1a2,$f20
9d00613c:44e7a000 mthc1a3,$f20
    color_t color
) {

    startBuffer();

    boolean first = true;
9d006140:241e0001 lis8,1
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d006144:3c029d01 luiv0,0x9d01
9d006148:d456c268 ldc1$f22,-15768(v0)
    double points = 1.0/(double)resolution;
    double t = 0.0, sx = 0, sy = 0;
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
9d00614c:4620d6c6 mov.d$f27,$f26

9d006150 <.LVL28>:
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d006150:4634d601 sub.d$f24,$f26,$f20
9d006154:4620c306 mov.d$f12,$f24
9d006158:4620b386 mov.d$f14,$f22
9d00615c:afa60028 swa2,40(sp)
9d006160:0f4015c2 jal9d005708 <.LFE186>
9d006164:afa70030 swa3,48(sp)

9d006168 <.LVL29>:
9d006168:462005c6 mov.d$f23,$f0
9d00616c:4636a782 mul.d$f30,$f20,$f22
9d006170:4638c002 mul.d$f0,$f24,$f24
9d006174:4620f782 mul.d$f30,$f30,$f0
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d006178:4634a702 mul.d$f28,$f20,$f20
9d00617c:4636e702 mul.d$f28,$f28,$f22
9d006180:4638e702 mul.d$f28,$f28,$f24
9d006184:4620a306 mov.d$f12,$f20
9d006188:0f4015c2 jal9d005708 <.LFE186>
9d00618c:4620b386 mov.d$f14,$f22

9d006190 <.LVL30>:
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d006190:44930800 mtc1s3,$f1
9d006194:468008a1 cvt.d.w$f2,$f1
9d006198:4622f102 mul.d$f4,$f30,$f2
9d00619c:44910800 mtc1s1,$f1
9d0061a0:468008a1 cvt.d.w$f2,$f1
9d0061a4:4c82b8a1 madd.d$f2,$f4,$f23,$f2
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d0061a8:c7a10024 lwc1$f1,36(sp)
9d0061ac:46800921 cvt.d.w$f4,$f1
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d0061b0:4c44e121 madd.d$f4,$f2,$f28,$f4
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d0061b4:44940800 mtc1s4,$f1
9d0061b8:468008a1 cvt.d.w$f2,$f1
9d0061bc:4c820561 madd.d$f21,$f4,$f0,$f2

9d0061c0 <.LVL31>:
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
9d0061c0:4620c306 mov.d$f12,$f24
9d0061c4:0f4015c2 jal9d005708 <.LFE186>
9d0061c8:4620b386 mov.d$f14,$f22

9d0061cc <.LVL32>:
9d0061cc:46200606 mov.d$f24,$f0
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d0061d0:4620a306 mov.d$f12,$f20
9d0061d4:0f4015c2 jal9d005708 <.LFE186>
9d0061d8:4620b386 mov.d$f14,$f22

9d0061dc <.LVL33>:
    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
9d0061dc:c7a10020 lwc1$f1,32(sp)
9d0061e0:468008a1 cvt.d.w$f2,$f1
9d0061e4:4622f782 mul.d$f30,$f30,$f2
9d0061e8:44900800 mtc1s0,$f1
9d0061ec:468008a1 cvt.d.w$f2,$f1
9d0061f0:4fc2c7a1 madd.d$f30,$f30,$f24,$f2
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d0061f4:44960800 mtc1s6,$f1
9d0061f8:468008a1 cvt.d.w$f2,$f1
    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
9d0061fc:4fc2e7a1 madd.d$f30,$f30,$f28,$f2
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d006200:44950800 mtc1s5,$f1
9d006204:46800f21 cvt.d.w$f28,$f1
9d006208:4fdc0021 madd.d$f0,$f30,$f0,$f28

9d00620c <.LVL34>:

        if (!first) {
9d00620c:8fa60028 lwa2,40(sp)
9d006210:17c00014 bnezs8,9d006264 <.LVL37>
9d006214:8fa70030 lwa3,48(sp)
            fillTriangle(sx, sy, ex, ey, x0, y0, color);
9d006218:8ee20000 lwv0,0(s7)
9d00621c:4620004d trunc.w.d$f1,$f0
9d006220:e7a10010 swc1$f1,16(sp)
9d006224:afb10014 sws1,20(sp)
9d006228:afb00018 sws0,24(sp)
9d00622c:afb2001c sws2,28(sp)
9d006230:8c420028 lwv0,40(v0)
9d006234:02e02021 movea0,s7
9d006238:4620ce4d trunc.w.d$f25,$f25

9d00623c <.LVL35>:
9d00623c:4405c800 mfc1a1,$f25
9d006240:44860800 mtc1a2,$f1
9d006244:44e70800 mthc1a3,$f1
9d006248:4620084d trunc.w.d$f1,$f1
9d00624c:44060800 mfc1a2,$f1
9d006250:4620a84d trunc.w.d$f1,$f21
9d006254:44070800 mfc1a3,$f1
9d006258:0040f809 jalrv0
9d00625c:f7a00028 sdc1$f0,40(sp)

9d006260 <.LVL36>:
9d006260:d7a00028 ldc1$f0,40(sp)

9d006264 <.LVL37>:
    double points = 1.0/(double)resolution;
    double t = 0.0, sx = 0, sy = 0;
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
9d006264:463da500 add.d$f20,$f20,$f29
9d006268:463ba03c c.lt.d$f20,$f27
9d00626c:45000005 bc1f9d006284 <.LBB6>
9d006270:0000f021 moves8,zero
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d006274:44060000 mfc1a2,$f0
9d006278:44670000 mfhc1a3,$f0

9d00627c <.LBE5>:


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d00627c:0b401854 j9d006150 <.LVL28>
9d006280:4620ae46 mov.d$f25,$f21

9d006284 <.LBB6>:
        }
        first = false;
        sx = ex;
        sy = ey;
    }
    fillTriangle(x0, y0, sx, sy, x3, y3, color);
9d006284:8ee20000 lwv0,0(s7)
9d006288:4620000d trunc.w.d$f0,$f0

9d00628c <.LVL39>:
9d00628c:e7a00010 swc1$f0,16(sp)
9d006290:afb40014 sws4,20(sp)
9d006294:afb50018 sws5,24(sp)
9d006298:afb2001c sws2,28(sp)
9d00629c:8c420028 lwv0,40(v0)
9d0062a0:02e02021 movea0,s7
9d0062a4:02202821 movea1,s1
9d0062a8:02003021 movea2,s0
9d0062ac:4620ad4d trunc.w.d$f21,$f21

9d0062b0 <.LVL40>:
9d0062b0:0040f809 jalrv0
9d0062b4:4407a800 mfc1a3,$f21

9d0062b8 <.LVL41>:
    endBuffer();
9d0062b8:8ee20000 lwv0,0(s7)
9d0062bc:8c5900c8 lwt9,200(v0)
9d0062c0:02e02021 movea0,s7

9d0062c4 <.LBE6>:
}
9d0062c4:8fbf005c lwra,92(sp)
9d0062c8:8fbe0058 lws8,88(sp)
9d0062cc:8fb70054 lws7,84(sp)

9d0062d0 <.LVL42>:
9d0062d0:8fb60050 lws6,80(sp)
9d0062d4:8fb5004c lws5,76(sp)
9d0062d8:8fb40048 lws4,72(sp)
9d0062dc:8fb30044 lws3,68(sp)

9d0062e0 <.LVL43>:
9d0062e0:8fb20040 lws2,64(sp)
9d0062e4:8fb1003c lws1,60(sp)

9d0062e8 <.LVL44>:
9d0062e8:8fb00038 lws0,56(sp)

9d0062ec <.LVL45>:
9d0062ec:d7be00b0 ldc1$f30,176(sp)
9d0062f0:d7bd00a8 ldc1$f29,168(sp)

9d0062f4 <.LVL46>:
9d0062f4:d7bc00a0 ldc1$f28,160(sp)
9d0062f8:d7bb0098 ldc1$f27,152(sp)
9d0062fc:d7ba0090 ldc1$f26,144(sp)

9d006300 <.LVL47>:
9d006300:d7b90088 ldc1$f25,136(sp)
9d006304:d7b80080 ldc1$f24,128(sp)
9d006308:d7b70078 ldc1$f23,120(sp)
9d00630c:d7b60070 ldc1$f22,112(sp)
9d006310:d7b50068 ldc1$f21,104(sp)
9d006314:d7b40060 ldc1$f20,96(sp)

9d006318 <.LBB7>:
        first = false;
        sx = ex;
        sy = ey;
    }
    fillTriangle(x0, y0, sx, sy, x3, y3, color);
    endBuffer();
9d006318:03200008 jrt9
9d00631c:27bd00c0 addiusp,sp,192

Disassembly of section .text._ZN11DisplayCore10drawBezierEiiiiiiiiit:

9d006320 <_ZN11DisplayCore10drawBezierEiiiiiiiiit>:
    int x1, int y1,
    int x2, int y2,
    int x3, int y3,
    int resolution,
    color_t color
) {
9d006320:27bdff48 addiusp,sp,-184
9d006324:afbf0054 swra,84(sp)
9d006328:afbe0050 sws8,80(sp)
9d00632c:afb7004c sws7,76(sp)
9d006330:afb60048 sws6,72(sp)
9d006334:afb50044 sws5,68(sp)
9d006338:afb40040 sws4,64(sp)
9d00633c:afb3003c sws3,60(sp)
9d006340:afb20038 sws2,56(sp)
9d006344:afb10034 sws1,52(sp)
9d006348:afb00030 sws0,48(sp)
9d00634c:f7bf00a8 sdc1$f31,168(sp)
9d006350:f7be00a0 sdc1$f30,160(sp)
9d006354:f7bd0098 sdc1$f29,152(sp)
9d006358:f7bc0090 sdc1$f28,144(sp)
9d00635c:f7ba0088 sdc1$f26,136(sp)
9d006360:f7b90080 sdc1$f25,128(sp)
9d006364:f7b80078 sdc1$f24,120(sp)
9d006368:f7b70070 sdc1$f23,112(sp)
9d00636c:f7b60068 sdc1$f22,104(sp)
9d006370:f7b50060 sdc1$f21,96(sp)
9d006374:f7b40058 sdc1$f20,88(sp)
9d006378:0080b821 moves7,a0
9d00637c:00a0a021 moves4,a1
9d006380:00c09821 moves3,a2
9d006384:00e09021 moves2,a3
9d006388:8fa200c8 lwv0,200(sp)
9d00638c:afa20018 swv0,24(sp)
9d006390:8fa200cc lwv0,204(sp)
9d006394:afa2001c swv0,28(sp)
9d006398:8fb600d0 lws6,208(sp)
9d00639c:8fb000d4 lws0,212(sp)
9d0063a0:8fb500d8 lws5,216(sp)
9d0063a4:8fbe00dc lws8,220(sp)

9d0063a8 <.LBB2>:
    startBuffer();
9d0063a8:8c820000 lwv0,0(a0)
9d0063ac:8c4200c4 lwv0,196(v0)
9d0063b0:0040f809 jalrv0
9d0063b4:97b100e0 lhus1,224(sp)

9d0063b8 <.LVL1>:

    boolean first = true;
    double points = 1.0/(double)resolution;
9d0063b8:449e0800 mtc1s8,$f1
9d0063bc:46800821 cvt.d.w$f0,$f1
9d0063c0:3c029d01 luiv0,0x9d01
9d0063c4:d458c260 ldc1$f24,-15776(v0)
9d0063c8:4620c7c3 div.d$f31,$f24,$f0

9d0063cc <.LVL2>:
    double t = 0.0, sx = 0, sy = 0;
9d0063cc:00003021 movea2,zero
9d0063d0:00003821 movea3,zero
9d0063d4:4486e800 mtc1a2,$f29
9d0063d8:44e7e800 mthc1a3,$f29
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
9d0063dc:4486a000 mtc1a2,$f20
9d0063e0:44e7a000 mthc1a3,$f20
    int resolution,
    color_t color
) {
    startBuffer();

    boolean first = true;
9d0063e4:241e0001 lis8,1
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d0063e8:3c029d01 luiv0,0x9d01
9d0063ec:d456c268 ldc1$f22,-15768(v0)
    double points = 1.0/(double)resolution;
    double t = 0.0, sx = 0, sy = 0;
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
9d0063f0:4620c786 mov.d$f30,$f24

9d0063f4 <.LVL3>:
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d0063f4:4634c541 sub.d$f21,$f24,$f20
9d0063f8:4620ab06 mov.d$f12,$f21
9d0063fc:4620b386 mov.d$f14,$f22
9d006400:afa60020 swa2,32(sp)
9d006404:0f4015c2 jal9d005708 <.LFE186>
9d006408:afa70028 swa3,40(sp)

9d00640c <.LVL4>:
9d00640c:46200646 mov.d$f25,$f0
9d006410:4636a702 mul.d$f28,$f20,$f22
9d006414:4635a802 mul.d$f0,$f21,$f21
9d006418:4620e702 mul.d$f28,$f28,$f0
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d00641c:4634a682 mul.d$f26,$f20,$f20
9d006420:4636d682 mul.d$f26,$f26,$f22
9d006424:4635d682 mul.d$f26,$f26,$f21
9d006428:4620a306 mov.d$f12,$f20
9d00642c:0f4015c2 jal9d005708 <.LFE186>
9d006430:4620b386 mov.d$f14,$f22

9d006434 <.LVL5>:
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d006434:44920800 mtc1s2,$f1
9d006438:468008a1 cvt.d.w$f2,$f1
9d00643c:4622e102 mul.d$f4,$f28,$f2
9d006440:44940800 mtc1s4,$f1
9d006444:468008a1 cvt.d.w$f2,$f1
9d006448:4c82c8a1 madd.d$f2,$f4,$f25,$f2
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d00644c:c7a1001c lwc1$f1,28(sp)
9d006450:46800921 cvt.d.w$f4,$f1
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
9d006454:4c44d121 madd.d$f4,$f2,$f26,$f4
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d006458:44900800 mtc1s0,$f1
9d00645c:468008a1 cvt.d.w$f2,$f1
9d006460:4c8205e1 madd.d$f23,$f4,$f0,$f2

9d006464 <.LVL6>:
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
9d006464:4620ab06 mov.d$f12,$f21
9d006468:0f4015c2 jal9d005708 <.LFE186>
9d00646c:4620b386 mov.d$f14,$f22

9d006470 <.LVL7>:
9d006470:46200546 mov.d$f21,$f0
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d006474:4620a306 mov.d$f12,$f20
9d006478:0f4015c2 jal9d005708 <.LFE186>
9d00647c:4620b386 mov.d$f14,$f22

9d006480 <.LVL8>:
    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
9d006480:c7a10018 lwc1$f1,24(sp)
9d006484:468008a1 cvt.d.w$f2,$f1
9d006488:4622e702 mul.d$f28,$f28,$f2
9d00648c:44930800 mtc1s3,$f1
9d006490:468008a1 cvt.d.w$f2,$f1
9d006494:4f82af21 madd.d$f28,$f28,$f21,$f2
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d006498:44960800 mtc1s6,$f1
9d00649c:468008a1 cvt.d.w$f2,$f1
    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
9d0064a0:4f82d721 madd.d$f28,$f28,$f26,$f2
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d0064a4:44950800 mtc1s5,$f1
9d0064a8:46800ea1 cvt.d.w$f26,$f1
9d0064ac:4f9a0021 madd.d$f0,$f28,$f0,$f26

9d0064b0 <.LVL9>:

        if (!first) {
9d0064b0:8fa60020 lwa2,32(sp)
9d0064b4:17c00012 bnezs8,9d006500 <.LVL12>
9d0064b8:8fa70028 lwa3,40(sp)
            drawLine(sx, sy, ex, ey, color);
9d0064bc:8ee20000 lwv0,0(s7)
9d0064c0:4620004d trunc.w.d$f1,$f0
9d0064c4:e7a10010 swc1$f1,16(sp)
9d0064c8:afb10014 sws1,20(sp)
9d0064cc:8c420010 lwv0,16(v0)
9d0064d0:02e02021 movea0,s7
9d0064d4:4620ef4d trunc.w.d$f29,$f29

9d0064d8 <.LVL10>:
9d0064d8:4405e800 mfc1a1,$f29
9d0064dc:44860800 mtc1a2,$f1
9d0064e0:44e70800 mthc1a3,$f1
9d0064e4:4620084d trunc.w.d$f1,$f1
9d0064e8:44060800 mfc1a2,$f1
9d0064ec:4620b84d trunc.w.d$f1,$f23
9d0064f0:44070800 mfc1a3,$f1
9d0064f4:0040f809 jalrv0
9d0064f8:f7a00020 sdc1$f0,32(sp)

9d0064fc <.LVL11>:
9d0064fc:d7a00020 ldc1$f0,32(sp)

9d006500 <.LVL12>:
    double points = 1.0/(double)resolution;
    double t = 0.0, sx = 0, sy = 0;
    double ex, ey;


    for (t = 0.0; t < 1.0; t += points)
9d006500:463fa500 add.d$f20,$f20,$f31
9d006504:463ea03c c.lt.d$f20,$f30
9d006508:45000005 bc1f9d006520 <.LBB3>
9d00650c:0000f021 moves8,zero
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
 
        ey = pow (1-t, 3) * y0 + 3 * t * pow (1-t, 2) * y1 +
                   3 * pow (t, 2) * (1-t) * y2 + pow (t, 3) * y3;
9d006510:44060000 mfc1a2,$f0
9d006514:44670000 mfhc1a3,$f0

9d006518 <.LBE2>:


    for (t = 0.0; t < 1.0; t += points)
    {
        ex = pow (1-t, 3) * x0 + 3 * t * pow (1-t, 2) * x1 +
                   3 * pow (t, 2) * (1-t) * x2 + pow (t, 3) * x3;
9d006518:0b4018fd j9d0063f4 <.LVL3>
9d00651c:4620bf46 mov.d$f29,$f23

9d006520 <.LBB3>:
        }
        first = false;
        sx = ex;
        sy = ey;
    }
    drawLine(sx, sy, x3, y3, color);
9d006520:8ee20000 lwv0,0(s7)
9d006524:afb50010 sws5,16(sp)
9d006528:afb10014 sws1,20(sp)
9d00652c:8c420010 lwv0,16(v0)
9d006530:02e02021 movea0,s7
9d006534:4620bdcd trunc.w.d$f23,$f23

9d006538 <.LVL14>:
9d006538:4405b800 mfc1a1,$f23
9d00653c:4620000d trunc.w.d$f0,$f0

9d006540 <.LVL15>:
9d006540:44060000 mfc1a2,$f0
9d006544:0040f809 jalrv0
9d006548:02003821 movea3,s0

9d00654c <.LVL16>:
    endBuffer();
9d00654c:8ee20000 lwv0,0(s7)
9d006550:8c5900c8 lwt9,200(v0)
9d006554:02e02021 movea0,s7

9d006558 <.LBE3>:
}
9d006558:8fbf0054 lwra,84(sp)
9d00655c:8fbe0050 lws8,80(sp)
9d006560:8fb7004c lws7,76(sp)

9d006564 <.LVL17>:
9d006564:8fb60048 lws6,72(sp)
9d006568:8fb50044 lws5,68(sp)
9d00656c:8fb40040 lws4,64(sp)

9d006570 <.LVL18>:
9d006570:8fb3003c lws3,60(sp)

9d006574 <.LVL19>:
9d006574:8fb20038 lws2,56(sp)

9d006578 <.LVL20>:
9d006578:8fb10034 lws1,52(sp)
9d00657c:8fb00030 lws0,48(sp)
9d006580:d7bf00a8 ldc1$f31,168(sp)

9d006584 <.LVL21>:
9d006584:d7be00a0 ldc1$f30,160(sp)
9d006588:d7bd0098 ldc1$f29,152(sp)
9d00658c:d7bc0090 ldc1$f28,144(sp)
9d006590:d7ba0088 ldc1$f26,136(sp)
9d006594:d7b90080 ldc1$f25,128(sp)
9d006598:d7b80078 ldc1$f24,120(sp)

9d00659c <.LVL22>:
9d00659c:d7b70070 ldc1$f23,112(sp)
9d0065a0:d7b60068 ldc1$f22,104(sp)
9d0065a4:d7b50060 ldc1$f21,96(sp)
9d0065a8:d7b40058 ldc1$f20,88(sp)

9d0065ac <.LBB4>:
        first = false;
        sx = ex;
        sy = ey;
    }
    drawLine(sx, sy, x3, y3, color);
    endBuffer();
9d0065ac:03200008 jrt9
9d0065b0:27bd00b8 addiusp,sp,184

Disassembly of section .text._free_r:

9d0065b4 <_free_r>:
9d0065b4:27bdffe0 addiusp,sp,-32
9d0065b8:afbf001c swra,28(sp)
9d0065bc:afb10018 sws1,24(sp)
9d0065c0:afb00014 sws0,20(sp)
9d0065c4:10a00096 beqza1,9d006820 <_free_r+0x26c>
9d0065c8:00a08821 moves1,a1
9d0065cc:0f4030ef jal9d00c3bc <.LFE104+0x8>
9d0065d0:00808021 moves0,a0
9d0065d4:2622fff8 addiuv0,s1,-8
9d0065d8:8e28fffc lwt0,-4(s1)
9d0065dc:2403fffe liv1,-2
9d0065e0:01031824 andv1,t0,v1
9d0065e4:00433821 addua3,v0,v1
9d0065e8:8ce40004 lwa0,4(a3)
9d0065ec:2405fffc lia1,-4
9d0065f0:00a42024 anda0,a1,a0
9d0065f4:3c068000 luia2,0x8000
9d0065f8:24c61f20 addiua2,a2,7968
9d0065fc:8cc50008 lwa1,8(a2)
9d006600:14e50019 bnea3,a1,9d006668 <_free_r+0xb4>
9d006604:31080001 andit0,t0,0x1
9d006608:15000008 bnezt0,9d00662c <_free_r+0x78>
9d00660c:00831821 adduv1,a0,v1
9d006610:8e24fff8 lwa0,-8(s1)
9d006614:00441023 subuv0,v0,a0
9d006618:00641821 adduv1,v1,a0
9d00661c:8c44000c lwa0,12(v0)
9d006620:8c450008 lwa1,8(v0)
9d006624:aca4000c swa0,12(a1)
9d006628:ac850008 swa1,8(a0)
9d00662c:34640001 oria0,v1,0x1
9d006630:ac440004 swa0,4(v0)
9d006634:acc20008 swv0,8(a2)
9d006638:3c028000 luiv0,0x8000
9d00663c:8c442394 lwa0,9108(v0)
9d006640:0064182b sltuv1,v1,a0
9d006644:14600004 bnezv1,9d006658 <_free_r+0xa4>
9d006648:02002021 movea0,s0
9d00664c:3c028000 luiv0,0x8000
9d006650:0f402543 jal9d00950c <.LFE174>
9d006654:8c452398 lwa1,9112(v0)
9d006658:0f4030f1 jal9d00c3c4 <.LFE104+0x10>
9d00665c:02002021 movea0,s0
9d006660:0b401a09 j9d006824 <_free_r+0x270>
9d006664:8fbf001c lwra,28(sp)
9d006668:ace40004 swa0,4(a3)
9d00666c:1500000c bnezt0,9d0066a0 <_free_r+0xec>
9d006670:00002821 movea1,zero
9d006674:8e28fff8 lwt0,-8(s1)
9d006678:00481023 subuv0,v0,t0
9d00667c:00681821 adduv1,v1,t0
9d006680:8c480008 lwt0,8(v0)
9d006684:3c098000 luit1,0x8000
9d006688:25291f28 addiut1,t1,7976
9d00668c:51090004 beqlt0,t1,9d0066a0 <_free_r+0xec>
9d006690:24050001 lia1,1
9d006694:8c49000c lwt1,12(v0)
9d006698:ad09000c swt1,12(t0)
9d00669c:ad280008 swt0,8(t1)
9d0066a0:00e44021 addut0,a3,a0
9d0066a4:8d080004 lwt0,4(t0)
9d0066a8:31080001 andit0,t0,0x1
9d0066ac:55000012 bnezlt0,9d0066f8 <_free_r+0x144>
9d0066b0:34640001 oria0,v1,0x1
9d0066b4:00641821 adduv1,v1,a0
9d0066b8:14a0000b bneza1,9d0066e8 <_free_r+0x134>
9d0066bc:8ce40008 lwa0,8(a3)
9d0066c0:3c088000 luit0,0x8000
9d0066c4:25081f28 addiut0,t0,7976
9d0066c8:54880008 bnela0,t0,9d0066ec <_free_r+0x138>
9d0066cc:8ce7000c lwa3,12(a3)
9d0066d0:acc20014 swv0,20(a2)
9d0066d4:acc20010 swv0,16(a2)
9d0066d8:ac44000c swa0,12(v0)
9d0066dc:ac440008 swa0,8(v0)
9d0066e0:0b4019bd j9d0066f4 <_free_r+0x140>
9d0066e4:24050001 lia1,1
9d0066e8:8ce7000c lwa3,12(a3)
9d0066ec:ac87000c swa3,12(a0)
9d0066f0:ace40008 swa0,8(a3)
9d0066f4:34640001 oria0,v1,0x1
9d0066f8:ac440004 swa0,4(v0)
9d0066fc:00432021 addua0,v0,v1
9d006700:14a0ffd5 bneza1,9d006658 <_free_r+0xa4>
9d006704:ac830000 swv1,0(a0)
9d006708:2c640200 sltiua0,v1,512
9d00670c:10800010 beqza0,9d006750 <_free_r+0x19c>
9d006710:00032a42 srla1,v1,0x9
9d006714:000318c2 srlv1,v1,0x3
9d006718:00032083 sraa0,v1,0x2
9d00671c:24050001 lia1,1
9d006720:00852004 sllva0,a1,a0
9d006724:8cc50004 lwa1,4(a2)
9d006728:00852025 ora0,a0,a1
9d00672c:acc40004 swa0,4(a2)
9d006730:000318c0 sllv1,v1,0x3
9d006734:00c33021 addua2,a2,v1
9d006738:8cc30008 lwv1,8(a2)
9d00673c:ac46000c swa2,12(v0)
9d006740:ac430008 swv1,8(v0)
9d006744:acc20008 swv0,8(a2)
9d006748:0b401996 j9d006658 <_free_r+0xa4>
9d00674c:ac62000c swv0,12(v1)
9d006750:2ca40005 sltiua0,a1,5
9d006754:10800004 beqza0,9d006768 <_free_r+0x1b4>
9d006758:2ca40015 sltiua0,a1,21
9d00675c:00032982 srla1,v1,0x6
9d006760:0b4019ec j9d0067b0 <_free_r+0x1fc>
9d006764:24a50038 addiua1,a1,56
9d006768:10800003 beqza0,9d006778 <_free_r+0x1c4>
9d00676c:2ca40055 sltiua0,a1,85
9d006770:0b4019ec j9d0067b0 <_free_r+0x1fc>
9d006774:24a5005b addiua1,a1,91
9d006778:10800004 beqza0,9d00678c <_free_r+0x1d8>
9d00677c:2ca40155 sltiua0,a1,341
9d006780:00032b02 srla1,v1,0xc
9d006784:0b4019ec j9d0067b0 <_free_r+0x1fc>
9d006788:24a5006e addiua1,a1,110
9d00678c:10800004 beqza0,9d0067a0 <_free_r+0x1ec>
9d006790:2ca40555 sltiua0,a1,1365
9d006794:00032bc2 srla1,v1,0xf
9d006798:0b4019ec j9d0067b0 <_free_r+0x1fc>
9d00679c:24a50077 addiua1,a1,119
9d0067a0:10800003 beqza0,9d0067b0 <_free_r+0x1fc>
9d0067a4:2405007e lia1,126
9d0067a8:00032c82 srla1,v1,0x12
9d0067ac:24a5007c addiua1,a1,124
9d0067b0:000520c0 slla0,a1,0x3
9d0067b4:00c42021 addua0,a2,a0
9d0067b8:8c870008 lwa3,8(a0)
9d0067bc:50e40004 beqla3,a0,9d0067d0 <_free_r+0x21c>
9d0067c0:00052883 sraa1,a1,0x2
9d0067c4:00e02821 movea1,a3
9d0067c8:0b4019fd j9d0067f4 <_free_r+0x240>
9d0067cc:2407fffc lia3,-4
9d0067d0:24030001 liv1,1
9d0067d4:00a32804 sllva1,v1,a1
9d0067d8:8cc30004 lwv1,4(a2)
9d0067dc:00a32825 ora1,a1,v1
9d0067e0:acc50004 swa1,4(a2)
9d0067e4:0b401a03 j9d00680c <_free_r+0x258>
9d0067e8:00e02821 movea1,a3
9d0067ec:50a40007 beqla1,a0,9d00680c <_free_r+0x258>
9d0067f0:8ca7000c lwa3,12(a1)
9d0067f4:8ca60004 lwa2,4(a1)
9d0067f8:00e63024 anda2,a3,a2
9d0067fc:0066302b sltua2,v1,a2
9d006800:54c0fffa bnezla2,9d0067ec <_free_r+0x238>
9d006804:8ca50008 lwa1,8(a1)
9d006808:8ca7000c lwa3,12(a1)
9d00680c:ac47000c swa3,12(v0)
9d006810:ac450008 swa1,8(v0)
9d006814:ace20008 swv0,8(a3)
9d006818:0b401996 j9d006658 <_free_r+0xa4>
9d00681c:aca2000c swv0,12(a1)
9d006820:8fbf001c lwra,28(sp)
9d006824:8fb10018 lws1,24(sp)
9d006828:8fb00014 lws0,20(sp)
9d00682c:03e00008 jrra
9d006830:27bd0020 addiusp,sp,32

Disassembly of section .text._ZN11DisplayCore10drawCircleEiiit:

9d006834 <L0>:
 *
 *  Example:
 *
 *      tft.drawCircle(50, 50, 20, Color::Red);
 */
void DisplayCore::drawCircle(int x0, int y0, int r, color_t color) {
9d006834:27bdffb8 addiusp,sp,-72
9d006838:afbf0044 swra,68(sp)
9d00683c:afbe0040 sws8,64(sp)
9d006840:afb7003c sws7,60(sp)
9d006844:afb60038 sws6,56(sp)
9d006848:afb50034 sws5,52(sp)
9d00684c:afb40030 sws4,48(sp)
9d006850:afb3002c sws3,44(sp)
9d006854:afb20028 sws2,40(sp)
9d006858:afb10024 sws1,36(sp)
9d00685c:afb00020 sws0,32(sp)
9d006860:00808021 moves0,a0
9d006864:00a09821 moves3,a1
9d006868:00c0a021 moves4,a2
9d00686c:00e08821 moves1,a3

9d006870 <.LBB2>:
    startBuffer();
9d006870:8c820000 lwv0,0(a0)
9d006874:8c4200c4 lwv0,196(v0)
9d006878:0040f809 jalrv0
9d00687c:97b20058 lhus2,88(sp)

9d006880 <.LVL6>:
    int f = 1 - r;
9d006880:24160001 lis6,1
9d006884:02d1b023 subus6,s6,s1

9d006888 <.LVL7>:
    int ddF_x = 1;
    int ddF_y = -2 * r;
9d006888:2417fffe lis7,-2
9d00688c:7237b802 muls7,s1,s7

9d006890 <.LVL8>:
    int x = 0;
    int y = r;

    setPixel(x0, y0+r, color);
9d006890:8e020000 lwv0,0(s0)
9d006894:8c420084 lwv0,132(v0)
9d006898:02002021 movea0,s0
9d00689c:02602821 movea1,s3
9d0068a0:02913021 addua2,s4,s1
9d0068a4:0040f809 jalrv0
9d0068a8:02403821 movea3,s2

9d0068ac <.LVL9>:
    setPixel(x0, y0-r, color);
9d0068ac:8e020000 lwv0,0(s0)
9d0068b0:8c420084 lwv0,132(v0)
9d0068b4:02002021 movea0,s0
9d0068b8:02602821 movea1,s3
9d0068bc:02913023 subua2,s4,s1
9d0068c0:0040f809 jalrv0
9d0068c4:02403821 movea3,s2

9d0068c8 <.LVL10>:
    setPixel(x0+r, y0, color);
9d0068c8:8e020000 lwv0,0(s0)
9d0068cc:8c420084 lwv0,132(v0)
9d0068d0:02002021 movea0,s0
9d0068d4:02712821 addua1,s3,s1
9d0068d8:02803021 movea2,s4
9d0068dc:0040f809 jalrv0
9d0068e0:02403821 movea3,s2

9d0068e4 <.LVL11>:
    setPixel(x0-r, y0, color);
9d0068e4:8e020000 lwv0,0(s0)
9d0068e8:8c420084 lwv0,132(v0)
9d0068ec:02002021 movea0,s0
9d0068f0:02712823 subua1,s3,s1
9d0068f4:02803021 movea2,s4
9d0068f8:0040f809 jalrv0
9d0068fc:02403821 movea3,s2

9d006900 <.LVL12>:

    while (x<y) {
9d006900:24150001 lis5,1

9d006904 <.LVL13>:
9d006904:26a2ffff addiuv0,s5,-1

9d006908 <.LVL14>:
9d006908:0051102a sltv0,v0,s1

9d00690c <.LVL15>:
9d00690c:10400058 beqzv0,9d006a70 <.LVL31>
9d006910:8e030000 lwv1,0(s0)
        if (f >= 0) {
9d006914:06c00004 bltzs6,9d006928 <.LVL18>
9d006918:0015f040 slls8,s5,0x1
            y--;
9d00691c:2631ffff addius1,s1,-1
            ddF_y += 2;
9d006920:26f70002 addius7,s7,2
            f += ddF_y;
9d006924:02d7b021 addus6,s6,s7

9d006928 <.LVL18>:
9d006928:27c20001 addiuv0,s8,1

9d00692c <.LVL19>:
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
9d00692c:02c2b021 addus6,s6,v0
9d006930:02b31021 adduv0,s5,s3

9d006934 <.LVL21>:

        setPixel(x0 + x, y0 + y, color);
9d006934:02914021 addut0,s4,s1
9d006938:8c630084 lwv1,132(v1)
9d00693c:02002021 movea0,s0
9d006940:00402821 movea1,v0
9d006944:01003021 movea2,t0
9d006948:02403821 movea3,s2
9d00694c:afa20018 swv0,24(sp)
9d006950:0060f809 jalrv1
9d006954:afa80010 swt0,16(sp)

9d006958 <.LVL22>:
9d006958:8fa20018 lwv0,24(sp)
9d00695c:005e1823 subuv1,v0,s8
        setPixel(x0 - x, y0 + y, color);
9d006960:8e040000 lwa0,0(s0)
9d006964:8c890084 lwt1,132(a0)
9d006968:02002021 movea0,s0
9d00696c:00602821 movea1,v1
9d006970:8fa80010 lwt0,16(sp)
9d006974:01003021 movea2,t0
9d006978:02403821 movea3,s2
9d00697c:0120f809 jalrt1
9d006980:afa30014 swv1,20(sp)

9d006984 <.LVL23>:
        setPixel(x0 + x, y0 - y, color);
9d006984:02913023 subua2,s4,s1
9d006988:8e040000 lwa0,0(s0)
9d00698c:8c880084 lwt0,132(a0)
9d006990:02002021 movea0,s0
9d006994:8fa20018 lwv0,24(sp)
9d006998:00402821 movea1,v0
9d00699c:02403821 movea3,s2
9d0069a0:0100f809 jalrt0
9d0069a4:afa60018 swa2,24(sp)

9d0069a8 <.LVL24>:
        setPixel(x0 - x, y0 - y, color);
9d0069a8:8e040000 lwa0,0(s0)
9d0069ac:8c880084 lwt0,132(a0)
9d0069b0:02002021 movea0,s0
9d0069b4:8fa30014 lwv1,20(sp)
9d0069b8:00602821 movea1,v1
9d0069bc:8fa20018 lwv0,24(sp)
9d0069c0:00403021 movea2,v0
9d0069c4:0100f809 jalrt0
9d0069c8:02403821 movea3,s2

9d0069cc <.LVL25>:
        setPixel(x0 + y, y0 + x, color);
9d0069cc:02714021 addut0,s3,s1
9d0069d0:02b41021 adduv0,s5,s4
9d0069d4:8e030000 lwv1,0(s0)
9d0069d8:8c630084 lwv1,132(v1)
9d0069dc:02002021 movea0,s0
9d0069e0:01002821 movea1,t0
9d0069e4:00403021 movea2,v0
9d0069e8:02403821 movea3,s2
9d0069ec:afa20018 swv0,24(sp)
9d0069f0:0060f809 jalrv1
9d0069f4:afa80010 swt0,16(sp)

9d0069f8 <.LVL26>:
        setPixel(x0 - y, y0 + x, color);
9d0069f8:02711823 subuv1,s3,s1
9d0069fc:8e040000 lwa0,0(s0)
9d006a00:8c890084 lwt1,132(a0)
9d006a04:02002021 movea0,s0
9d006a08:00602821 movea1,v1
9d006a0c:8fa20018 lwv0,24(sp)
9d006a10:00403021 movea2,v0
9d006a14:02403821 movea3,s2
9d006a18:0120f809 jalrt1
9d006a1c:afa30014 swv1,20(sp)

9d006a20 <.LVL27>:
9d006a20:8fa20018 lwv0,24(sp)
9d006a24:005ef023 subus8,v0,s8

9d006a28 <.LVL28>:
        setPixel(x0 + y, y0 - x, color);
9d006a28:8e020000 lwv0,0(s0)
9d006a2c:8c420084 lwv0,132(v0)
9d006a30:02002021 movea0,s0
9d006a34:8fa80010 lwt0,16(sp)
9d006a38:01002821 movea1,t0
9d006a3c:03c03021 movea2,s8
9d006a40:0040f809 jalrv0
9d006a44:02403821 movea3,s2

9d006a48 <.LVL29>:
        setPixel(x0 - y, y0 - x, color);
9d006a48:8e020000 lwv0,0(s0)
9d006a4c:8c420084 lwv0,132(v0)
9d006a50:02002021 movea0,s0
9d006a54:8fa30014 lwv1,20(sp)
9d006a58:00602821 movea1,v1
9d006a5c:03c03021 movea2,s8
9d006a60:0040f809 jalrv0
9d006a64:02403821 movea3,s2

9d006a68 <.LVL30>:
9d006a68:0b401a41 j9d006904 <.LVL13>
9d006a6c:26b50001 addius5,s5,1

9d006a70 <.LVL31>:
    }
    endBuffer();
9d006a70:8c7900c8 lwt9,200(v1)
9d006a74:02002021 movea0,s0

9d006a78 <.LBE2>:
}
9d006a78:8fbf0044 lwra,68(sp)
9d006a7c:8fbe0040 lws8,64(sp)
9d006a80:8fb7003c lws7,60(sp)

9d006a84 <.LVL32>:
9d006a84:8fb60038 lws6,56(sp)

9d006a88 <.LVL33>:
9d006a88:8fb50034 lws5,52(sp)

9d006a8c <.LVL34>:
9d006a8c:8fb40030 lws4,48(sp)

9d006a90 <.LVL35>:
9d006a90:8fb3002c lws3,44(sp)

9d006a94 <.LVL36>:
9d006a94:8fb20028 lws2,40(sp)
9d006a98:8fb10024 lws1,36(sp)

9d006a9c <.LVL37>:
9d006a9c:8fb00020 lws0,32(sp)

9d006aa0 <.LBB3>:
        setPixel(x0 + y, y0 + x, color);
        setPixel(x0 - y, y0 + x, color);
        setPixel(x0 + y, y0 - x, color);
        setPixel(x0 - y, y0 - x, color);
    }
    endBuffer();
9d006aa0:03200008 jrt9
9d006aa4:27bd0048 addiusp,sp,72

Disassembly of section .text:

9d006aa8 <deregister_tm_clones>:
9d006aa8:3c040000 luia0,0x0
9d006aac:24840000 addiua0,a0,0
9d006ab0:3c020000 luiv0,0x0
9d006ab4:24420003 addiuv0,v0,3
9d006ab8:00441023 subuv0,v0,a0
9d006abc:2c420007 sltiuv0,v0,7
9d006ac0:1440000a bnezv0,9d006aec <deregister_tm_clones+0x44>
9d006ac4:3c020000 luiv0,0x0
9d006ac8:24420000 addiuv0,v0,0
9d006acc:10400007 beqzv0,9d006aec <deregister_tm_clones+0x44>
9d006ad0:00000000 nop
9d006ad4:27bdffe8 addiusp,sp,-24
9d006ad8:afbf0014 swra,20(sp)
9d006adc:0040f809 jalrv0
9d006ae0:00000000 nop
9d006ae4:8fbf0014 lwra,20(sp)
9d006ae8:27bd0018 addiusp,sp,24
9d006aec:03e00008 jrra
9d006af0:00000000 nop

9d006af4 <register_tm_clones>:
9d006af4:3c040000 luia0,0x0
9d006af8:24840000 addiua0,a0,0
9d006afc:3c050000 luia1,0x0
9d006b00:24a50000 addiua1,a1,0
9d006b04:00a42823 subua1,a1,a0
9d006b08:00052883 sraa1,a1,0x2
9d006b0c:000517c2 srlv0,a1,0x1f
9d006b10:00452821 addua1,v0,a1
9d006b14:00052843 sraa1,a1,0x1
9d006b18:10a0000a beqza1,9d006b44 <register_tm_clones+0x50>
9d006b1c:3c020000 luiv0,0x0
9d006b20:24420000 addiuv0,v0,0
9d006b24:10400007 beqzv0,9d006b44 <register_tm_clones+0x50>
9d006b28:00000000 nop
9d006b2c:27bdffe8 addiusp,sp,-24
9d006b30:afbf0014 swra,20(sp)
9d006b34:0040f809 jalrv0
9d006b38:00000000 nop
9d006b3c:8fbf0014 lwra,20(sp)
9d006b40:27bd0018 addiusp,sp,24
9d006b44:03e00008 jrra
9d006b48:00000000 nop

9d006b4c <__do_global_dtors_aux>:
9d006b4c:3c028000 luiv0,0x8000
9d006b50:90432350 lbuv1,9040(v0)
9d006b54:14600038 bnezv1,9d006c38 <__do_global_dtors_aux+0xec>
9d006b58:3c039d00 luiv1,0x9d00
9d006b5c:27bdffd8 addiusp,sp,-40
9d006b60:afbf0024 swra,36(sp)
9d006b64:afb30020 sws3,32(sp)
9d006b68:afb2001c sws2,28(sp)
9d006b6c:afb10018 sws1,24(sp)
9d006b70:afb00014 sws0,20(sp)
9d006b74:00408821 moves1,v0
9d006b78:24631614 addiuv1,v1,5652
9d006b7c:3c129d00 luis2,0x9d00
9d006b80:26521618 addius2,s2,5656
9d006b84:02439023 subus2,s2,v1
9d006b88:00129083 sras2,s2,0x2
9d006b8c:2652ffff addius2,s2,-1
9d006b90:00609821 moves3,v1
9d006b94:3c108000 luis0,0x8000
9d006b98:8e032354 lwv1,9044(s0)
9d006b9c:0072102b sltuv0,v1,s2
9d006ba0:10400009 beqzv0,9d006bc8 <__do_global_dtors_aux+0x7c>
9d006ba4:24630001 addiuv1,v1,1
9d006ba8:ae032354 swv1,9044(s0)
9d006bac:00031880 sllv1,v1,0x2
9d006bb0:02631821 adduv1,s3,v1
9d006bb4:8c620000 lwv0,0(v1)
9d006bb8:0040f809 jalrv0
9d006bbc:00000000 nop
9d006bc0:0b401ae7 j9d006b9c <__do_global_dtors_aux+0x50>
9d006bc4:8e032354 lwv1,9044(s0)
9d006bc8:0f401aaa jal9d006aa8 <deregister_tm_clones>
9d006bcc:00000000 nop
9d006bd0:3c020000 luiv0,0x0
9d006bd4:24420000 addiuv0,v0,0
9d006bd8:10400008 beqzv0,9d006bfc <__do_global_dtors_aux+0xb0>
9d006bdc:3c020000 luiv0,0x0
9d006be0:24440000 addiua0,v0,0
9d006be4:50800006 beqzla0,9d006c00 <__do_global_dtors_aux+0xb4>
9d006be8:3c020000 luiv0,0x0
9d006bec:80420000 lbv0,0(v0)
9d006bf0:28420002 sltiv0,v0,2
9d006bf4:10400006 beqzv0,9d006c10 <__do_global_dtors_aux+0xc4>
9d006bf8:00000000 nop
9d006bfc:3c020000 luiv0,0x0
9d006c00:24420000 addiuv0,v0,0
9d006c04:10400004 beqzv0,9d006c18 <__do_global_dtors_aux+0xcc>
9d006c08:3c048000 luia0,0x8000
9d006c0c:2484038c addiua0,a0,908
9d006c10:0c000000 jal90000000 <_stack+0xff80008>
9d006c14:00000000 nop
9d006c18:24020001 liv0,1
9d006c1c:a2222350 sbv0,9040(s1)
9d006c20:8fbf0024 lwra,36(sp)
9d006c24:8fb30020 lws3,32(sp)
9d006c28:8fb2001c lws2,28(sp)
9d006c2c:8fb10018 lws1,24(sp)
9d006c30:8fb00014 lws0,20(sp)
9d006c34:27bd0028 addiusp,sp,40
9d006c38:03e00008 jrra
9d006c3c:00000000 nop

9d006c40 <frame_dummy>:
9d006c40:27bdffe8 addiusp,sp,-24
9d006c44:3c020000 luiv0,0x0
9d006c48:24420000 addiuv0,v0,0
9d006c4c:10400010 beqzv0,9d006c90 <frame_dummy+0x50>
9d006c50:afbf0014 swra,20(sp)
9d006c54:3c020000 luiv0,0x0
9d006c58:24440000 addiua0,v0,0
9d006c5c:5080000d beqzla0,9d006c94 <frame_dummy+0x54>
9d006c60:3c020000 luiv0,0x0
9d006c64:80420000 lbv0,0(v0)
9d006c68:28420002 sltiv0,v0,2
9d006c6c:14400008 bnezv0,9d006c90 <frame_dummy+0x50>
9d006c70:3c058000 luia1,0x8000
9d006c74:24a52358 addiua1,a1,9048
9d006c78:00003021 movea2,zero
9d006c7c:3c078001 luia3,0x8001
9d006c80:0c000000 jal90000000 <_stack+0xff80008>
9d006c84:24e78380 addiua3,a3,-31872
9d006c88:0b401b30 j9d006cc0 <frame_dummy+0x80>
9d006c8c:3c048000 luia0,0x8000
9d006c90:3c020000 luiv0,0x0
9d006c94:24420000 addiuv0,v0,0
9d006c98:10400008 beqzv0,9d006cbc <frame_dummy+0x7c>
9d006c9c:3c048000 luia0,0x8000
9d006ca0:2484038c addiua0,a0,908
9d006ca4:3c058000 luia1,0x8000
9d006ca8:24a52358 addiua1,a1,9048
9d006cac:00003021 movea2,zero
9d006cb0:3c078001 luia3,0x8001
9d006cb4:0c000000 jal90000000 <_stack+0xff80008>
9d006cb8:24e78380 addiua3,a3,-31872
9d006cbc:3c048000 luia0,0x8000
9d006cc0:8c820388 lwv0,904(a0)
9d006cc4:10400006 beqzv0,9d006ce0 <frame_dummy+0xa0>
9d006cc8:3c020000 luiv0,0x0
9d006ccc:24420000 addiuv0,v0,0
9d006cd0:10400003 beqzv0,9d006ce0 <frame_dummy+0xa0>
9d006cd4:00000000 nop
9d006cd8:0040f809 jalrv0
9d006cdc:24840388 addiua0,a0,904
9d006ce0:0f401abd jal9d006af4 <register_tm_clones>
9d006ce4:00000000 nop
9d006ce8:8fbf0014 lwra,20(sp)
9d006cec:03e00008 jrra
9d006cf0:27bd0018 addiusp,sp,24

Disassembly of section .text._Z14HandlePWMServom:

9d006cf4 <_Z14HandlePWMServom>:
// Primary worker function for SoftPWM
// Is called from within CoreTimer interrupt from wiring.c
// Schedules next CoreTimer interrupt based upon what needs to happen next 
// - another falling edge, or all rising edges, or 1ms CoreTimer interrupt.
uint32_t HandlePWMServo(uint32_t CurrentCount)
{
9d006cf4:27bdffd8 addiusp,sp,-40
9d006cf8:afbf0024 swra,36(sp)
9d006cfc:afb40020 sws4,32(sp)
9d006d00:afb3001c sws3,28(sp)
9d006d04:afb20018 sws2,24(sp)
9d006d08:afb10014 sws1,20(sp)
9d006d0c:afb00010 sws0,16(sp)
9d006d10:00808021 moves0,a0

9d006d14 <.LBB8>:
            {
                // Yup, so set the next interrupt should happen at the beginning of the next frame
                NextTime = FrameTime - CurrentTime;
                
                // And make all of our channels go high then
                RisingEdge = true;
9d006d14:24130001 lis3,1
                    {
                        ActiveBuffer = 1;
                        InactiveBuffer = 0;
                    }
                    // And have ISR use FirstChanP from new active buffer
                    ISRFirstChanP = FirstChanP[ActiveBuffer];
9d006d18:279284c0 addius2,gp,-31552
                        ActiveBuffer = 0;
                        InactiveBuffer = 1;
                    }
                    else
                    {
                        ActiveBuffer = 1;
9d006d1c:24110001 lis1,1

9d006d20 <.LVL58>:
    // edges to process. Only once we have enough time to leave and get back
    // in for the next edge do we break out of the while loop.
    do 
    {
        // If it's time to do the rising edge of all enabled channels-
        if (RisingEdge)
9d006d20:938284c9 lbuv0,-31543(gp)
9d006d24:10400032 beqzv0,9d006df0 <.LVL61>
9d006d28:8f8384e4 lwv1,-31516(gp)
        {
            // Start at the first channel
            CurChanP = ISRFirstChanP;
9d006d2c:8f8384d4 lwv1,-31532(gp)
9d006d30:af8384e4 swv1,-31516(gp)
            
            // Check to see if we have zero channels actually loaded with data
            if (CurChanP != NULL)
9d006d34:10600018 beqzv1,9d006d98 <.LVL59+0x10>
9d006d38:8f8284d8 lwv0,-31528(gp)
                    if (CurChanP->PWMValue != 0)
                    {
                        // Make an exception for servos - only set them
                        // high when ServoFrameCounter is zero.
                        if (
                            (CurChanP->IsServo && !ServoFrameCounter)
9d006d3c:00602821 movea1,v1
            {
                // For each channel that's active, set its pin high
                while (CurChanP != NULL)
                {
                    // But only if it is not at %0
                    if (CurChanP->PWMValue != 0)
9d006d40:8ca40014 lwa0,20(a1)
9d006d44:5080000c beqzla0,9d006d78 <.LVL58+0x58>
9d006d48:8ca5001c lwa1,28(a1)
                    {
                        // Make an exception for servos - only set them
                        // high when ServoFrameCounter is zero.
                        if (
9d006d4c:8ca40018 lwa0,24(a1)
9d006d50:50800004 beqzla0,9d006d64 <.LVL58+0x44>
9d006d54:8ca40004 lwa0,4(a1)
                            (CurChanP->IsServo && !ServoFrameCounter)
9d006d58:54400007 bnezlv0,9d006d78 <.LVL58+0x58>
9d006d5c:8ca5001c lwa1,28(a1)
                            ||
                            (!CurChanP->IsServo)
                        )
                        {
                            *(CurChanP->SetPort) |= CurChanP->Bit;
9d006d60:8ca40004 lwa0,4(a1)
9d006d64:8c870000 lwa3,0(a0)
9d006d68:8ca60010 lwa2,16(a1)
9d006d6c:00e63025 ora2,a3,a2
9d006d70:ac860000 swa2,0(a0)
                        }
                    }
                    // Advance to next channel to check it
                    CurChanP = CurChanP->NextChanP;
9d006d74:8ca5001c lwa1,28(a1)
            
            // Check to see if we have zero channels actually loaded with data
            if (CurChanP != NULL)
            {
                // For each channel that's active, set its pin high
                while (CurChanP != NULL)
9d006d78:54a0fff2 bnezla1,9d006d44 <.LVL58+0x24>
9d006d7c:8ca40014 lwa0,20(a1)
                    }
                    // Advance to next channel to check it
                    CurChanP = CurChanP->NextChanP;
                }
                // Now start back at the beginning again, for the setting pins low part
                CurChanP = ISRFirstChanP;
9d006d80:af8384e4 swv1,-31516(gp)
                // And load up the time for the next (first) edge (falling edge of first channel)
                NextTime = CurChanP->PWMValue;
9d006d84:8c650014 lwa1,20(v1)

9d006d88 <.LVL59>:
                CurChanP->NextEdgeTime = NextTime;
9d006d88:ac650000 swa1,0(v1)
                // And mark this time as the beginning of the PWM cycle
                CurrentTime = 0;
9d006d8c:af8084cc swzero,-31540(gp)
9d006d90:0b401b75 j9d006dd4 <.LVL59+0x4c>
9d006d94:a38084c9 sbzero,-31543(gp)
                // all over again.
                NextTime = FrameTime;
                // Don't set SoftPWMRisingEdge to FALSE - leave it TRUE so we just keep doing this

                // If it's time to swap buffers, then do that here
                if (InactiveBufferReady)
9d006d98:938384c8 lbuv1,-31544(gp)
9d006d9c:1060000d beqzv1,9d006dd4 <.LVL59+0x4c>
9d006da0:8f858010 lwa1,-32752(gp)
                {
                    if (ActiveBuffer)
9d006da4:8f8384d0 lwv1,-31536(gp)
9d006da8:50600004 beqzlv1,9d006dbc <.LVL59+0x34>
9d006dac:af9184d0 sws1,-31536(gp)
                    {
                        ActiveBuffer = 0;
9d006db0:af8084d0 swzero,-31536(gp)
9d006db4:0b401b70 j9d006dc0 <.LVL59+0x38>
9d006db8:af9184dc sws1,-31524(gp)
                        InactiveBuffer = 1;
                    }
                    else
                    {
                        ActiveBuffer = 1;
                        InactiveBuffer = 0;
9d006dbc:af8084dc swzero,-31524(gp)
                    }
                    // And have ISR use FirstChanP from new active buffer
                    ISRFirstChanP = FirstChanP[ActiveBuffer];
9d006dc0:8f8384d0 lwv1,-31536(gp)
9d006dc4:00031880 sllv1,v1,0x2
9d006dc8:7e43180a lwxv1,v1(s2)
9d006dcc:af8384d4 swv1,-31532(gp)
                    // Tell mainline code we've swapped
                    InactiveBufferReady = false;
9d006dd0:a38084c8 sbzero,-31544(gp)
                }
            }

            // Count this frame, for the servo pins
            ServoFrameCounter++;
9d006dd4:24420001 addiuv0,v0,1
9d006dd8:af8284d8 swv0,-31528(gp)
            // If we're reached our ServoFrames, limit, then set to zero to mark that
            // the next frame will have all servos do their rising edges.
            if (ServoFrameCounter == ServoFrames)
9d006ddc:8f838014 lwv1,-32748(gp)
9d006de0:50430036 beqlv0,v1,9d006ebc <.LVL62+0x38>
9d006de4:af8084d8 swzero,-31528(gp)
9d006de8:0b401baf j9d006ebc <.LVL62+0x38>
9d006dec:00000000 nop

9d006df0 <.LVL61>:
        {
            // Now we have a falling edge. So we need to set some channel's pin low here.

            // Always set the next bit low, if the channel is not at 100%
            // But if it's a servo, always set it low.
            if (CurChanP->PWMValue < FrameTime || CurChanP->IsServo)
9d006df0:8f848010 lwa0,-32752(gp)
9d006df4:8c620014 lwv0,20(v1)
9d006df8:0044102b sltuv0,v0,a0
9d006dfc:54400005 bnezlv0,9d006e14 <.LVL61+0x24>
9d006e00:8c620008 lwv0,8(v1)
9d006e04:8c620018 lwv0,24(v1)
9d006e08:50400007 beqzlv0,9d006e28 <.LVL61+0x38>
9d006e0c:8c650000 lwa1,0(v1)
            {
                *(CurChanP->ClearPort) |= CurChanP->Bit;
9d006e10:8c620008 lwv0,8(v1)
9d006e14:8c460000 lwa2,0(v0)
9d006e18:8c650010 lwa1,16(v1)
9d006e1c:00c52825 ora1,a2,a1
9d006e20:ac450000 swa1,0(v0)
            }

            // Record how much time has passed (where are we in the frame)
            CurrentTime += CurChanP->NextEdgeTime;
9d006e24:8c650000 lwa1,0(v1)
9d006e28:8f8284cc lwv0,-31540(gp)
9d006e2c:00a22821 addua1,a1,v0
9d006e30:af8584cc swa1,-31540(gp)
9d006e34:00601021 movev0,v1
            
            // Check for more channels that have this same time - but only if we
            // haven't hit the end of the list yet. (Channels with same edges
            // will have PWMValues that are the same.)
            while (
                (CurChanP->NextChanP != NULL)
9d006e38:8c63001c lwv1,28(v1)
            CurrentTime += CurChanP->NextEdgeTime;
            
            // Check for more channels that have this same time - but only if we
            // haven't hit the end of the list yet. (Channels with same edges
            // will have PWMValues that are the same.)
            while (
9d006e3c:50600011 beqzlv1,9d006e84 <.LVL62>
9d006e40:af8284e4 swv0,-31516(gp)
                (CurChanP->NextChanP != NULL)
                &&
                (CurChanP->PWMValue == CurChanP->NextChanP->PWMValue)
9d006e44:8c460014 lwa2,20(v0)
9d006e48:8c620014 lwv0,20(v1)
            // Check for more channels that have this same time - but only if we
            // haven't hit the end of the list yet. (Channels with same edges
            // will have PWMValues that are the same.)
            while (
                (CurChanP->NextChanP != NULL)
                &&
9d006e4c:14c20028 bnea2,v0,9d006ef0 <.LVL66+0x14>
9d006e50:00c4302b sltua2,a2,a0
                // Now start working on the next channel in the linked list
                CurChanP = CurChanP->NextChanP;

                // Only touch the output if it's not at 100% or if it is a servo
                // pin (they always go low).
                if (CurChanP->PWMValue < FrameTime || CurChanP->IsServo)
9d006e54:54c00005 bnezla2,9d006e6c <.LVL61+0x7c>
9d006e58:8c620008 lwv0,8(v1)
9d006e5c:8c620018 lwv0,24(v1)
9d006e60:5040fff5 beqzlv0,9d006e38 <.LVL61+0x48>
9d006e64:00601021 movev0,v1
                {
                    // Set this bit low
                    *(CurChanP->ClearPort) |= CurChanP->Bit;
9d006e68:8c620008 lwv0,8(v1)
9d006e6c:8c470000 lwa3,0(v0)
9d006e70:8c660010 lwa2,16(v1)
9d006e74:00e63025 ora2,a3,a2
9d006e78:ac460000 swa2,0(v0)
9d006e7c:0b401b8e j9d006e38 <.LVL61+0x48>
9d006e80:00601021 movev0,v1

9d006e84 <.LVL62>:
            {
                // Yup, so set the next interrupt should happen at the beginning of the next frame
                NextTime = FrameTime - CurrentTime;
                
                // And make all of our channels go high then
                RisingEdge = true;
9d006e84:a39384c9 sbs3,-31543(gp)
                
                // If it's time to swap buffers, then do that here
                if (InactiveBufferReady)
9d006e88:938284c8 lbuv0,-31544(gp)
9d006e8c:1040000b beqzv0,9d006ebc <.LVL62+0x38>
9d006e90:00852823 subua1,a0,a1
                {
                    if (ActiveBuffer)
9d006e94:8f8284d0 lwv0,-31536(gp)
9d006e98:50400019 beqzlv0,9d006f00 <.LBE8+0x8>
9d006e9c:af9184d0 sws1,-31536(gp)
                    {
                        ActiveBuffer = 0;
9d006ea0:af8084d0 swzero,-31536(gp)
                        InactiveBuffer = 1;
9d006ea4:af9184dc sws1,-31524(gp)
                    {
                        ActiveBuffer = 1;
                        InactiveBuffer = 0;
                    }
                    // And have ISR use FirstChanP from new active buffer
                    ISRFirstChanP = FirstChanP[ActiveBuffer];
9d006ea8:8f8284d0 lwv0,-31536(gp)
9d006eac:00021080 sllv0,v0,0x2
9d006eb0:7e42100a lwxv0,v0(s2)
9d006eb4:af8284d4 swv0,-31532(gp)
                    // Tell mainline code we've swapped
                    InactiveBufferReady = false;
9d006eb8:a38084c8 sbzero,-31544(gp)
        //
        // Change from v1.0 to v1.1: we now do this calculation by first subtracting
        // off the OldPeriod from our current CoreTimer value. This subtraction will
        // eliminate problems where adding NextTimeAcc rolls OldPeriod over, or where
        // the CoreTimer has rolled over from OldPeriod.
        TempCoreTimer = readCoreTimer();
9d006ebc:0f4030c5 jal9d00c314 <.LFE11>
9d006ec0:02058021 addus0,s0,a1

9d006ec4 <.LVL64>:
        if ((NextTimeAcc - TempCoreTimer) <= EXTRA_ISR_EXIT_CYCLES)
9d006ec4:02021023 subuv0,s0,v0

9d006ec8 <.LVL65>:
9d006ec8:2c420033 sltiuv0,v0,51
9d006ecc:1040000e beqzv0,9d006f08 <.LVL68>
9d006ed0:26140030 addius4,s0,48
            DoItAgain = true;
            // We need to wait until the time when we _would_ have actually let the
            // CoreTimer fire has come and gone. We also put a fudge factor in here to
            // simulate the number of cycles necessary to get into the ISR and to the 
            // point where the top of the do-while loop starts executing.
            while(readCoreTimer() < (NextTimeAcc + EXTRA_ISR_ENTRY_CYCLES))
9d006ed4:0f4030c5 jal9d00c314 <.LFE11>
9d006ed8:00000000 nop

9d006edc <.LVL66>:
9d006edc:0054102b sltuv0,v0,s4
9d006ee0:1440fffc bnezv0,9d006ed4 <.LVL65+0xc>
9d006ee4:938284c9 lbuv0,-31543(gp)
9d006ee8:0b401b49 j9d006d24 <.LVL58+0x4>
9d006eec:00000000 nop
                }
            }
            else
            {
                // Now start working on the next channel in the linked list
                CurChanP = CurChanP->NextChanP;
9d006ef0:af8384e4 swv1,-31516(gp)
                // Time to compute the NextEdgeTime for the next channel
                // But only if we're not at the end.
                if (CurChanP != NULL)
                {
                    // Compute the next channel's NextEdgeTime based upon our current time and it's PWMValue
                    CurChanP->NextEdgeTime = CurChanP->PWMValue - CurrentTime;
9d006ef4:00452823 subua1,v0,a1

9d006ef8 <.LBE8>:
9d006ef8:0b401baf j9d006ebc <.LVL62+0x38>
9d006efc:ac650000 swa1,0(v1)
                        InactiveBuffer = 1;
                    }
                    else
                    {
                        ActiveBuffer = 1;
                        InactiveBuffer = 0;
9d006f00:0b401baa j9d006ea8 <.LVL62+0x24>
9d006f04:af8084dc swzero,-31524(gp)

9d006f08 <.LVL68>:
    // so that we do (this is set only once, to a 1, if we have the 1ms tick
    // fire off. Since we don't clear RetVal during this ISR, any time we enter
    // the ISR and have the 1ms tick happen, we will be telling the wiring.c code
    // to run the 1ms code.)
    return(NextTimeAcc);
}
9d006f08:02001021 movev0,s0
9d006f0c:8fbf0024 lwra,36(sp)
9d006f10:8fb40020 lws4,32(sp)
9d006f14:8fb3001c lws3,28(sp)
9d006f18:8fb20018 lws2,24(sp)
9d006f1c:8fb10014 lws1,20(sp)
9d006f20:8fb00010 lws0,16(sp)

9d006f24 <.LVL69>:
9d006f24:03e00008 jrra
9d006f28:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN7SSD12897commandEt:

9d006f2c <L0>:
    pin_d13 = d13;
    pin_d14 = d14;
    pin_d15 = d15;
}

void SSD1289::command(uint16_t com) {
9d006f2c:30a5ffff andia1,a1,0xffff
    port_rs->lat.clr = mask_rs;
9d006f30:8c8200f0 lwv0,240(a0)
9d006f34:8c83013c lwv1,316(a0)
9d006f38:ac430034 swv1,52(v0)
    com & 0x0001 ? port_d0->lat.set = mask_d0 : port_d0->lat.clr = mask_d0;
9d006f3c:30a60001 andia2,a1,0x1
9d006f40:8c8200fc lwv0,252(a0)
9d006f44:10c00004 beqza2,9d006f58 <L0+0x2c>
9d006f48:8c830148 lwv1,328(a0)
9d006f4c:ac430038 swv1,56(v0)
9d006f50:0b401bd8 j9d006f60 <L0+0x34>
9d006f54:30a60002 andia2,a1,0x2
9d006f58:ac430034 swv1,52(v0)
    com & 0x0002 ? port_d1->lat.set = mask_d1 : port_d1->lat.clr = mask_d1;
9d006f5c:30a60002 andia2,a1,0x2
9d006f60:8c820100 lwv0,256(a0)
9d006f64:10c00004 beqza2,9d006f78 <L0+0x4c>
9d006f68:8c83014c lwv1,332(a0)
9d006f6c:ac430038 swv1,56(v0)
9d006f70:0b401be0 j9d006f80 <L0+0x54>
9d006f74:30a60004 andia2,a1,0x4
9d006f78:ac430034 swv1,52(v0)
    com & 0x0004 ? port_d2->lat.set = mask_d2 : port_d2->lat.clr = mask_d2;
9d006f7c:30a60004 andia2,a1,0x4
9d006f80:8c820104 lwv0,260(a0)
9d006f84:10c00004 beqza2,9d006f98 <L0+0x6c>
9d006f88:8c830150 lwv1,336(a0)
9d006f8c:ac430038 swv1,56(v0)
9d006f90:0b401be8 j9d006fa0 <L0+0x74>
9d006f94:30a60008 andia2,a1,0x8
9d006f98:ac430034 swv1,52(v0)
    com & 0x0008 ? port_d3->lat.set = mask_d3 : port_d3->lat.clr = mask_d3;
9d006f9c:30a60008 andia2,a1,0x8
9d006fa0:8c820108 lwv0,264(a0)
9d006fa4:10c00004 beqza2,9d006fb8 <L0+0x8c>
9d006fa8:8c830154 lwv1,340(a0)
9d006fac:ac430038 swv1,56(v0)
9d006fb0:0b401bf0 j9d006fc0 <L0+0x94>
9d006fb4:30a60010 andia2,a1,0x10
9d006fb8:ac430034 swv1,52(v0)
    com & 0x0010 ? port_d4->lat.set = mask_d4 : port_d4->lat.clr = mask_d4;
9d006fbc:30a60010 andia2,a1,0x10
9d006fc0:8c82010c lwv0,268(a0)
9d006fc4:10c00004 beqza2,9d006fd8 <L0+0xac>
9d006fc8:8c830158 lwv1,344(a0)
9d006fcc:ac430038 swv1,56(v0)
9d006fd0:0b401bf8 j9d006fe0 <L0+0xb4>
9d006fd4:30a60020 andia2,a1,0x20
9d006fd8:ac430034 swv1,52(v0)
    com & 0x0020 ? port_d5->lat.set = mask_d5 : port_d5->lat.clr = mask_d5;
9d006fdc:30a60020 andia2,a1,0x20
9d006fe0:8c820110 lwv0,272(a0)
9d006fe4:10c00004 beqza2,9d006ff8 <L0+0xcc>
9d006fe8:8c83015c lwv1,348(a0)
9d006fec:ac430038 swv1,56(v0)
9d006ff0:0b401c00 j9d007000 <L0+0xd4>
9d006ff4:30a60040 andia2,a1,0x40
9d006ff8:ac430034 swv1,52(v0)
    com & 0x0040 ? port_d6->lat.set = mask_d6 : port_d6->lat.clr = mask_d6;
9d006ffc:30a60040 andia2,a1,0x40
9d007000:8c820114 lwv0,276(a0)
9d007004:10c00004 beqza2,9d007018 <L0+0xec>
9d007008:8c830160 lwv1,352(a0)
9d00700c:ac430038 swv1,56(v0)
9d007010:0b401c08 j9d007020 <L0+0xf4>
9d007014:30a60080 andia2,a1,0x80
9d007018:ac430034 swv1,52(v0)
    com & 0x0080 ? port_d7->lat.set = mask_d7 : port_d7->lat.clr = mask_d7;
9d00701c:30a60080 andia2,a1,0x80
9d007020:8c820118 lwv0,280(a0)
9d007024:10c00004 beqza2,9d007038 <L0+0x10c>
9d007028:8c830164 lwv1,356(a0)
9d00702c:ac430038 swv1,56(v0)
9d007030:0b401c10 j9d007040 <L0+0x114>
9d007034:30a60100 andia2,a1,0x100
9d007038:ac430034 swv1,52(v0)
    com & 0x0100 ? port_d8->lat.set = mask_d8 : port_d8->lat.clr = mask_d8;
9d00703c:30a60100 andia2,a1,0x100
9d007040:8c82011c lwv0,284(a0)
9d007044:10c00004 beqza2,9d007058 <L0+0x12c>
9d007048:8c830168 lwv1,360(a0)
9d00704c:ac430038 swv1,56(v0)
9d007050:0b401c18 j9d007060 <L0+0x134>
9d007054:30a60200 andia2,a1,0x200
9d007058:ac430034 swv1,52(v0)
    com & 0x0200 ? port_d9->lat.set = mask_d9 : port_d9->lat.clr = mask_d9;
9d00705c:30a60200 andia2,a1,0x200
9d007060:8c820120 lwv0,288(a0)
9d007064:10c00004 beqza2,9d007078 <L0+0x14c>
9d007068:8c83016c lwv1,364(a0)
9d00706c:ac430038 swv1,56(v0)
9d007070:0b401c20 j9d007080 <L0+0x154>
9d007074:30a60400 andia2,a1,0x400
9d007078:ac430034 swv1,52(v0)
    com & 0x0400 ? port_d10->lat.set = mask_d10 : port_d10->lat.clr = mask_d10;
9d00707c:30a60400 andia2,a1,0x400
9d007080:8c820124 lwv0,292(a0)
9d007084:10c00004 beqza2,9d007098 <L0+0x16c>
9d007088:8c830170 lwv1,368(a0)
9d00708c:ac430038 swv1,56(v0)
9d007090:0b401c28 j9d0070a0 <L0+0x174>
9d007094:30a60800 andia2,a1,0x800
9d007098:ac430034 swv1,52(v0)
    com & 0x0800 ? port_d11->lat.set = mask_d11 : port_d11->lat.clr = mask_d11;
9d00709c:30a60800 andia2,a1,0x800
9d0070a0:8c820128 lwv0,296(a0)
9d0070a4:10c00004 beqza2,9d0070b8 <L0+0x18c>
9d0070a8:8c830174 lwv1,372(a0)
9d0070ac:ac430038 swv1,56(v0)
9d0070b0:0b401c30 j9d0070c0 <L0+0x194>
9d0070b4:30a61000 andia2,a1,0x1000
9d0070b8:ac430034 swv1,52(v0)
    com & 0x1000 ? port_d12->lat.set = mask_d12 : port_d12->lat.clr = mask_d12;
9d0070bc:30a61000 andia2,a1,0x1000
9d0070c0:8c82012c lwv0,300(a0)
9d0070c4:10c00004 beqza2,9d0070d8 <L0+0x1ac>
9d0070c8:8c830178 lwv1,376(a0)
9d0070cc:ac430038 swv1,56(v0)
9d0070d0:0b401c38 j9d0070e0 <L0+0x1b4>
9d0070d4:30a62000 andia2,a1,0x2000
9d0070d8:ac430034 swv1,52(v0)
    com & 0x2000 ? port_d13->lat.set = mask_d13 : port_d13->lat.clr = mask_d13;
9d0070dc:30a62000 andia2,a1,0x2000
9d0070e0:8c820130 lwv0,304(a0)
9d0070e4:10c00004 beqza2,9d0070f8 <L0+0x1cc>
9d0070e8:8c83017c lwv1,380(a0)
9d0070ec:ac430038 swv1,56(v0)
9d0070f0:0b401c40 j9d007100 <L0+0x1d4>
9d0070f4:30a64000 andia2,a1,0x4000
9d0070f8:ac430034 swv1,52(v0)
    com & 0x4000 ? port_d14->lat.set = mask_d14 : port_d14->lat.clr = mask_d14;
9d0070fc:30a64000 andia2,a1,0x4000
9d007100:8c820134 lwv0,308(a0)
9d007104:10c00004 beqza2,9d007118 <L0+0x1ec>
9d007108:8c830180 lwv1,384(a0)
9d00710c:ac430038 swv1,56(v0)
9d007110:0b401c48 j9d007120 <.LVL15>
9d007114:7c052e20 seha1,a1
9d007118:ac430034 swv1,52(v0)
    com & 0x8000 ? port_d15->lat.set = mask_d15 : port_d15->lat.clr = mask_d15;
9d00711c:7c052e20 seha1,a1

9d007120 <.LVL15>:
9d007120:8c820138 lwv0,312(a0)
9d007124:04a10004 bgeza1,9d007138 <.LVL15+0x18>
9d007128:8c830184 lwv1,388(a0)
9d00712c:ac430038 swv1,56(v0)
9d007130:0b401c50 j9d007140 <.LVL15+0x20>
9d007134:8c8200f8 lwv0,248(a0)
9d007138:ac430034 swv1,52(v0)
    port_wr->lat.clr = mask_wr;
9d00713c:8c8200f8 lwv0,248(a0)
9d007140:8c830144 lwv1,324(a0)
9d007144:ac430034 swv1,52(v0)
    port_wr->lat.set = mask_wr;
9d007148:8c8200f8 lwv0,248(a0)
9d00714c:8c830144 lwv1,324(a0)
9d007150:ac430038 swv1,56(v0)
9d007154:03e00008 jrra
9d007158:00000000 nop

Disassembly of section .text._ZN7SSD12894dataEt:

9d00715c <L0>:
}

void SSD1289::data(uint16_t com) {
9d00715c:30a5ffff andia1,a1,0xffff
    port_rs->lat.set = mask_rs;
9d007160:8c8200f0 lwv0,240(a0)
9d007164:8c83013c lwv1,316(a0)
9d007168:ac430038 swv1,56(v0)
    com & 0x0001 ? port_d0->lat.set = mask_d0 : port_d0->lat.clr = mask_d0;
9d00716c:30a60001 andia2,a1,0x1
9d007170:8c8200fc lwv0,252(a0)
9d007174:10c00004 beqza2,9d007188 <L0+0x2c>
9d007178:8c830148 lwv1,328(a0)
9d00717c:ac430038 swv1,56(v0)
9d007180:0b401c64 j9d007190 <L0+0x34>
9d007184:30a60002 andia2,a1,0x2
9d007188:ac430034 swv1,52(v0)
    com & 0x0002 ? port_d1->lat.set = mask_d1 : port_d1->lat.clr = mask_d1;
9d00718c:30a60002 andia2,a1,0x2
9d007190:8c820100 lwv0,256(a0)
9d007194:10c00004 beqza2,9d0071a8 <L0+0x4c>
9d007198:8c83014c lwv1,332(a0)
9d00719c:ac430038 swv1,56(v0)
9d0071a0:0b401c6c j9d0071b0 <L0+0x54>
9d0071a4:30a60004 andia2,a1,0x4
9d0071a8:ac430034 swv1,52(v0)
    com & 0x0004 ? port_d2->lat.set = mask_d2 : port_d2->lat.clr = mask_d2;
9d0071ac:30a60004 andia2,a1,0x4
9d0071b0:8c820104 lwv0,260(a0)
9d0071b4:10c00004 beqza2,9d0071c8 <L0+0x6c>
9d0071b8:8c830150 lwv1,336(a0)
9d0071bc:ac430038 swv1,56(v0)
9d0071c0:0b401c74 j9d0071d0 <L0+0x74>
9d0071c4:30a60008 andia2,a1,0x8
9d0071c8:ac430034 swv1,52(v0)
    com & 0x0008 ? port_d3->lat.set = mask_d3 : port_d3->lat.clr = mask_d3;
9d0071cc:30a60008 andia2,a1,0x8
9d0071d0:8c820108 lwv0,264(a0)
9d0071d4:10c00004 beqza2,9d0071e8 <L0+0x8c>
9d0071d8:8c830154 lwv1,340(a0)
9d0071dc:ac430038 swv1,56(v0)
9d0071e0:0b401c7c j9d0071f0 <L0+0x94>
9d0071e4:30a60010 andia2,a1,0x10
9d0071e8:ac430034 swv1,52(v0)
    com & 0x0010 ? port_d4->lat.set = mask_d4 : port_d4->lat.clr = mask_d4;
9d0071ec:30a60010 andia2,a1,0x10
9d0071f0:8c82010c lwv0,268(a0)
9d0071f4:10c00004 beqza2,9d007208 <L0+0xac>
9d0071f8:8c830158 lwv1,344(a0)
9d0071fc:ac430038 swv1,56(v0)
9d007200:0b401c84 j9d007210 <L0+0xb4>
9d007204:30a60020 andia2,a1,0x20
9d007208:ac430034 swv1,52(v0)
    com & 0x0020 ? port_d5->lat.set = mask_d5 : port_d5->lat.clr = mask_d5;
9d00720c:30a60020 andia2,a1,0x20
9d007210:8c820110 lwv0,272(a0)
9d007214:10c00004 beqza2,9d007228 <L0+0xcc>
9d007218:8c83015c lwv1,348(a0)
9d00721c:ac430038 swv1,56(v0)
9d007220:0b401c8c j9d007230 <L0+0xd4>
9d007224:30a60040 andia2,a1,0x40
9d007228:ac430034 swv1,52(v0)
    com & 0x0040 ? port_d6->lat.set = mask_d6 : port_d6->lat.clr = mask_d6;
9d00722c:30a60040 andia2,a1,0x40
9d007230:8c820114 lwv0,276(a0)
9d007234:10c00004 beqza2,9d007248 <L0+0xec>
9d007238:8c830160 lwv1,352(a0)
9d00723c:ac430038 swv1,56(v0)
9d007240:0b401c94 j9d007250 <L0+0xf4>
9d007244:30a60080 andia2,a1,0x80
9d007248:ac430034 swv1,52(v0)
    com & 0x0080 ? port_d7->lat.set = mask_d7 : port_d7->lat.clr = mask_d7;
9d00724c:30a60080 andia2,a1,0x80
9d007250:8c820118 lwv0,280(a0)
9d007254:10c00004 beqza2,9d007268 <L0+0x10c>
9d007258:8c830164 lwv1,356(a0)
9d00725c:ac430038 swv1,56(v0)
9d007260:0b401c9c j9d007270 <L0+0x114>
9d007264:30a60100 andia2,a1,0x100
9d007268:ac430034 swv1,52(v0)
    com & 0x0100 ? port_d8->lat.set = mask_d8 : port_d8->lat.clr = mask_d8;
9d00726c:30a60100 andia2,a1,0x100
9d007270:8c82011c lwv0,284(a0)
9d007274:10c00004 beqza2,9d007288 <L0+0x12c>
9d007278:8c830168 lwv1,360(a0)
9d00727c:ac430038 swv1,56(v0)
9d007280:0b401ca4 j9d007290 <L0+0x134>
9d007284:30a60200 andia2,a1,0x200
9d007288:ac430034 swv1,52(v0)
    com & 0x0200 ? port_d9->lat.set = mask_d9 : port_d9->lat.clr = mask_d9;
9d00728c:30a60200 andia2,a1,0x200
9d007290:8c820120 lwv0,288(a0)
9d007294:10c00004 beqza2,9d0072a8 <L0+0x14c>
9d007298:8c83016c lwv1,364(a0)
9d00729c:ac430038 swv1,56(v0)
9d0072a0:0b401cac j9d0072b0 <L0+0x154>
9d0072a4:30a60400 andia2,a1,0x400
9d0072a8:ac430034 swv1,52(v0)
    com & 0x0400 ? port_d10->lat.set = mask_d10 : port_d10->lat.clr = mask_d10;
9d0072ac:30a60400 andia2,a1,0x400
9d0072b0:8c820124 lwv0,292(a0)
9d0072b4:10c00004 beqza2,9d0072c8 <L0+0x16c>
9d0072b8:8c830170 lwv1,368(a0)
9d0072bc:ac430038 swv1,56(v0)
9d0072c0:0b401cb4 j9d0072d0 <L0+0x174>
9d0072c4:30a60800 andia2,a1,0x800
9d0072c8:ac430034 swv1,52(v0)
    com & 0x0800 ? port_d11->lat.set = mask_d11 : port_d11->lat.clr = mask_d11;
9d0072cc:30a60800 andia2,a1,0x800
9d0072d0:8c820128 lwv0,296(a0)
9d0072d4:10c00004 beqza2,9d0072e8 <L0+0x18c>
9d0072d8:8c830174 lwv1,372(a0)
9d0072dc:ac430038 swv1,56(v0)
9d0072e0:0b401cbc j9d0072f0 <L0+0x194>
9d0072e4:30a61000 andia2,a1,0x1000
9d0072e8:ac430034 swv1,52(v0)
    com & 0x1000 ? port_d12->lat.set = mask_d12 : port_d12->lat.clr = mask_d12;
9d0072ec:30a61000 andia2,a1,0x1000
9d0072f0:8c82012c lwv0,300(a0)
9d0072f4:10c00004 beqza2,9d007308 <L0+0x1ac>
9d0072f8:8c830178 lwv1,376(a0)
9d0072fc:ac430038 swv1,56(v0)
9d007300:0b401cc4 j9d007310 <L0+0x1b4>
9d007304:30a62000 andia2,a1,0x2000
9d007308:ac430034 swv1,52(v0)
    com & 0x2000 ? port_d13->lat.set = mask_d13 : port_d13->lat.clr = mask_d13;
9d00730c:30a62000 andia2,a1,0x2000
9d007310:8c820130 lwv0,304(a0)
9d007314:10c00004 beqza2,9d007328 <L0+0x1cc>
9d007318:8c83017c lwv1,380(a0)
9d00731c:ac430038 swv1,56(v0)
9d007320:0b401ccc j9d007330 <L0+0x1d4>
9d007324:30a64000 andia2,a1,0x4000
9d007328:ac430034 swv1,52(v0)
    com & 0x4000 ? port_d14->lat.set = mask_d14 : port_d14->lat.clr = mask_d14;
9d00732c:30a64000 andia2,a1,0x4000
9d007330:8c820134 lwv0,308(a0)
9d007334:10c00004 beqza2,9d007348 <L0+0x1ec>
9d007338:8c830180 lwv1,384(a0)
9d00733c:ac430038 swv1,56(v0)
9d007340:0b401cd4 j9d007350 <.LVL17>
9d007344:7c052e20 seha1,a1
9d007348:ac430034 swv1,52(v0)
    com & 0x8000 ? port_d15->lat.set = mask_d15 : port_d15->lat.clr = mask_d15;
9d00734c:7c052e20 seha1,a1

9d007350 <.LVL17>:
9d007350:8c820138 lwv0,312(a0)
9d007354:04a10004 bgeza1,9d007368 <.LVL17+0x18>
9d007358:8c830184 lwv1,388(a0)
9d00735c:ac430038 swv1,56(v0)
9d007360:0b401cdc j9d007370 <.LVL17+0x20>
9d007364:8c8200f8 lwv0,248(a0)
9d007368:ac430034 swv1,52(v0)
    port_wr->lat.clr = mask_wr;
9d00736c:8c8200f8 lwv0,248(a0)
9d007370:8c830144 lwv1,324(a0)
9d007374:ac430034 swv1,52(v0)
    port_wr->lat.set = mask_wr;
9d007378:8c8200f8 lwv0,248(a0)
9d00737c:8c830144 lwv1,324(a0)
9d007380:ac430038 swv1,56(v0)
9d007384:03e00008 jrra
9d007388:00000000 nop

Disassembly of section .text.__ieee754_sqrt:

9d00738c <__ieee754_sqrt>:
9d00738c:44026000 mfc1v0,$f12
9d007390:44636000 mfhc1v1,$f12
9d007394:00602821 movea1,v1
9d007398:3c067ff0 luia2,0x7ff0
9d00739c:00c33824 anda3,a2,v1
9d0073a0:14e60003 bnea3,a2,9d0073b0 <__ieee754_sqrt+0x24>
9d0073a4:00402021 movea0,v0
9d0073a8:03e00008 jrra
9d0073ac:4d8c6021 madd.d$f0,$f12,$f12,$f12
9d0073b0:5c60000a bgtzlv1,9d0073dc <__ieee754_sqrt+0x50>
9d0073b4:00031503 srav0,v1,0x14
9d0073b8:7c66f000 exta2,v1,0x0,0x1f
9d0073bc:00c23025 ora2,a2,v0
9d0073c0:10c00072 beqza2,9d00758c <__ieee754_sqrt+0x200>
9d0073c4:46206006 mov.d$f0,$f12
9d0073c8:50600004 beqzlv1,9d0073dc <__ieee754_sqrt+0x50>
9d0073cc:00031503 srav0,v1,0x14
9d0073d0:462c6001 sub.d$f0,$f12,$f12
9d0073d4:03e00008 jrra
9d0073d8:46200003 div.d$f0,$f0,$f0
9d0073dc:54400014 bnezlv0,9d007430 <__ieee754_sqrt+0xa4>
9d0073e0:2442fc01 addiuv0,v0,-1023
9d0073e4:54a00005 bnezla1,9d0073fc <__ieee754_sqrt+0x70>
9d0073e8:00001821 movev1,zero
9d0073ec:2442ffeb addiuv0,v0,-21
9d0073f0:00042ac2 srla1,a0,0xb
9d0073f4:0b401cf9 j9d0073e4 <__ieee754_sqrt+0x58>
9d0073f8:00042540 slla0,a0,0x15
9d0073fc:3c070010 luia3,0x10
9d007400:00a73024 anda2,a1,a3
9d007404:54c00004 bnezla2,9d007418 <__ieee754_sqrt+0x8c>
9d007408:00431023 subuv0,v0,v1
9d00740c:00052840 slla1,a1,0x1
9d007410:0b401d00 j9d007400 <__ieee754_sqrt+0x74>
9d007414:24630001 addiuv1,v1,1
9d007418:24420001 addiuv0,v0,1
9d00741c:00033023 negua2,v1
9d007420:00c43006 srlva2,a0,a2
9d007424:00c52825 ora1,a2,a1
9d007428:00642004 sllva0,a0,v1
9d00742c:2442fc01 addiuv0,v0,-1023
9d007430:7ca59800 exta1,a1,0x0,0x14
9d007434:3c030010 luiv1,0x10
9d007438:00a32825 ora1,a1,v1
9d00743c:30430001 andiv1,v0,0x1
9d007440:10600005 beqzv1,9d007458 <__ieee754_sqrt+0xcc>
9d007444:00026843 srat5,v0,0x1
9d007448:00052840 slla1,a1,0x1
9d00744c:00041fc2 srlv1,a0,0x1f
9d007450:00a32821 addua1,a1,v1
9d007454:00042040 slla0,a0,0x1
9d007458:00051040 sllv0,a1,0x1
9d00745c:00041fc2 srlv1,a0,0x1f
9d007460:00431021 adduv0,v0,v1
9d007464:00041840 sllv1,a0,0x1
9d007468:24070016 lia3,22
9d00746c:00003021 movea2,zero
9d007470:00002021 movea0,zero
9d007474:3c050020 luia1,0x20
9d007478:00854021 addut0,a0,a1
9d00747c:0048482a sltt1,v0,t0
9d007480:55200005 bnezlt1,9d007498 <__ieee754_sqrt+0x10c>
9d007484:00021040 sllv0,v0,0x1
9d007488:01052021 addua0,t0,a1
9d00748c:00481023 subuv0,v0,t0
9d007490:00c53021 addua2,a2,a1
9d007494:00021040 sllv0,v0,0x1
9d007498:000347c2 srlt0,v1,0x1f
9d00749c:00481021 adduv0,v0,t0
9d0074a0:00031840 sllv1,v1,0x1
9d0074a4:24e7ffff addiua3,a3,-1
9d0074a8:14e0fff3 bneza3,9d007478 <__ieee754_sqrt+0xec>
9d0074ac:00052842 srla1,a1,0x1
9d0074b0:24090020 lit1,32
9d0074b4:00002821 movea1,zero
9d0074b8:00005021 movet2,zero
9d0074bc:3c078000 luia3,0x8000
9d0074c0:3c0b8000 luit3,0x8000
9d0074c4:0082602a sltt4,a0,v0
9d0074c8:15800006 bnezt4,9d0074e4 <__ieee754_sqrt+0x158>
9d0074cc:00ea4021 addut0,a3,t2
9d0074d0:54820012 bnela0,v0,9d00751c <__ieee754_sqrt+0x190>
9d0074d4:00021040 sllv0,v0,0x1
9d0074d8:0068602b sltut4,v1,t0
9d0074dc:5580000e bnezlt4,9d007518 <__ieee754_sqrt+0x18c>
9d0074e0:00801021 movev0,a0
9d0074e4:01075021 addut2,t0,a3
9d0074e8:010b7024 andt6,t0,t3
9d0074ec:15cb0004 bnet6,t3,9d007500 <__ieee754_sqrt+0x174>
9d0074f0:00806021 movet4,a0
9d0074f4:014b6024 andt4,t2,t3
9d0074f8:2d8c0001 sltiut4,t4,1
9d0074fc:008c6021 addut4,a0,t4
9d007500:00441023 subuv0,v0,a0
9d007504:0068202b sltua0,v1,t0
9d007508:00441023 subuv0,v0,a0
9d00750c:00681823 subuv1,v1,t0
9d007510:00a72821 addua1,a1,a3
9d007514:01802021 movea0,t4
9d007518:00021040 sllv0,v0,0x1
9d00751c:000347c2 srlt0,v1,0x1f
9d007520:00481021 adduv0,v0,t0
9d007524:00031840 sllv1,v1,0x1
9d007528:2529ffff addiut1,t1,-1
9d00752c:1520ffe5 bnezt1,9d0074c4 <__ieee754_sqrt+0x138>
9d007530:00073842 srla3,a3,0x1
9d007534:00431025 orv0,v0,v1
9d007538:10400009 beqzv0,9d007560 <__ieee754_sqrt+0x1d4>
9d00753c:00063843 sraa3,a2,0x1
9d007540:2402ffff liv0,-1
9d007544:14a20004 bnea1,v0,9d007558 <__ieee754_sqrt+0x1cc>
9d007548:30a20001 andiv0,a1,0x1
9d00754c:24c60001 addiua2,a2,1
9d007550:0b401d57 j9d00755c <__ieee754_sqrt+0x1d0>
9d007554:00002821 movea1,zero
9d007558:00452821 addua1,v0,a1
9d00755c:00063843 sraa3,a2,0x1
9d007560:3c023fe0 luiv0,0x3fe0
9d007564:00e23821 addua3,a3,v0
9d007568:30c60001 andia2,a2,0x1
9d00756c:10c00003 beqza2,9d00757c <__ieee754_sqrt+0x1f0>
9d007570:00052842 srla1,a1,0x1
9d007574:3c028000 luiv0,0x8000
9d007578:00a22825 ora1,a1,v0
9d00757c:000d2500 slla0,t5,0x14
9d007580:00e41821 adduv1,a3,a0
9d007584:44850000 mtc1a1,$f0
9d007588:44e30000 mthc1v1,$f0
9d00758c:03e00008 jrra
9d007590:00000000 nop

Disassembly of section .text._ZN11DisplayCore16drawCircleHelperEiiiit:

9d007594 <_ZN11DisplayCore16drawCircleHelperEiiiit>:
        }
    }
    endBuffer();
}

void DisplayCore::drawCircleHelper( int x0, int y0, int r, int cornername, color_t color) {
9d007594:27bdffb8 addiusp,sp,-72
9d007598:afbf0044 swra,68(sp)
9d00759c:afbe0040 sws8,64(sp)
9d0075a0:afb7003c sws7,60(sp)
9d0075a4:afb60038 sws6,56(sp)
9d0075a8:afb50034 sws5,52(sp)
9d0075ac:afb40030 sws4,48(sp)
9d0075b0:afb3002c sws3,44(sp)
9d0075b4:afb20028 sws2,40(sp)
9d0075b8:afb10024 sws1,36(sp)
9d0075bc:afb00020 sws0,32(sp)
9d0075c0:0080b821 moves7,a0
9d0075c4:00a09021 moves2,a1
9d0075c8:00c09821 moves3,a2
9d0075cc:00e08021 moves0,a3
9d0075d0:8fbe0058 lws8,88(sp)

9d0075d4 <.LBB12>:
    startBuffer();
9d0075d4:8c830000 lwv1,0(a0)
9d0075d8:8c6300c4 lwv1,196(v1)
9d0075dc:0060f809 jalrv1
9d0075e0:97b4005c lhus4,92(sp)

9d0075e4 <.LVL62>:
    int f     = 1 - r;
9d0075e4:24150001 lis5,1
9d0075e8:02b0a823 subus5,s5,s0

9d0075ec <.LVL63>:
    int ddF_x = 1;
    int ddF_y = -2 * r;
9d0075ec:2416fffe lis6,-2
9d0075f0:7216b002 muls6,s0,s6

9d0075f4 <.LVL64>:
    int x     = 0;
    int y     = r;

    while (x<y) {
9d0075f4:24110001 lis1,1
            f     += ddF_y;
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;
        if (cornername & 0x4) {
9d0075f8:33c20004 andiv0,s8,0x4
9d0075fc:afa20010 swv0,16(sp)
            setPixel(x0 + x, y0 + y, color);
            setPixel(x0 + y, y0 + x, color);
        } 
        if (cornername & 0x2) {
9d007600:33c20002 andiv0,s8,0x2
9d007604:afa20014 swv0,20(sp)
            setPixel(x0 + x, y0 - y, color);
            setPixel(x0 + y, y0 - x, color);
        }
        if (cornername & 0x8) {
9d007608:33c20008 andiv0,s8,0x8
9d00760c:afa20018 swv0,24(sp)
            setPixel(x0 - y, y0 + x, color);
            setPixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) {
9d007610:33de0001 andis8,s8,0x1

9d007614 <.LVL65>:
9d007614:2623ffff addiuv1,s1,-1

9d007618 <.LVL66>:
    int ddF_x = 1;
    int ddF_y = -2 * r;
    int x     = 0;
    int y     = r;

    while (x<y) {
9d007618:0070182a sltv1,v1,s0

9d00761c <.LVL67>:
9d00761c:5060004b beqzlv1,9d00774c <.LVL81>
9d007620:8ee30000 lwv1,0(s7)
        if (f >= 0) {
9d007624:06a00004 bltzs5,9d007638 <.LVL70>
9d007628:00111840 sllv1,s1,0x1
            y--;
9d00762c:2610ffff addius0,s0,-1
            ddF_y += 2;
9d007630:26d60002 addius6,s6,2
            f     += ddF_y;
9d007634:02b6a821 addus5,s5,s6

9d007638 <.LVL70>:
9d007638:24630001 addiuv1,v1,1

9d00763c <.LVL71>:
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;
        if (cornername & 0x4) {
9d00763c:8fa20010 lwv0,16(sp)
9d007640:1040000f beqzv0,9d007680 <.LVL74>
9d007644:02a3a821 addus5,s5,v1
            setPixel(x0 + x, y0 + y, color);
9d007648:8ee30000 lwv1,0(s7)

9d00764c <.LVL72>:
9d00764c:8c630084 lwv1,132(v1)
9d007650:02e02021 movea0,s7
9d007654:02322821 addua1,s1,s2
9d007658:02703021 addua2,s3,s0
9d00765c:0060f809 jalrv1
9d007660:02803821 movea3,s4

9d007664 <.LVL73>:
            setPixel(x0 + y, y0 + x, color);
9d007664:8ee30000 lwv1,0(s7)
9d007668:8c630084 lwv1,132(v1)
9d00766c:02e02021 movea0,s7
9d007670:02502821 addua1,s2,s0
9d007674:02333021 addua2,s1,s3
9d007678:0060f809 jalrv1
9d00767c:02803821 movea3,s4

9d007680 <.LVL74>:
        } 
        if (cornername & 0x2) {
9d007680:8fa20014 lwv0,20(sp)
9d007684:10400010 beqzv0,9d0076c8 <.LVL76+0x4>
9d007688:8fa20018 lwv0,24(sp)
            setPixel(x0 + x, y0 - y, color);
9d00768c:8ee30000 lwv1,0(s7)
9d007690:8c630084 lwv1,132(v1)
9d007694:02e02021 movea0,s7
9d007698:02322821 addua1,s1,s2
9d00769c:02703023 subua2,s3,s0
9d0076a0:0060f809 jalrv1
9d0076a4:02803821 movea3,s4

9d0076a8 <.LVL75>:
            setPixel(x0 + y, y0 - x, color);
9d0076a8:8ee30000 lwv1,0(s7)
9d0076ac:8c630084 lwv1,132(v1)
9d0076b0:02e02021 movea0,s7
9d0076b4:02502821 addua1,s2,s0
9d0076b8:02713023 subua2,s3,s1
9d0076bc:0060f809 jalrv1
9d0076c0:02803821 movea3,s4

9d0076c4 <.LVL76>:
        }
        if (cornername & 0x8) {
9d0076c4:8fa20018 lwv0,24(sp)
9d0076c8:1040000e beqzv0,9d007704 <.LVL78>
9d0076cc:02e02021 movea0,s7
            setPixel(x0 - y, y0 + x, color);
9d0076d0:8ee30000 lwv1,0(s7)
9d0076d4:8c630084 lwv1,132(v1)
9d0076d8:02502823 subua1,s2,s0
9d0076dc:02333021 addua2,s1,s3
9d0076e0:0060f809 jalrv1
9d0076e4:02803821 movea3,s4

9d0076e8 <.LVL77>:
            setPixel(x0 - x, y0 + y, color);
9d0076e8:8ee30000 lwv1,0(s7)
9d0076ec:8c630084 lwv1,132(v1)
9d0076f0:02e02021 movea0,s7
9d0076f4:02512823 subua1,s2,s1
9d0076f8:02703021 addua2,s3,s0
9d0076fc:0060f809 jalrv1
9d007700:02803821 movea3,s4

9d007704 <.LVL78>:
        }
        if (cornername & 0x1) {
9d007704:53c0ffc3 beqzls8,9d007614 <.LVL65>
9d007708:26310001 addius1,s1,1
            setPixel(x0 - y, y0 - x, color);
9d00770c:8ee30000 lwv1,0(s7)
9d007710:8c630084 lwv1,132(v1)
9d007714:02e02021 movea0,s7
9d007718:02502823 subua1,s2,s0
9d00771c:02713023 subua2,s3,s1
9d007720:0060f809 jalrv1
9d007724:02803821 movea3,s4

9d007728 <.LVL79>:
            setPixel(x0 - x, y0 - y, color);
9d007728:8ee30000 lwv1,0(s7)
9d00772c:8c630084 lwv1,132(v1)
9d007730:02e02021 movea0,s7
9d007734:02512823 subua1,s2,s1
9d007738:02703023 subua2,s3,s0
9d00773c:0060f809 jalrv1
9d007740:02803821 movea3,s4

9d007744 <.LVL80>:
9d007744:0b401d85 j9d007614 <.LVL65>
9d007748:26310001 addius1,s1,1

9d00774c <.LVL81>:
        }
    }
    endBuffer();
9d00774c:8c7900c8 lwt9,200(v1)
9d007750:02e02021 movea0,s7

9d007754 <.LBE12>:
}
9d007754:8fbf0044 lwra,68(sp)
9d007758:8fbe0040 lws8,64(sp)
9d00775c:8fb7003c lws7,60(sp)

9d007760 <.LVL82>:
9d007760:8fb60038 lws6,56(sp)

9d007764 <.LVL83>:
9d007764:8fb50034 lws5,52(sp)

9d007768 <.LVL84>:
9d007768:8fb40030 lws4,48(sp)
9d00776c:8fb3002c lws3,44(sp)

9d007770 <.LVL85>:
9d007770:8fb20028 lws2,40(sp)

9d007774 <.LVL86>:
9d007774:8fb10024 lws1,36(sp)

9d007778 <.LVL87>:
9d007778:8fb00020 lws0,32(sp)

9d00777c <.LBB13>:
        if (cornername & 0x1) {
            setPixel(x0 - y, y0 - x, color);
            setPixel(x0 - x, y0 - y, color);
        }
    }
    endBuffer();
9d00777c:03200008 jrt9
9d007780:27bd0048 addiusp,sp,72

Disassembly of section .text._ZN11DisplayCore13drawRoundRectEiiiiit:

9d007784 <_ZN11DisplayCore13drawRoundRectEiiiiit>:
 *
 *  Example:
 *
 *      tft.drawRoundRect(10, 10, 100, 50, 4, Color::Yellow);
 */
void DisplayCore::drawRoundRect(int x, int y, int w, int h, int r, color_t color) {
9d007784:27bdffb8 addiusp,sp,-72
9d007788:afbf0044 swra,68(sp)
9d00778c:afbe0040 sws8,64(sp)
9d007790:afb7003c sws7,60(sp)
9d007794:afb60038 sws6,56(sp)
9d007798:afb50034 sws5,52(sp)
9d00779c:afb40030 sws4,48(sp)
9d0077a0:afb3002c sws3,44(sp)
9d0077a4:afb20028 sws2,40(sp)
9d0077a8:afb10024 sws1,36(sp)
9d0077ac:afb00020 sws0,32(sp)
9d0077b0:00808021 moves0,a0
9d0077b4:00a0a821 moves5,a1
9d0077b8:00c0a021 moves4,a2
9d0077bc:00e0b021 moves6,a3
9d0077c0:8fb70058 lws7,88(sp)
9d0077c4:8fb1005c lws1,92(sp)
    startBuffer();
9d0077c8:8c820000 lwv0,0(a0)
9d0077cc:8c4200c4 lwv0,196(v0)
9d0077d0:0040f809 jalrv0
9d0077d4:97b20060 lhus2,96(sp)

9d0077d8 <.LVL33>:
    // smarter version
    drawHorizontalLine(x+r  , y    , w-2*r, color); // Top
9d0077d8:02b19821 addus3,s5,s1
9d0077dc:2402fffe liv0,-2
9d0077e0:72221002 mulv0,s1,v0
9d0077e4:02c21821 adduv1,s6,v0
9d0077e8:8e040000 lwa0,0(s0)
9d0077ec:afb20010 sws2,16(sp)
9d0077f0:8c88008c lwt0,140(a0)
9d0077f4:02002021 movea0,s0
9d0077f8:02602821 movea1,s3
9d0077fc:02803021 movea2,s4
9d007800:00603821 movea3,v1
9d007804:afa2001c swv0,28(sp)
9d007808:0100f809 jalrt0
9d00780c:afa30018 swv1,24(sp)

9d007810 <.LVL34>:
    drawHorizontalLine(x+r  , y+h-1, w-2*r, color); // Bottom
9d007810:0297f021 addus8,s4,s7
9d007814:8e040000 lwa0,0(s0)
9d007818:afb20010 sws2,16(sp)
9d00781c:8c88008c lwt0,140(a0)
9d007820:02002021 movea0,s0
9d007824:02602821 movea1,s3
9d007828:27c6ffff addiua2,s8,-1
9d00782c:8fa30018 lwv1,24(sp)
9d007830:0100f809 jalrt0
9d007834:00603821 movea3,v1

9d007838 <.LVL35>:
    drawVerticalLine(  x    , y+r  , h-2*r, color); // Left
9d007838:0291a021 addus4,s4,s1

9d00783c <.LVL36>:
9d00783c:8fa2001c lwv0,28(sp)
9d007840:02e2b821 addus7,s7,v0
9d007844:8e020000 lwv0,0(s0)
9d007848:afb20010 sws2,16(sp)
9d00784c:8c420090 lwv0,144(v0)
9d007850:02002021 movea0,s0
9d007854:02a02821 movea1,s5
9d007858:02803021 movea2,s4
9d00785c:0040f809 jalrv0
9d007860:02e03821 movea3,s7

9d007864 <.LVL37>:
    drawVerticalLine(  x+w-1, y+r  , h-2*r, color); // Right
9d007864:02b6a821 addus5,s5,s6

9d007868 <.LVL38>:
9d007868:8e020000 lwv0,0(s0)
9d00786c:afb20010 sws2,16(sp)
9d007870:8c420090 lwv0,144(v0)
9d007874:02002021 movea0,s0
9d007878:26a5ffff addiua1,s5,-1
9d00787c:02803021 movea2,s4
9d007880:0040f809 jalrv0
9d007884:02e03821 movea3,s7

9d007888 <.LVL39>:
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
9d007888:24020001 liv0,1
9d00788c:afa20010 swv0,16(sp)
9d007890:afb20014 sws2,20(sp)
9d007894:02002021 movea0,s0
9d007898:02602821 movea1,s3
9d00789c:02803021 movea2,s4
9d0078a0:0f401d65 jal9d007594 <_ZN11DisplayCore16drawCircleHelperEiiiit>
9d0078a4:02203821 movea3,s1

9d0078a8 <.LVL40>:
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
9d0078a8:02b1a823 subus5,s5,s1
9d0078ac:26b5ffff addius5,s5,-1
9d0078b0:24020002 liv0,2
9d0078b4:afa20010 swv0,16(sp)
9d0078b8:afb20014 sws2,20(sp)
9d0078bc:02002021 movea0,s0
9d0078c0:02a02821 movea1,s5
9d0078c4:02803021 movea2,s4
9d0078c8:0f401d65 jal9d007594 <_ZN11DisplayCore16drawCircleHelperEiiiit>
9d0078cc:02203821 movea3,s1

9d0078d0 <.LVL41>:
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
9d0078d0:03d1a023 subus4,s8,s1
9d0078d4:2694ffff addius4,s4,-1
9d0078d8:24020004 liv0,4
9d0078dc:afa20010 swv0,16(sp)
9d0078e0:afb20014 sws2,20(sp)
9d0078e4:02002021 movea0,s0
9d0078e8:02a02821 movea1,s5
9d0078ec:02803021 movea2,s4
9d0078f0:0f401d65 jal9d007594 <_ZN11DisplayCore16drawCircleHelperEiiiit>
9d0078f4:02203821 movea3,s1

9d0078f8 <.LVL42>:
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
9d0078f8:24020008 liv0,8
9d0078fc:afa20010 swv0,16(sp)
9d007900:afb20014 sws2,20(sp)
9d007904:02002021 movea0,s0
9d007908:02602821 movea1,s3
9d00790c:02803021 movea2,s4
9d007910:0f401d65 jal9d007594 <_ZN11DisplayCore16drawCircleHelperEiiiit>
9d007914:02203821 movea3,s1

9d007918 <.LVL43>:
    endBuffer();
9d007918:8e020000 lwv0,0(s0)
9d00791c:8c5900c8 lwt9,200(v0)
9d007920:02002021 movea0,s0
}
9d007924:8fbf0044 lwra,68(sp)
9d007928:8fbe0040 lws8,64(sp)
9d00792c:8fb7003c lws7,60(sp)
9d007930:8fb60038 lws6,56(sp)

9d007934 <.LVL44>:
9d007934:8fb50034 lws5,52(sp)
9d007938:8fb40030 lws4,48(sp)
9d00793c:8fb3002c lws3,44(sp)
9d007940:8fb20028 lws2,40(sp)
9d007944:8fb10024 lws1,36(sp)
9d007948:8fb00020 lws0,32(sp)

9d00794c <.LVL45>:
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    endBuffer();
9d00794c:03200008 jrt9
9d007950:27bd0048 addiusp,sp,72

Disassembly of section .text._scheduleTask:

9d007954 <L0>:
**xxxN..C..........................................Lxx
**current time and next time have wrapped: (N < L) && (C >= N)
*/

void
_scheduleTask() {
9d007954:27bdffd0 addiusp,sp,-48
9d007958:afbf002c swra,44(sp)
9d00795c:afb60028 sws6,40(sp)
9d007960:afb50024 sws5,36(sp)
9d007964:afb40020 sws4,32(sp)
9d007968:afb3001c sws3,28(sp)
9d00796c:afb20018 sws2,24(sp)
9d007970:afb10014 sws1,20(sp)
9d007974:afb00010 sws0,16(sp)
unsigned longtmsCur;//current system time
unsigned longtmsNxt;//time for next event for this task
unsigned longdtmsNext;
unsigned longdtms;

if (cntActiveTask == 0) {
9d007978:8f8285b8 lwv0,-31304(gp)
9d00797c:10400058 beqzv0,9d007ae0 <.LVL65+0x4>
9d007980:8fbf002c lwra,44(sp)
return;
}

tmsCur = millis();
9d007984:0f4030bf jal9d00c2fc <.LFE175>
9d007988:00000000 nop

9d00798c <.LVL53>:
9d00798c:00408821 moves1,v0

9d007990 <.LVL54>:

/* The system millisecond timer will overflow every 49.71 days. The complexity of
** this conditional is to account for the cases where either the next event time has
** wrapped around or the current time has wrapped around.
*/
if ( ((tmsNextEvent >= tmsLastEvent) &&
9d007990:8f8285bc lwv0,-31300(gp)

9d007994 <.LVL55>:
9d007994:8f8385c0 lwv1,-31296(gp)
9d007998:0043202b sltua0,v0,v1
9d00799c:1480000c bneza0,9d0079d0 <.LVL55+0x3c>
9d0079a0:0223182b sltuv1,s1,v1
9d0079a4:14600004 bnezv1,9d0079b8 <.LVL55+0x24>
9d0079a8:27908518 addius0,gp,-31464
((tmsCur >= tmsLastEvent) && (tmsCur < tmsNextEvent))) ||
9d0079ac:0222102b sltuv0,s1,v0
9d0079b0:1440004a bnezv0,9d007adc <.LVL65>
9d0079b4:27908518 addius0,gp,-31464
**xxxN..C..........................................Lxx
**current time and next time have wrapped: (N < L) && (C >= N)
*/

void
_scheduleTask() {
9d0079b8:2412ffff lis2,-1
9d0079bc:00009821 moves3,zero

/* Call the event function.
*/
rgtaskTable[id].fsFlags |= fsBusy;
(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
rgtaskTable[id].fsFlags &= ~fsBusy;
9d0079c0:2415fffe lis5,-2

/* Decrement the repeat count.
*/
if ((rgtaskTable[id].stTask > 0) &&
9d0079c4:3416fffe lis6,0xfffe
** the table for all events that have elapsed and call their
** associated functions, update their next event timers, and then
** figure out when the next event time is.
*/
dtmsNext = 0xFFFFFFFF;
for (id = 0; id < NUM_TASKS; id++) {
9d0079c8:0b401e78 j9d0079e0 <.LVL56>
9d0079cc:24140008 lis4,8
** this conditional is to account for the cases where either the next event time has
** wrapped around or the current time has wrapped around.
*/
if ( ((tmsNextEvent >= tmsLastEvent) &&
((tmsCur >= tmsLastEvent) && (tmsCur < tmsNextEvent))) ||
 ((tmsNextEvent < tmsLastEvent) &&
9d0079d0:5460fff7 bnezlv1,9d0079b0 <.LVL55+0x1c>
9d0079d4:0222102b sltuv0,s1,v0
9d0079d8:0b401eb8 j9d007ae0 <.LVL65+0x4>
9d0079dc:8fbf002c lwra,44(sp)

9d0079e0 <.LVL56>:
*/
dtmsNext = 0xFFFFFFFF;
for (id = 0; id < NUM_TASKS; id++) {
/* If this isn't an active task, go to the next one.
*/
if ((rgtaskTable[id].pfnTask == 0) || 
9d0079e0:8e060000 lwa2,0(s0)
9d0079e4:50c00038 beqzla2,9d007ac8 <.LVL62+0x4>
9d0079e8:26730001 addius3,s3,1
9d0079ec:96020010 lhuv0,16(s0)
9d0079f0:50400035 beqzlv0,9d007ac8 <.LVL62+0x4>
9d0079f4:26730001 addius3,s3,1
** occur if a user task function calls delay() or any other
** function that causes _scheduleTask to be called recursively.
** This prevents the task function from being called recursively
** until the system crashes.
*/
if ((rgtaskTable[id].fsFlags & fsBusy) != 0) {
9d0079f8:96040012 lhua0,18(s0)
9d0079fc:30820001 andiv0,a0,0x1
9d007a00:54400031 bnezlv0,9d007ac8 <.LVL62+0x4>
9d007a04:26730001 addius3,s3,1
continue;
}

/* Check if this task's period has timed out.
*/
tmsNxt = rgtaskTable[id].tmsNext;
9d007a08:8e020008 lwv0,8(s0)

9d007a0c <.LVL57>:
if ( ((tmsNxt >= tmsLastEvent) && 
9d007a0c:8f8385c0 lwv1,-31296(gp)
9d007a10:0043382b sltua3,v0,v1
9d007a14:14e00005 bneza3,9d007a2c <.LVL57+0x20>
9d007a18:0222282b sltua1,s1,v0
9d007a1c:50a00009 beqzla1,9d007a44 <.LVL57+0x38>
9d007a20:8e030004 lwv1,4(s0)
9d007a24:0b401e8e j9d007a38 <.LVL57+0x2c>
9d007a28:0223182b sltuv1,s1,v1
((tmsCur >= tmsNxt) || (tmsCur < tmsLastEvent))) ||
 ((tmsNxt <  tmsLastEvent) && 
9d007a2c:54a00022 bnezla1,9d007ab8 <.LVL60+0x44>
9d007a30:8e020008 lwv0,8(s0)
((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {
9d007a34:0223182b sltuv1,s1,v1
9d007a38:5060001f beqzlv1,9d007ab8 <.LVL60+0x44>
9d007a3c:8e020008 lwv0,8(s0)
            ** the current time, we need to put it at the current time otherwise
            ** our delta time will go negative but with unsigned values will look
            ** a large positive time. Since the time is past, running the task ass
            ** soon as possible is the best we can do.
*/
            if(tmsCur - rgtaskTable[id].tmsNext >= rgtaskTable[id].tmsPeriod)
9d007a40:8e030004 lwv1,4(s0)
9d007a44:02222823 subua1,s1,v0
9d007a48:00a3282b sltua1,a1,v1
9d007a4c:14a00003 bneza1,9d007a5c <.LVL58>
9d007a50:00621021 adduv0,v1,v0
9d007a54:0b401e98 j9d007a60 <.LVL59>
9d007a58:ae110008 sws1,8(s0)

9d007a5c <.LVL58>:
            {
                rgtaskTable[id].tmsNext = tmsCur;
            }
            else
            {
    rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;
9d007a5c:ae020008 swv0,8(s0)

9d007a60 <.LVL59>:
            }

/* Call the event function.
*/
rgtaskTable[id].fsFlags |= fsBusy;
9d007a60:34840001 oria0,a0,0x1
9d007a64:a6040012 sha0,18(s0)
(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
9d007a68:02602021 movea0,s3
9d007a6c:00c0f809 jalra2
9d007a70:8e05000c lwa1,12(s0)

9d007a74 <.LVL60>:
rgtaskTable[id].fsFlags &= ~fsBusy;
9d007a74:96020012 lhuv0,18(s0)
9d007a78:00551024 andv0,v0,s5
9d007a7c:a6020012 shv0,18(s0)

/* Decrement the repeat count.
*/
if ((rgtaskTable[id].stTask > 0) &&
9d007a80:96020010 lhuv0,16(s0)
9d007a84:2442ffff addiuv0,v0,-1
9d007a88:3042ffff andiv0,v0,0xffff
9d007a8c:0056182b sltuv1,v0,s6
9d007a90:50600009 beqzlv1,9d007ab8 <.LVL60+0x44>
9d007a94:8e020008 lwv0,8(s0)
rgtaskTable[id].stTask -= 1;

/* The task state counter has gone to 0. This task is now
** disabled.
*/
if (rgtaskTable[id].stTask == 0) {
9d007a98:14400006 bnezv0,9d007ab4 <.LVL60+0x40>
9d007a9c:a6020010 shv0,16(s0)
rgtaskTable[id].tmsNext = 0;
9d007aa0:ae000008 swzero,8(s0)
cntActiveTask -= 1;
9d007aa4:8f8285b8 lwv0,-31304(gp)
9d007aa8:2442ffff addiuv0,v0,-1
continue;
9d007aac:0b401eb1 j9d007ac4 <.LVL62>
9d007ab0:af8285b8 swv0,-31304(gp)
}

/* Compute delta of this event time from the current time and
** remember it if it is less than the current delta.
*/
dtms = rgtaskTable[id].tmsNext - tmsCur;
9d007ab4:8e020008 lwv0,8(s0)
9d007ab8:00511023 subuv0,v0,s1

9d007abc <.LVL61>:
9d007abc:0052182b sltuv1,v0,s2
9d007ac0:0043900b movns2,v0,v1

9d007ac4 <.LVL62>:
** the table for all events that have elapsed and call their
** associated functions, update their next event timers, and then
** figure out when the next event time is.
*/
dtmsNext = 0xFFFFFFFF;
for (id = 0; id < NUM_TASKS; id++) {
9d007ac4:26730001 addius3,s3,1
9d007ac8:1674ffc5 bnes3,s4,9d0079e0 <.LVL56>
9d007acc:26100014 addius0,s0,20
}

/* All done with event tasks. Update the last event time with
** the current time.
*/
tmsLastEvent = tmsCur;
9d007ad0:af9185c0 sws1,-31296(gp)

/* Compute when the next event time will be by adding the event
** time delta to the current time.
*/
tmsNextEvent = tmsCur + dtmsNext;
9d007ad4:02518821 addus1,s2,s1

9d007ad8 <.LVL64>:
9d007ad8:af9185bc sws1,-31300(gp)

9d007adc <.LVL65>:
}
9d007adc:8fbf002c lwra,44(sp)
9d007ae0:8fb60028 lws6,40(sp)
9d007ae4:8fb50024 lws5,36(sp)
9d007ae8:8fb40020 lws4,32(sp)
9d007aec:8fb3001c lws3,28(sp)
9d007af0:8fb20018 lws2,24(sp)
9d007af4:8fb10014 lws1,20(sp)
9d007af8:8fb00010 lws0,16(sp)
9d007afc:03e00008 jrra
9d007b00:27bd0030 addiusp,sp,48

Disassembly of section .text._ZN11DisplayCore16fillCircleHelperEiiiiit:

9d007b04 <_ZN11DisplayCore16fillCircleHelperEiiiiit>:
}

/*! This is a helper function.  It is used to draw segments of a filled circle. */
void DisplayCore::fillCircleHelper(int x0, int y0, int r, int cornername, int delta, color_t color) {
9d007b04:27bdffb0 addiusp,sp,-80
9d007b08:afbf004c swra,76(sp)
9d007b0c:afbe0048 sws8,72(sp)
9d007b10:afb70044 sws7,68(sp)
9d007b14:afb60040 sws6,64(sp)
9d007b18:afb5003c sws5,60(sp)
9d007b1c:afb40038 sws4,56(sp)
9d007b20:afb30034 sws3,52(sp)
9d007b24:afb20030 sws2,48(sp)
9d007b28:afb1002c sws1,44(sp)
9d007b2c:afb00028 sws0,40(sp)
9d007b30:00808021 moves0,a0
9d007b34:00a09821 moves3,a1
9d007b38:00c0a021 moves4,a2
9d007b3c:00e08821 moves1,a3
9d007b40:8fbe0060 lws8,96(sp)
9d007b44:8fb60064 lws6,100(sp)

9d007b48 <.LBB14>:
    startBuffer();
9d007b48:8c820000 lwv0,0(a0)
9d007b4c:8c4200c4 lwv0,196(v0)
9d007b50:0040f809 jalrv0
9d007b54:97b50068 lhus5,104(sp)

9d007b58 <.LVL91>:
    int f     = 1 - r;
9d007b58:24030001 liv1,1
9d007b5c:00711823 subuv1,v1,s1

9d007b60 <.LVL92>:
    int ddF_x = 1;
    int ddF_y = -2 * r;
9d007b60:2408fffe lit0,-2
9d007b64:72284002 mult0,s1,t0

9d007b68 <.LVL93>:
9d007b68:26d20002 addius2,s6,2
    int x     = 0;
    int y     = r;

    while (x<y) {
9d007b6c:24170001 lis7,1
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;

        if (cornername & 0x1) {
9d007b70:33c20001 andiv0,s8,0x1
9d007b74:afa20018 swv0,24(sp)
            drawVerticalLine(x0+x, y0-y, 2*y+0+delta, color);
            drawVerticalLine(x0+y, y0-x, 2*x+0+delta, color);
        }
        if (cornername & 0x2) {
9d007b78:33de0002 andis8,s8,0x2

9d007b7c <.LVL94>:
9d007b7c:26e4ffff addiua0,s7,-1

9d007b80 <.LVL95>:
    int ddF_x = 1;
    int ddF_y = -2 * r;
    int x     = 0;
    int y     = r;

    while (x<y) {
9d007b80:0091202a slta0,a0,s1

9d007b84 <.LVL96>:
9d007b84:50800039 beqzla0,9d007c6c <.LVL107>
9d007b88:8e020000 lwv0,0(s0)
        if (f >= 0) {
9d007b8c:04600004 bltzv1,9d007ba0 <.LVL99>
9d007b90:00172040 slla0,s7,0x1
            y--;
9d007b94:2631ffff addius1,s1,-1
            ddF_y += 2;
9d007b98:25080002 addiut0,t0,2
            f     += ddF_y;
9d007b9c:00681821 adduv1,v1,t0

9d007ba0 <.LVL99>:
9d007ba0:24840001 addiua0,a0,1

9d007ba4 <.LVL100>:
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;

        if (cornername & 0x1) {
9d007ba4:8fa20018 lwv0,24(sp)
9d007ba8:10400016 beqzv0,9d007c04 <.LVL103+0x8>
9d007bac:00641821 adduv1,v1,a0
            drawVerticalLine(x0+x, y0-y, 2*y+0+delta, color);
9d007bb0:8e040000 lwa0,0(s0)

9d007bb4 <.LVL101>:
9d007bb4:00113840 slla3,s1,0x1
9d007bb8:afb50010 sws5,16(sp)
9d007bbc:8c890090 lwt1,144(a0)
9d007bc0:02002021 movea0,s0
9d007bc4:02f32821 addua1,s7,s3
9d007bc8:02913023 subua2,s4,s1
9d007bcc:00f63821 addua3,a3,s6
9d007bd0:afa3001c swv1,28(sp)
9d007bd4:0120f809 jalrt1
9d007bd8:afa80020 swt0,32(sp)

9d007bdc <.LVL102>:
            drawVerticalLine(x0+y, y0-x, 2*x+0+delta, color);
9d007bdc:8e040000 lwa0,0(s0)
9d007be0:afb50010 sws5,16(sp)
9d007be4:8c890090 lwt1,144(a0)
9d007be8:02002021 movea0,s0
9d007bec:02712821 addua1,s3,s1
9d007bf0:02973023 subua2,s4,s7
9d007bf4:0120f809 jalrt1
9d007bf8:02403821 movea3,s2

9d007bfc <.LVL103>:
9d007bfc:8fa80020 lwt0,32(sp)
9d007c00:8fa3001c lwv1,28(sp)
        }
        if (cornername & 0x2) {
9d007c04:53c00017 beqzls8,9d007c64 <.LVL106>
9d007c08:26f70001 addius7,s7,1
            drawVerticalLine(x0-x, y0-y, 2*y+0+delta, color);
9d007c0c:8e040000 lwa0,0(s0)
9d007c10:00113840 slla3,s1,0x1
9d007c14:afb50010 sws5,16(sp)
9d007c18:8c890090 lwt1,144(a0)
9d007c1c:02002021 movea0,s0
9d007c20:02772823 subua1,s3,s7
9d007c24:02913023 subua2,s4,s1
9d007c28:00f63821 addua3,a3,s6
9d007c2c:afa3001c swv1,28(sp)
9d007c30:0120f809 jalrt1
9d007c34:afa80020 swt0,32(sp)

9d007c38 <.LVL104>:
            drawVerticalLine(x0-y, y0-x, 2*x+0+delta, color);
9d007c38:8e040000 lwa0,0(s0)
9d007c3c:afb50010 sws5,16(sp)
9d007c40:8c890090 lwt1,144(a0)
9d007c44:02002021 movea0,s0
9d007c48:02712823 subua1,s3,s1
9d007c4c:02973023 subua2,s4,s7
9d007c50:0120f809 jalrt1
9d007c54:02403821 movea3,s2

9d007c58 <.LVL105>:
9d007c58:8fa80020 lwt0,32(sp)
9d007c5c:8fa3001c lwv1,28(sp)
9d007c60:26f70001 addius7,s7,1

9d007c64 <.LVL106>:
9d007c64:0b401edf j9d007b7c <.LVL94>
9d007c68:26520002 addius2,s2,2

9d007c6c <.LVL107>:
        }
    }
    endBuffer();
9d007c6c:8c5900c8 lwt9,200(v0)
9d007c70:02002021 movea0,s0

9d007c74 <.LBE14>:
}
9d007c74:8fbf004c lwra,76(sp)
9d007c78:8fbe0048 lws8,72(sp)
9d007c7c:8fb70044 lws7,68(sp)

9d007c80 <.LVL108>:
9d007c80:8fb60040 lws6,64(sp)

9d007c84 <.LVL109>:
9d007c84:8fb5003c lws5,60(sp)
9d007c88:8fb40038 lws4,56(sp)

9d007c8c <.LVL110>:
9d007c8c:8fb30034 lws3,52(sp)

9d007c90 <.LVL111>:
9d007c90:8fb20030 lws2,48(sp)

9d007c94 <.LVL112>:
9d007c94:8fb1002c lws1,44(sp)

9d007c98 <.LVL113>:
9d007c98:8fb00028 lws0,40(sp)

9d007c9c <.LBB15>:
        if (cornername & 0x2) {
            drawVerticalLine(x0-x, y0-y, 2*y+0+delta, color);
            drawVerticalLine(x0-y, y0-x, 2*x+0+delta, color);
        }
    }
    endBuffer();
9d007c9c:03200008 jrt9
9d007ca0:27bd0050 addiusp,sp,80

Disassembly of section .text._ZN11DisplayCore8drawLineEiiiiit:

9d007ca4 <_ZN11DisplayCore8drawLineEiiiiit>:
 *  Example:
 *
 *      tft.drawLine(10, 10, 40, 60, 4, Color::Green);
 */
// bresenham's algorithm - thx wikpedia
void DisplayCore::drawLine(int x0, int y0, int x1, int y1, int width, color_t color) {
9d007ca4:27bdffb0 addiusp,sp,-80
9d007ca8:afbf004c swra,76(sp)
9d007cac:afbe0048 sws8,72(sp)
9d007cb0:afb70044 sws7,68(sp)
9d007cb4:afb60040 sws6,64(sp)
9d007cb8:afb5003c sws5,60(sp)
9d007cbc:afb40038 sws4,56(sp)
9d007cc0:afb30034 sws3,52(sp)
9d007cc4:afb20030 sws2,48(sp)
9d007cc8:afb1002c sws1,44(sp)
9d007ccc:afb00028 sws0,40(sp)
9d007cd0:0080a021 moves4,a0
9d007cd4:00a08021 moves0,a1
9d007cd8:00c08821 moves1,a2
9d007cdc:00e09021 moves2,a3
9d007ce0:8fb30060 lws3,96(sp)
9d007ce4:8fa50064 lwa1,100(sp)

9d007ce8 <.LVL32>:
9d007ce8:97a20068 lhuv0,104(sp)
9d007cec:afa2001c swv0,28(sp)

9d007cf0 <.LBB38>:
    startBuffer();
9d007cf0:8c820000 lwv0,0(a0)
9d007cf4:8c4200c4 lwv0,196(v0)
9d007cf8:0040f809 jalrv0
9d007cfc:afa50020 swa1,32(sp)

9d007d00 <.LVL33>:
    int steep = abs(y1 - y0) > abs(x1 - x0);
9d007d00:0271b823 subus7,s3,s1
9d007d04:001717c3 srav0,s7,0x1f
9d007d08:0057b826 xors7,v0,s7
9d007d0c:02e2b823 subus7,s7,v0
9d007d10:02501823 subuv1,s2,s0
9d007d14:000317c3 srav0,v1,0x1f
9d007d18:00431826 xorv1,v0,v1
9d007d1c:00621823 subuv1,v1,v0
9d007d20:0077182a sltv1,v1,s7
9d007d24:afa30018 swv1,24(sp)

9d007d28 <.LVL34>:
    if (steep) {
9d007d28:10600007 beqzv1,9d007d48 <.LBE41>
9d007d2c:8fa50020 lwa1,32(sp)
9d007d30:02401021 movev0,s2

9d007d34 <.LBB39>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d007d34:02609021 moves2,s3

9d007d38 <.LVL35>:
    i1 = i2;
9d007d38:00409821 moves3,v0

9d007d3c <.LBE39>:
9d007d3c:02001021 movev0,s0

9d007d40 <.LBB41>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d007d40:02208021 moves0,s1

9d007d44 <.LVL37>:
    i1 = i2;
9d007d44:00408821 moves1,v0

9d007d48 <.LBE41>:
        swap(x0, y0);
        swap(x1, y1);
    }

    if (x0 > x1) {
9d007d48:0250102a sltv0,s2,s0
9d007d4c:10400008 beqzv0,9d007d70 <.LVL44>
9d007d50:0250b023 subus6,s2,s0
9d007d54:02201021 movev0,s1

9d007d58 <.LBB43>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d007d58:02608821 moves1,s3

9d007d5c <.LVL39>:
    i1 = i2;
9d007d5c:00409821 moves3,v0

9d007d60 <.LBE43>:
9d007d60:02001021 movev0,s0

9d007d64 <.LVL41>:
9d007d64:02408021 moves0,s2

9d007d68 <.LVL42>:
9d007d68:00409021 moves2,v0

9d007d6c <.LVL43>:
        swap(x0, x1);
        swap(y0, y1);
    }

    int dx, dy;
    dx = x1 - x0;
9d007d6c:0250b023 subus6,s2,s0

9d007d70 <.LVL44>:
    dy = abs(y1 - y0);
9d007d70:02711023 subuv0,s3,s1
9d007d74:00021fc3 srav1,v0,0x1f

9d007d78 <.LVL45>:
9d007d78:0062b826 xors7,v1,v0
9d007d7c:02e3b823 subus7,s7,v1

9d007d80 <.LVL46>:

    int err = dx / 2;
9d007d80:0016afc2 srls5,s6,0x1f
9d007d84:02b6a821 addus5,s5,s6
9d007d88:0015a843 sras5,s5,0x1

9d007d8c <.LVL47>:
    int ystep;

    if (y0 < y1) {
9d007d8c:0233982a slts3,s1,s3

9d007d90 <.LVL48>:
        ystep = 1;
9d007d90:241e0001 lis8,1
9d007d94:2404ffff lia0,-1
9d007d98:0093f00a movzs8,a0,s3
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
        if (steep) {
            fillCircle(y0, x0, width / 2, color);
9d007d9c:00059fc2 srls3,a1,0x1f
9d007da0:02659821 addus3,s3,a1
9d007da4:00139843 sras3,s3,0x1

9d007da8 <.LVL49>:
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
9d007da8:0250282a slta1,s2,s0
9d007dac:14a00017 bneza1,9d007e0c <.LBB46>
9d007db0:8e840000 lwa0,0(s4)
        if (steep) {
9d007db4:8fa20018 lwv0,24(sp)
9d007db8:10400007 beqzv0,9d007dd8 <.LBB45>
9d007dbc:8fa2001c lwv0,28(sp)
            fillCircle(y0, x0, width / 2, color);
9d007dc0:afa20010 swv0,16(sp)
9d007dc4:8c88000c lwt0,12(a0)
9d007dc8:02802021 movea0,s4
9d007dcc:02202821 movea1,s1

9d007dd0 <.LBE38>:
9d007dd0:0b401f7b j9d007dec <.LVL50>
9d007dd4:02003021 movea2,s0

9d007dd8 <.LBB45>:
        } else {
            fillCircle(x0, y0, width / 2, color);
9d007dd8:afa20010 swv0,16(sp)
9d007ddc:8c88000c lwt0,12(a0)
9d007de0:02802021 movea0,s4
9d007de4:02002821 movea1,s0
9d007de8:02203021 movea2,s1

9d007dec <.LVL50>:
9d007dec:0100f809 jalrt0
9d007df0:02603821 movea3,s3

9d007df4 <.LVL51>:
        }
        err -= dy;
9d007df4:02b7a823 subus5,s5,s7
        if (err < 0) {
9d007df8:06a1ffeb bgezs5,9d007da8 <.LVL49>
9d007dfc:26100001 addius0,s0,1
            y0 += ystep;
9d007e00:023e8821 addus1,s1,s8

9d007e04 <.LBE45>:
            err += dx;
9d007e04:0b401f6a j9d007da8 <.LVL49>
9d007e08:02b6a821 addus5,s5,s6

9d007e0c <.LBB46>:
        }
    }
    endBuffer();
9d007e0c:8c9900c8 lwt9,200(a0)
9d007e10:02802021 movea0,s4

9d007e14 <.LBE46>:
}
9d007e14:8fbf004c lwra,76(sp)
9d007e18:8fbe0048 lws8,72(sp)

9d007e1c <.LVL54>:
9d007e1c:8fb70044 lws7,68(sp)

9d007e20 <.LVL55>:
9d007e20:8fb60040 lws6,64(sp)

9d007e24 <.LVL56>:
9d007e24:8fb5003c lws5,60(sp)

9d007e28 <.LVL57>:
9d007e28:8fb40038 lws4,56(sp)

9d007e2c <.LVL58>:
9d007e2c:8fb30034 lws3,52(sp)
9d007e30:8fb20030 lws2,48(sp)

9d007e34 <.LVL59>:
9d007e34:8fb1002c lws1,44(sp)

9d007e38 <.LVL60>:
9d007e38:8fb00028 lws0,40(sp)

9d007e3c <.LBB47>:
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
    endBuffer();
9d007e3c:03200008 jrt9
9d007e40:27bd0050 addiusp,sp,80

Disassembly of section .text._ZN11DisplayCore12clipToScreenERiS0_S0_S0_:

9d007e44 <_ZN11DisplayCore12clipToScreenERiS0_S0_S0_>:
    _clip_y0 = 0;
    _clip_x1 = getWidth() - 1;
    _clip_y1 = getHeight() - 1;
}

boolean DisplayCore::clipToScreen(int &x, int &y, int &w, int &h) {
9d007e44:27bdffd0 addiusp,sp,-48
9d007e48:afbf002c swra,44(sp)
9d007e4c:afb50028 sws5,40(sp)
9d007e50:afb40024 sws4,36(sp)
9d007e54:afb30020 sws3,32(sp)
9d007e58:afb2001c sws2,28(sp)
9d007e5c:afb10018 sws1,24(sp)
9d007e60:afb00014 sws0,20(sp)
9d007e64:00808021 moves0,a0
9d007e68:00a09821 moves3,a1
9d007e6c:00c09021 moves2,a2
9d007e70:00e0a021 moves4,a3
    if (x < 0) {
9d007e74:8ca20000 lwv0,0(a1)
9d007e78:04400006 bltzv0,9d007e94 <_ZN11DisplayCore12clipToScreenERiS0_S0_S0_+0x50>
9d007e7c:8fb10040 lws1,64(sp)
        if (w <= 0) {
            return false;
        }
    }

    if (y < 0) {
9d007e80:8e420000 lwv0,0(s2)
9d007e84:04430013 bgezlv0,9d007ed4 <.LVL8+0x4>
9d007e88:8e750000 lws5,0(s3)
        h += y;
9d007e8c:0b401fae j9d007eb8 <.LVL7>
9d007e90:8e230000 lwv1,0(s1)
    _clip_y1 = getHeight() - 1;
}

boolean DisplayCore::clipToScreen(int &x, int &y, int &w, int &h) {
    if (x < 0) {
        w += x;
9d007e94:8ce30000 lwv1,0(a3)
9d007e98:00621021 adduv0,v1,v0
9d007e9c:ace20000 swv0,0(a3)
        x = 0;
9d007ea0:aca00000 swzero,0(a1)
        if (w <= 0) {
9d007ea4:8ce20000 lwv0,0(a3)
9d007ea8:5c40fff6 bgtzlv0,9d007e84 <_ZN11DisplayCore12clipToScreenERiS0_S0_S0_+0x40>
9d007eac:8e420000 lwv0,0(s2)

9d007eb0 <.LVL6>:
            return false;
9d007eb0:0b401feb j9d007fac <.LVL18+0x10>
9d007eb4:00001021 movev0,zero

9d007eb8 <.LVL7>:
        }
    }

    if (y < 0) {
        h += y;
9d007eb8:00621021 adduv0,v1,v0
9d007ebc:ae220000 swv0,0(s1)
        y = 0;
9d007ec0:ae400000 swzero,0(s2)
        if (h <= 0) {
9d007ec4:8e220000 lwv0,0(s1)
9d007ec8:18400038 blezv0,9d007fac <.LVL18+0x10>
9d007ecc:00001021 movev0,zero

9d007ed0 <.LVL8>:
            return false;
        }
    }

    if (x >= getWidth()) {
9d007ed0:8e750000 lws5,0(s3)
9d007ed4:8e020000 lwv0,0(s0)
9d007ed8:8c4200d8 lwv0,216(v0)

9d007edc <.LVL9>:
9d007edc:0040f809 jalrv0
9d007ee0:02002021 movea0,s0

9d007ee4 <.LVL10>:
9d007ee4:02a2102a sltv0,s5,v0
9d007ee8:10400030 beqzv0,9d007fac <.LVL18+0x10>
9d007eec:00001021 movev0,zero
        return false;
    }

    if (y >= getHeight()) {
9d007ef0:8e550000 lws5,0(s2)
9d007ef4:8e020000 lwv0,0(s0)
9d007ef8:8c4200dc lwv0,220(v0)
9d007efc:0040f809 jalrv0
9d007f00:02002021 movea0,s0

9d007f04 <.LVL11>:
9d007f04:02a2102a sltv0,s5,v0
9d007f08:10400028 beqzv0,9d007fac <.LVL18+0x10>
9d007f0c:00001021 movev0,zero
        return false;
    }

    if (x + w >= getWidth()) {
9d007f10:8e750000 lws5,0(s3)
9d007f14:8e820000 lwv0,0(s4)
9d007f18:02a2a821 addus5,s5,v0
9d007f1c:8e020000 lwv0,0(s0)
9d007f20:8c4200d8 lwv0,216(v0)
9d007f24:0040f809 jalrv0
9d007f28:02002021 movea0,s0

9d007f2c <.LVL12>:
9d007f2c:02a2102a sltv0,s5,v0
9d007f30:5040000d beqzlv0,9d007f68 <.LVL15>
9d007f34:8e020000 lwv0,0(s0)
        if (w <= 0) {
            return false;
        }
    }

    if (y + h >= getHeight()) {
9d007f38:8e530000 lws3,0(s2)

9d007f3c <.LVL13>:
9d007f3c:8e220000 lwv0,0(s1)
9d007f40:02629821 addus3,s3,v0
9d007f44:8e020000 lwv0,0(s0)
9d007f48:8c4200dc lwv0,220(v0)
9d007f4c:0040f809 jalrv0
9d007f50:02002021 movea0,s0

9d007f54 <.LVL14>:
9d007f54:0262102a sltv0,s3,v0
9d007f58:1040000c beqzv0,9d007f8c <.LVL17>
9d007f5c:24020001 liv0,1
        if (h <= 0) {
            return false;
        }
    }
    return true;
}
9d007f60:0b401fec j9d007fb0 <.LVL18+0x14>
9d007f64:8fbf002c lwra,44(sp)

9d007f68 <.LVL15>:
    if (y >= getHeight()) {
        return false;
    }

    if (x + w >= getWidth()) {
        w = getWidth()-x;
9d007f68:8c4200d8 lwv0,216(v0)
9d007f6c:0040f809 jalrv0
9d007f70:02002021 movea0,s0

9d007f74 <.LVL16>:
9d007f74:8e630000 lwv1,0(s3)
9d007f78:00431023 subuv0,v0,v1
        if (w <= 0) {
9d007f7c:1c40ffee bgtzv0,9d007f38 <.LVL12+0xc>
9d007f80:ae820000 swv0,0(s4)
9d007f84:0b401feb j9d007fac <.LVL18+0x10>
9d007f88:00001021 movev0,zero

9d007f8c <.LVL17>:
            return false;
        }
    }

    if (y + h >= getHeight()) {
        h = getHeight()-y;
9d007f8c:8e020000 lwv0,0(s0)
9d007f90:8c4200dc lwv0,220(v0)
9d007f94:0040f809 jalrv0
9d007f98:02002021 movea0,s0

9d007f9c <.LVL18>:
9d007f9c:8e430000 lwv1,0(s2)
9d007fa0:00431023 subuv0,v0,v1
9d007fa4:ae220000 swv0,0(s1)
boolean DisplayCore::clipToScreen(int &x, int &y, int &w, int &h) {
    if (x < 0) {
        w += x;
        x = 0;
        if (w <= 0) {
            return false;
9d007fa8:0002102a sltv0,zero,v0
        if (h <= 0) {
            return false;
        }
    }
    return true;
}
9d007fac:8fbf002c lwra,44(sp)
9d007fb0:8fb50028 lws5,40(sp)
9d007fb4:8fb40024 lws4,36(sp)

9d007fb8 <.LVL19>:
9d007fb8:8fb30020 lws3,32(sp)
9d007fbc:8fb2001c lws2,28(sp)

9d007fc0 <.LVL20>:
9d007fc0:8fb10018 lws1,24(sp)
9d007fc4:8fb00014 lws0,20(sp)

9d007fc8 <.LVL21>:
9d007fc8:03e00008 jrra
9d007fcc:27bd0030 addiusp,sp,48

Disassembly of section .text.rint:

9d007fd0 <rint>:
9d007fd0:27bdfff8 addiusp,sp,-8
9d007fd4:44026000 mfc1v0,$f12
9d007fd8:44636000 mfhc1v1,$f12
9d007fdc:00604021 movet0,v1
9d007fe0:7c655500 exta1,v1,0x14,0xb
9d007fe4:24a4fc01 addiua0,a1,-1023
9d007fe8:28890014 sltit1,a0,20
9d007fec:11200038 beqzt1,9d0080d0 <rint+0x100>
9d007ff0:00033fc2 srla3,v1,0x1f
9d007ff4:04830022 bgezla0,9d008080 <rint+0xb0>
9d007ff8:3c05000f luia1,0xf
9d007ffc:7c64f000 exta0,v1,0x0,0x1f
9d008000:00822025 ora0,a0,v0
9d008004:10800052 beqza0,9d008150 <rint+0x180>
9d008008:46206006 mov.d$f0,$f12
9d00800c:7c649800 exta0,v1,0x0,0x14
9d008010:00821025 orv0,a0,v0
9d008014:44046000 mfc1a0,$f12
9d008018:00023023 negua2,v0
9d00801c:00c21025 orv0,a2,v0
9d008020:00021302 srlv0,v0,0xc
9d008024:3c060008 luia2,0x8
9d008028:00461024 andv0,v0,a2
9d00802c:3c06fffe luia2,0xfffe
9d008030:00c31824 andv1,a2,v1
9d008034:00432825 ora1,v0,v1
9d008038:44840000 mtc1a0,$f0
9d00803c:44e50000 mthc1a1,$f0
9d008040:000718c0 sllv1,a3,0x3
9d008044:3c029d01 luiv0,0x9d01
9d008048:2442c2e0 addiuv0,v0,-15648
9d00804c:4c620081 ldxc1$f2,v0(v1)
9d008050:46201000 add.d$f0,$f2,$f0
9d008054:f7a00000 sdc1$f0,0(sp)
9d008058:d7a00000 ldc1$f0,0(sp)
9d00805c:46220001 sub.d$f0,$f0,$f2
9d008060:44650000 mfhc1a1,$f0
9d008064:44020000 mfc1v0,$f0
9d008068:00073fc0 slla3,a3,0x1f
9d00806c:7ca4f000 exta0,a1,0x0,0x1f
9d008070:00e41825 orv1,a3,a0
9d008074:44820000 mtc1v0,$f0
9d008078:0b402054 j9d008150 <rint+0x180>
9d00807c:44e30000 mthc1v1,$f0
9d008080:34a5ffff oria1,a1,0xffff
9d008084:00852807 srava1,a1,a0
9d008088:00a33024 anda2,a1,v1
9d00808c:00c23025 ora2,a2,v0
9d008090:10c0002f beqza2,9d008150 <rint+0x180>
9d008094:46206006 mov.d$f0,$f12
9d008098:00052842 srla1,a1,0x1
9d00809c:00a34824 andt1,a1,v1
9d0080a0:01224825 ort1,t1,v0
9d0080a4:11200020 beqzt1,9d008128 <rint+0x158>
9d0080a8:00003021 movea2,zero
9d0080ac:3c068000 luia2,0x8000
9d0080b0:38820013 xoriv0,a0,0x13
9d0080b4:0002300b movna2,zero,v0
9d0080b8:00054027 nort0,zero,a1
9d0080bc:01034024 andt0,t0,v1
9d0080c0:3c020004 luiv0,0x4
9d0080c4:00822007 srava0,v0,a0
9d0080c8:0b40204a j9d008128 <rint+0x158>
9d0080cc:01044025 ort0,t0,a0
9d0080d0:28890034 sltit1,a0,52
9d0080d4:55200006 bnezlt1,9d0080f0 <rint+0x120>
9d0080d8:24a4fbed addiua0,a1,-1043
9d0080dc:24020400 liv0,1024
9d0080e0:1482001b bnea0,v0,9d008150 <rint+0x180>
9d0080e4:46206006 mov.d$f0,$f12
9d0080e8:0b402054 j9d008150 <rint+0x180>
9d0080ec:462c6000 add.d$f0,$f12,$f12
9d0080f0:2405ffff lia1,-1
9d0080f4:00852806 srlva1,a1,a0
9d0080f8:00a24824 andt1,a1,v0
9d0080fc:11200014 beqzt1,9d008150 <rint+0x180>
9d008100:46206006 mov.d$f0,$f12
9d008104:00052842 srla1,a1,0x1
9d008108:00a24824 andt1,a1,v0
9d00810c:11200006 beqzt1,9d008128 <rint+0x158>
9d008110:00403021 movea2,v0
9d008114:00052827 nora1,zero,a1
9d008118:00a21024 andv0,a1,v0
9d00811c:3c064000 luia2,0x4000
9d008120:00862007 srava0,a2,a0
9d008124:00443025 ora2,v0,a0
9d008128:44861000 mtc1a2,$f2
9d00812c:44e81000 mthc1t0,$f2
9d008130:000738c0 slla3,a3,0x3
9d008134:3c029d01 luiv0,0x9d01
9d008138:2442c2e0 addiuv0,v0,-15648
9d00813c:4ce20001 ldxc1$f0,v0(a3)
9d008140:46220080 add.d$f2,$f0,$f2
9d008144:f7a20000 sdc1$f2,0(sp)
9d008148:d7a20000 ldc1$f2,0(sp)
9d00814c:46201001 sub.d$f0,$f2,$f0
9d008150:03e00008 jrra
9d008154:27bd0008 addiusp,sp,8

Disassembly of section .text._ZN11DisplayCore5writeEh:

9d008158 <_ZN11DisplayCore5writeEh>:
 *  Example:
 *
 *      tft.write('Q');
 */
#if ARDUINO >= 100
size_t DisplayCore::write(uint8_t c) {
9d008158:27bdffd0 addiusp,sp,-48
9d00815c:afbf002c swra,44(sp)
9d008160:afb40028 sws4,40(sp)
9d008164:afb30024 sws3,36(sp)
9d008168:afb20020 sws2,32(sp)
9d00816c:afb1001c sws1,28(sp)
9d008170:afb00018 sws0,24(sp)
9d008174:00808021 moves0,a0

9d008178 <.LBB12>:
    if (font == NULL) {
9d008178:8c9200bc lws2,188(a0)
9d00817c:12400045 beqzs2,9d008294 <.LVL38>
9d008180:30b100ff andis1,a1,0xff

9d008184 <.LVL25>:
        return;
    }
#endif
    FontHeader *header = (FontHeader *)font;

    if (c == '\n') {
9d008184:2402000a liv0,10
9d008188:16220007 bnes1,v0,9d0081a8 <.LBB24>
9d00818c:2402000d liv0,13
        cursor_y += header->linesPerCharacter;
9d008190:92420000 lbuv0,0(s2)
9d008194:8c83000c lwv1,12(a0)
9d008198:00621021 adduv0,v1,v0
9d00819c:ac82000c swv0,12(a0)

9d0081a0 <.LBE12>:
        cursor_x = 0;
9d0081a0:0b4020ae j9d0082b8 <.LVL41>
9d0081a4:ac800008 swzero,8(a0)

9d0081a8 <.LBB24>:
    } else if (c == '\r') {
9d0081a8:12220044 beqs1,v0,9d0082bc <.LBE25>
9d0081ac:24020001 liv0,1
        // skip em
    } else {
        if (c < header->startGlyph) {
9d0081b0:92430002 lbuv1,2(s2)
9d0081b4:0223102b sltuv0,s1,v1
9d0081b8:10400007 beqzv0,9d0081d8 <.LVL26>
9d0081bc:92440003 lbua0,3(s2)
            if (c >= 'A' && c <= 'Z') {
9d0081c0:2622ffbf addiuv0,s1,-65
9d0081c4:2c42001a sltiuv0,v0,26
9d0081c8:10400003 beqzv0,9d0081d8 <.LVL26>
9d0081cc:00000000 nop
                c += ('a' - 'A');
9d0081d0:26310020 addius1,s1,32
9d0081d4:323100ff andis1,s1,0xff

9d0081d8 <.LVL26>:
            }
        }
        if (c > header->endGlyph) {
9d0081d8:0091102b sltuv0,a0,s1
9d0081dc:50400034 beqzlv0,9d0082b0 <.LBE18>
9d0081e0:0223102b sltuv0,s1,v1
            if (c >= 'a' && c <= 'z') {
9d0081e4:2625ff9f addiua1,s1,-97
9d0081e8:2ca5001a sltiua1,a1,26
9d0081ec:10a00033 beqza1,9d0082bc <.LBE25>
9d0081f0:24020001 liv0,1
                c -= ('a' - 'A');
9d0081f4:2631ffe0 addius1,s1,-32

9d0081f8 <.LVL27>:
9d0081f8:323100ff andis1,s1,0xff

9d0081fc <.LVL28>:
            }
        }
        if (c >= header->startGlyph && c <= header->endGlyph) {
9d0081fc:0223282b sltua1,s1,v1
9d008200:14a0002e bneza1,9d0082bc <.LBE25>
9d008204:0091202b sltua0,a0,s1
9d008208:1480002d bneza0,9d0082c0 <.LBE25+0x4>
9d00820c:8fbf002c lwra,44(sp)

9d008210 <.LBB17>:
            uint8_t co = c - header->startGlyph;
9d008210:02231823 subuv1,s1,v1

9d008214 <.LVL30>:
            uint32_t charstart = (co * ((header->linesPerCharacter * header->bytesPerLine) + 1)) + sizeof(FontHeader); // Start of character data
9d008214:306300ff andiv1,v1,0xff
9d008218:92440000 lbua0,0(s2)

9d00821c <.LVL31>:
9d00821c:92420001 lbuv0,1(s2)

9d008220 <.LVL32>:
9d008220:70821002 mulv0,a0,v0

9d008224 <.LVL33>:
9d008224:24420001 addiuv0,v0,1
            uint8_t charwidth = font[charstart++];
9d008228:70622002 mula0,v1,v0

9d00822c <.LVL34>:
9d00822c:00921821 adduv1,a0,s2

9d008230 <.LVL35>:
            if (wrap && (cursor_x > (getWidth() - charwidth))) {
9d008230:92020010 lbuv0,16(s0)
9d008234:1040000a beqzv0,9d008260 <.LVL36+0x10>
9d008238:90740005 lbus4,5(v1)
9d00823c:8e130008 lws3,8(s0)
9d008240:8e020000 lwv0,0(s0)
9d008244:8c4200d8 lwv0,216(v0)
9d008248:0040f809 jalrv0
9d00824c:02002021 movea0,s0

9d008250 <.LVL36>:
9d008250:00541023 subuv0,v0,s4
9d008254:0053982a slts3,v0,s3
9d008258:56600010 bnezls3,9d00829c <.LBB18>
9d00825c:92420000 lbuv0,0(s2)
                cursor_y += header->linesPerCharacter;
                cursor_x = 0;
            }
            cursor_x += drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor);
9d008260:8e050008 lwa1,8(s0)
9d008264:8e06000c lwa2,12(s0)
9d008268:96020012 lhuv0,18(s0)
9d00826c:afa20010 swv0,16(sp)
9d008270:96020014 lhuv0,20(s0)
9d008274:afa20014 swv0,20(sp)
9d008278:02002021 movea0,s0
9d00827c:0f4013de jal9d004f78 <.LFE6>
9d008280:02203821 movea3,s1

9d008284 <.LVL37>:
9d008284:8e030008 lwv1,8(s0)
9d008288:00621021 adduv0,v1,v0

9d00828c <.LBE17>:
9d00828c:0b4020ae j9d0082b8 <.LVL41>
9d008290:ae020008 swv0,8(s0)

9d008294 <.LVL38>:
 *      tft.write('Q');
 */
#if ARDUINO >= 100
size_t DisplayCore::write(uint8_t c) {
    if (font == NULL) {
        return 0;
9d008294:0b4020af j9d0082bc <.LBE25>
9d008298:00001021 movev0,zero

9d00829c <.LBB18>:
        if (c >= header->startGlyph && c <= header->endGlyph) {
            uint8_t co = c - header->startGlyph;
            uint32_t charstart = (co * ((header->linesPerCharacter * header->bytesPerLine) + 1)) + sizeof(FontHeader); // Start of character data
            uint8_t charwidth = font[charstart++];
            if (wrap && (cursor_x > (getWidth() - charwidth))) {
                cursor_y += header->linesPerCharacter;
9d00829c:8e03000c lwv1,12(s0)
9d0082a0:00621021 adduv0,v1,v0
9d0082a4:ae02000c swv0,12(s0)
9d0082a8:0b402098 j9d008260 <.LVL36+0x10>
9d0082ac:ae000008 swzero,8(s0)

9d0082b0 <.LBE18>:
        if (c > header->endGlyph) {
            if (c >= 'a' && c <= 'z') {
                c -= ('a' - 'A');
            }
        }
        if (c >= header->startGlyph && c <= header->endGlyph) {
9d0082b0:5040ffd8 beqzlv0,9d008214 <.LVL30>
9d0082b4:02231823 subuv1,s1,v1

9d0082b8 <.LVL41>:
            }
            cursor_x += drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor);
        }
    }
#if ARDUINO >= 100
    return 1;
9d0082b8:24020001 liv0,1

9d0082bc <.LBE25>:
#endif
}
9d0082bc:8fbf002c lwra,44(sp)
9d0082c0:8fb40028 lws4,40(sp)
9d0082c4:8fb30024 lws3,36(sp)
9d0082c8:8fb20020 lws2,32(sp)
9d0082cc:8fb1001c lws1,28(sp)
9d0082d0:8fb00018 lws0,24(sp)

9d0082d4 <.LVL43>:
9d0082d4:03e00008 jrra
9d0082d8:27bd0030 addiusp,sp,48

Disassembly of section .text._ZN7SSD1289C2Ehhhhhhhhhhhhhhhhhhhhh:

9d0082dc <_ZN7SSD1289C1Ehhhhhhhhhhhhhhhhhhhhh>:
#include <SSD1289.h>

SSD1289::SSD1289(
9d0082dc:27bdff90 addiusp,sp,-112
9d0082e0:afbf006c swra,108(sp)
9d0082e4:afbe0068 sws8,104(sp)
9d0082e8:afb70064 sws7,100(sp)
9d0082ec:afb60060 sws6,96(sp)
9d0082f0:afb5005c sws5,92(sp)
9d0082f4:afb40058 sws4,88(sp)
9d0082f8:afb30054 sws3,84(sp)
9d0082fc:afb20050 sws2,80(sp)
9d008300:afb1004c sws1,76(sp)
9d008304:afb00048 sws0,72(sp)
9d008308:00808021 moves0,a0
9d00830c:30b100ff andis1,a1,0xff
9d008310:30d200ff andis2,a2,0xff
9d008314:30e700ff andia3,a3,0xff
9d008318:93af0080 lbut7,128(sp)
9d00831c:93ae0084 lbut6,132(sp)
9d008320:93ad0088 lbut5,136(sp)
9d008324:93ac008c lbut4,140(sp)
9d008328:93ab0090 lbut3,144(sp)
9d00832c:93aa0094 lbut2,148(sp)
9d008330:93a90098 lbut1,152(sp)
9d008334:93a8009c lbut0,156(sp)
9d008338:93a600a0 lbua2,160(sp)

9d00833c <.LVL8>:
9d00833c:93a500a4 lbua1,164(sp)

9d008340 <.LVL9>:
9d008340:93a300a8 lbuv1,168(sp)
9d008344:93a200ac lbuv0,172(sp)
9d008348:93be00b0 lbus8,176(sp)
9d00834c:93b700b4 lbus7,180(sp)
9d008350:93b600b8 lbus6,184(sp)
9d008354:93b500bc lbus5,188(sp)
9d008358:93b400c0 lbus4,192(sp)
9d00835c:93b300c4 lbus3,196(sp)
    uint8_t rs, uint8_t wr, uint8_t rd, uint8_t cs, uint8_t reset,
    uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
    uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7,
    uint8_t d8, uint8_t d9, uint8_t d10, uint8_t d11,
    uint8_t d12, uint8_t d13, uint8_t d14, uint8_t d15
) {
9d008360:afa20040 swv0,64(sp)
9d008364:afa3003c swv1,60(sp)
9d008368:afa50038 swa1,56(sp)
9d00836c:afa60034 swa2,52(sp)
9d008370:afa70010 swa3,16(sp)
9d008374:afa80030 swt0,48(sp)
9d008378:afa9002c swt1,44(sp)
9d00837c:afaa0028 swt2,40(sp)
9d008380:afab0024 swt3,36(sp)
9d008384:afac0020 swt4,32(sp)
9d008388:afad001c swt5,28(sp)
9d00838c:afae0018 swt6,24(sp)
9d008390:0f402a6a jal9d00a9a8 <.LFE182>
9d008394:afaf0014 swt7,20(sp)

9d008398 <.LVL10>:
9d008398:3c049d00 luia0,0x9d00
9d00839c:24841670 addiua0,a0,5744
9d0083a0:ae040000 swa0,0(s0)
    pin_rs = rs;
9d0083a4:a21100da sbs1,218(s0)
    pin_wr = wr;
9d0083a8:a21200dc sbs2,220(s0)
    pin_rd = rd;
9d0083ac:8fa70010 lwa3,16(sp)
9d0083b0:a20700db sba3,219(s0)
    pin_cs = cs;
9d0083b4:8faf0014 lwt7,20(sp)
9d0083b8:a20f00dd sbt7,221(s0)
    pin_reset = reset;
9d0083bc:8fae0018 lwt6,24(sp)
9d0083c0:a20e00de sbt6,222(s0)
    pin_d0 = d0;
9d0083c4:8fad001c lwt5,28(sp)
9d0083c8:a20d00df sbt5,223(s0)
    pin_d1 = d1;
9d0083cc:8fac0020 lwt4,32(sp)
9d0083d0:a20c00e0 sbt4,224(s0)
    pin_d2 = d2;
9d0083d4:8fab0024 lwt3,36(sp)
9d0083d8:a20b00e1 sbt3,225(s0)
    pin_d3 = d3;
9d0083dc:8faa0028 lwt2,40(sp)
9d0083e0:a20a00e2 sbt2,226(s0)
    pin_d4 = d4;
9d0083e4:8fa9002c lwt1,44(sp)
9d0083e8:a20900e3 sbt1,227(s0)
    pin_d5 = d5;
9d0083ec:8fa80030 lwt0,48(sp)
9d0083f0:a20800e4 sbt0,228(s0)
    pin_d6 = d6;
9d0083f4:8fa60034 lwa2,52(sp)
9d0083f8:a20600e5 sba2,229(s0)
    pin_d7 = d7;
9d0083fc:8fa50038 lwa1,56(sp)
9d008400:a20500e6 sba1,230(s0)
    pin_d8 = d8;
9d008404:8fa3003c lwv1,60(sp)
9d008408:a20300e7 sbv1,231(s0)
    pin_d9 = d9;
9d00840c:8fa20040 lwv0,64(sp)
9d008410:a20200e8 sbv0,232(s0)
    pin_d10 = d10;
9d008414:a21e00e9 sbs8,233(s0)
    pin_d11 = d11;
9d008418:a21700ea sbs7,234(s0)
    pin_d12 = d12;
9d00841c:a21600eb sbs6,235(s0)
    pin_d13 = d13;
9d008420:a21500ec sbs5,236(s0)
    pin_d14 = d14;
9d008424:a21400ed sbs4,237(s0)
    pin_d15 = d15;
9d008428:a21300ee sbs3,238(s0)
}
9d00842c:8fbf006c lwra,108(sp)
9d008430:8fbe0068 lws8,104(sp)
9d008434:8fb70064 lws7,100(sp)
9d008438:8fb60060 lws6,96(sp)
9d00843c:8fb5005c lws5,92(sp)
9d008440:8fb40058 lws4,88(sp)
9d008444:8fb30054 lws3,84(sp)
9d008448:8fb20050 lws2,80(sp)

9d00844c <.LVL11>:
9d00844c:8fb1004c lws1,76(sp)

9d008450 <.LVL12>:
9d008450:8fb00048 lws0,72(sp)

9d008454 <.LVL13>:
9d008454:03e00008 jrra
9d008458:27bd0070 addiusp,sp,112

Disassembly of section .text._ZN11DisplayCore8drawLineEiiiit:

9d00845c <_ZN11DisplayCore8drawLineEiiiit>:
 *  Example:
 *
 *      tft.drawLine(10, 10, 40, 60, Color::Green);
 */
// bresenham's algorithm - thx wikpedia
void DisplayCore::drawLine(int x0, int y0, int x1, int y1, color_t color) {
9d00845c:27bdffc0 addiusp,sp,-64
9d008460:afbf003c swra,60(sp)
9d008464:afbe0038 sws8,56(sp)
9d008468:afb70034 sws7,52(sp)
9d00846c:afb60030 sws6,48(sp)
9d008470:afb5002c sws5,44(sp)
9d008474:afb40028 sws4,40(sp)
9d008478:afb30024 sws3,36(sp)
9d00847c:afb20020 sws2,32(sp)
9d008480:afb1001c sws1,28(sp)
9d008484:afb00018 sws0,24(sp)
9d008488:0080a021 moves4,a0
9d00848c:00a08021 moves0,a1
9d008490:00c08821 moves1,a2
9d008494:00e09021 moves2,a3
9d008498:8fb30050 lws3,80(sp)

9d00849c <.LBB28>:
    startBuffer();
9d00849c:8c820000 lwv0,0(a0)
9d0084a0:8c4200c4 lwv0,196(v0)
9d0084a4:0040f809 jalrv0
9d0084a8:97be0054 lhus8,84(sp)

9d0084ac <.LVL1>:
    int steep = abs(y1 - y0) > abs(x1 - x0);
9d0084ac:0271b823 subus7,s3,s1
9d0084b0:001717c3 srav0,s7,0x1f
9d0084b4:0057b826 xors7,v0,s7
9d0084b8:02e2b823 subus7,s7,v0
9d0084bc:02501823 subuv1,s2,s0
9d0084c0:000317c3 srav0,v1,0x1f
9d0084c4:00431826 xorv1,v0,v1
9d0084c8:00621823 subuv1,v1,v0
9d0084cc:0077182a sltv1,v1,s7

9d0084d0 <.LVL2>:
    if (steep) {
9d0084d0:10600007 beqzv1,9d0084f0 <.LBE31>
9d0084d4:afa30010 swv1,16(sp)
9d0084d8:02401021 movev0,s2

9d0084dc <.LBB29>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d0084dc:02609021 moves2,s3

9d0084e0 <.LVL3>:
    i1 = i2;
9d0084e0:00409821 moves3,v0

9d0084e4 <.LBE29>:
9d0084e4:02001021 movev0,s0

9d0084e8 <.LBB31>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d0084e8:02208021 moves0,s1

9d0084ec <.LVL5>:
    i1 = i2;
9d0084ec:00408821 moves1,v0

9d0084f0 <.LBE31>:
        swap(x0, y0);
        swap(x1, y1);
    }

    if (x0 > x1) {
9d0084f0:0250102a sltv0,s2,s0
9d0084f4:10400008 beqzv0,9d008518 <.LVL12>
9d0084f8:0250b023 subus6,s2,s0
9d0084fc:02201021 movev0,s1

9d008500 <.LBB33>:
#ifndef _SWAP_H
#define _SWAP_H

static void inline swap(int &i0, int &i1) {
    int i2 = i0;
    i0 = i1;
9d008500:02608821 moves1,s3

9d008504 <.LVL7>:
    i1 = i2;
9d008504:00409821 moves3,v0

9d008508 <.LBE33>:
9d008508:02001021 movev0,s0

9d00850c <.LVL9>:
9d00850c:02408021 moves0,s2

9d008510 <.LVL10>:
9d008510:00409021 moves2,v0

9d008514 <.LVL11>:
        swap(x0, x1);
        swap(y0, y1);
    }

    int dx, dy;
    dx = x1 - x0;
9d008514:0250b023 subus6,s2,s0

9d008518 <.LVL12>:
    dy = abs(y1 - y0);
9d008518:02711023 subuv0,s3,s1
9d00851c:00021fc3 srav1,v0,0x1f

9d008520 <.LVL13>:
9d008520:0062b826 xors7,v1,v0
9d008524:02e3b823 subus7,s7,v1

9d008528 <.LVL14>:

    int err = dx / 2;
9d008528:0016afc2 srls5,s6,0x1f
9d00852c:02b6a821 addus5,s5,s6
9d008530:0015a843 sras5,s5,0x1

9d008534 <.LVL15>:
    int ystep;

    if (y0 < y1) {
9d008534:0233202a slta0,s1,s3
        ystep = 1;
9d008538:24130001 lis3,1

9d00853c <.LVL16>:
9d00853c:2403ffff liv1,-1
9d008540:0064980a movzs3,v1,a0

9d008544 <.LVL17>:
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
9d008544:0250202a slta0,s2,s0
9d008548:14800012 bneza0,9d008594 <.LBB36>
9d00854c:8e830000 lwv1,0(s4)
        if (steep) {
9d008550:8fa20010 lwv0,16(sp)
            setPixel(y0, x0, color);
9d008554:8c630084 lwv1,132(v1)
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
        if (steep) {
9d008558:10400004 beqzv0,9d00856c <.LBB35>
9d00855c:02802021 movea0,s4

9d008560 <.LVL18>:
            setPixel(y0, x0, color);
9d008560:02202821 movea1,s1

9d008564 <.LBE28>:
9d008564:0b40215d j9d008574 <.LBB35+0x8>
9d008568:02003021 movea2,s0

9d00856c <.LBB35>:
        } else {
            setPixel(x0, y0, color);
9d00856c:02002821 movea1,s0
9d008570:02203021 movea2,s1
9d008574:0060f809 jalrv1
9d008578:03c03821 movea3,s8

9d00857c <.LVL19>:
        }
        err -= dy;
9d00857c:02b7a823 subus5,s5,s7
        if (err < 0) {
9d008580:06a1fff0 bgezs5,9d008544 <.LVL17>
9d008584:26100001 addius0,s0,1
            y0 += ystep;
9d008588:02338821 addus1,s1,s3

9d00858c <.LBE35>:
            err += dx;
9d00858c:0b402151 j9d008544 <.LVL17>
9d008590:02b6a821 addus5,s5,s6

9d008594 <.LBB36>:
        }
    }
    endBuffer();
9d008594:8c7900c8 lwt9,200(v1)
9d008598:02802021 movea0,s4

9d00859c <.LBE36>:
}
9d00859c:8fbf003c lwra,60(sp)
9d0085a0:8fbe0038 lws8,56(sp)
9d0085a4:8fb70034 lws7,52(sp)

9d0085a8 <.LVL22>:
9d0085a8:8fb60030 lws6,48(sp)

9d0085ac <.LVL23>:
9d0085ac:8fb5002c lws5,44(sp)

9d0085b0 <.LVL24>:
9d0085b0:8fb40028 lws4,40(sp)

9d0085b4 <.LVL25>:
9d0085b4:8fb30024 lws3,36(sp)

9d0085b8 <.LVL26>:
9d0085b8:8fb20020 lws2,32(sp)

9d0085bc <.LVL27>:
9d0085bc:8fb1001c lws1,28(sp)

9d0085c0 <.LVL28>:
9d0085c0:8fb00018 lws0,24(sp)

9d0085c4 <.LBB37>:
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
    endBuffer();
9d0085c4:03200008 jrt9
9d0085c8:27bd0040 addiusp,sp,64

Disassembly of section .text._ZN7SSD128911setRotationEi:

9d0085cc <_ZN7SSD128911setRotationEi>:
#define SSD1289_ID1 0x0010
#define SSD1289_ID2 0x0020
#define SSD1289_ID3 0x0030
#define SSD1289_AM  0x0008

void SSD1289::setRotation(int m) {
9d0085cc:27bdffe8 addiusp,sp,-24
9d0085d0:afbf0014 swra,20(sp)
9d0085d4:afb00010 sws0,16(sp)
9d0085d8:00808021 moves0,a0
rotation = m % 4; // can't be higher than 3
9d0085dc:24020004 liv0,4
9d0085e0:00a2001a divzero,a1,v0
9d0085e4:004001f4 teqv0,zero,0x7
9d0085e8:00002810 mfhia1

9d0085ec <.LVL212>:
    switch(rotation) {
9d0085ec:24030001 liv1,1
9d0085f0:10a3001c beqa1,v1,9d008664 <.LVL215>
9d0085f4:ac850020 swa1,32(a0)
9d0085f8:28a30002 sltiv1,a1,2
9d0085fc:1060000c beqzv1,9d008630 <.LVL213+0x14>
9d008600:24030002 liv1,2
9d008604:14a00049 bneza1,9d00872c <.LVL226+0x14>
9d008608:8fbf0014 lwra,20(sp)
        case 0:
            command(0x0001); data(0x2B3F);
9d00860c:8c820000 lwv0,0(a0)
9d008610:8c4200e0 lwv0,224(v0)
9d008614:0040f809 jalrv0
9d008618:24050001 lia1,1

9d00861c <.LVL213>:
9d00861c:8e020000 lwv0,0(s0)
9d008620:8c4200e4 lwv0,228(v0)
9d008624:02002021 movea0,s0
9d008628:0b4021aa j9d0086a8 <.LVL219>
9d00862c:24052b3f lia1,11071
#define SSD1289_ID3 0x0030
#define SSD1289_AM  0x0008

void SSD1289::setRotation(int m) {
rotation = m % 4; // can't be higher than 3
    switch(rotation) {
9d008630:10a30015 beqa1,v1,9d008688 <.LVL217>
9d008634:24030003 liv1,3
9d008638:14a3003c bnea1,v1,9d00872c <.LVL226+0x14>
9d00863c:8fbf0014 lwra,20(sp)
            command(0x0011); data(0x6070);
            _width = Width;
            _height = Height;
            break;
        case 3:
            command(0x0001); data(0x293F);
9d008640:8c820000 lwv0,0(a0)
9d008644:8c4200e0 lwv0,224(v0)
9d008648:0040f809 jalrv0
9d00864c:24050001 lia1,1

9d008650 <.LVL214>:
9d008650:8e020000 lwv0,0(s0)
9d008654:8c4200e4 lwv0,228(v0)
9d008658:02002021 movea0,s0
9d00865c:0b4021ba j9d0086e8 <.LVL223>
9d008660:2405293f lia1,10559

9d008664 <.LVL215>:
            command(0x0011); data(0x6070);
            _width = Width;
            _height = Height;
            break;
        case 1:
            command(0x0001); data(0x6B3F);
9d008664:8c820000 lwv0,0(a0)
9d008668:8c4200e0 lwv0,224(v0)
9d00866c:0040f809 jalrv0
9d008670:24050001 lia1,1

9d008674 <.LVL216>:
9d008674:8e020000 lwv0,0(s0)
9d008678:8c4200e4 lwv0,228(v0)
9d00867c:02002021 movea0,s0
9d008680:0b4021ba j9d0086e8 <.LVL223>
9d008684:24056b3f lia1,27455

9d008688 <.LVL217>:
            command(0x0011); data(0x6078);
            _width = Height;
            _height = Width;
            break;
        case 2:
            command(0x0001); data(0x693F);
9d008688:8c820000 lwv0,0(a0)
9d00868c:8c4200e0 lwv0,224(v0)
9d008690:0040f809 jalrv0
9d008694:24050001 lia1,1

9d008698 <.LVL218>:
9d008698:8e020000 lwv0,0(s0)
9d00869c:8c4200e4 lwv0,228(v0)
9d0086a0:02002021 movea0,s0
9d0086a4:2405693f lia1,26943

9d0086a8 <.LVL219>:
9d0086a8:0040f809 jalrv0
9d0086ac:00000000 nop

9d0086b0 <.LVL220>:
            command(0x0011); data(0x6070);
9d0086b0:8e020000 lwv0,0(s0)
9d0086b4:8c4200e0 lwv0,224(v0)
9d0086b8:02002021 movea0,s0
9d0086bc:0040f809 jalrv0
9d0086c0:24050011 lia1,17

9d0086c4 <.LVL221>:
9d0086c4:8e020000 lwv0,0(s0)
9d0086c8:8c4200e4 lwv0,228(v0)
9d0086cc:02002021 movea0,s0
9d0086d0:0040f809 jalrv0
9d0086d4:24056070 lia1,24688

9d0086d8 <.LVL222>:
            _width = Width;
9d0086d8:240200f0 liv0,240
9d0086dc:ae020018 swv0,24(s0)
            _height = Height;
9d0086e0:0b4021c9 j9d008724 <.LVL226+0xc>
9d0086e4:24020140 liv0,320

9d0086e8 <.LVL223>:
            break;
        case 3:
            command(0x0001); data(0x293F);
9d0086e8:0040f809 jalrv0
9d0086ec:00000000 nop

9d0086f0 <.LVL224>:
            command(0x0011); data(0x6078);
9d0086f0:8e020000 lwv0,0(s0)
9d0086f4:8c4200e0 lwv0,224(v0)
9d0086f8:02002021 movea0,s0
9d0086fc:0040f809 jalrv0
9d008700:24050011 lia1,17

9d008704 <.LVL225>:
9d008704:8e020000 lwv0,0(s0)
9d008708:8c4200e4 lwv0,228(v0)
9d00870c:02002021 movea0,s0
9d008710:0040f809 jalrv0
9d008714:24056078 lia1,24696

9d008718 <.LVL226>:
            _width = Height;
9d008718:24020140 liv0,320
9d00871c:ae020018 swv0,24(s0)
            _height = Width;
9d008720:240200f0 liv0,240
9d008724:ae02001c swv0,28(s0)
            break;
    }
}
9d008728:8fbf0014 lwra,20(sp)
9d00872c:8fb00010 lws0,16(sp)

9d008730 <.LVL227>:
9d008730:03e00008 jrra
9d008734:27bd0018 addiusp,sp,24

Disassembly of section .text._ZN7SSD128913setAddrWindowEiiii:

9d008738 <_ZN7SSD128913setAddrWindowEiiii>:
    int t = a;
    a = b;
    b = t;
}

void SSD1289::setAddrWindow(int x0, int y0, int x1, int y1) {
9d008738:27bdffd8 addiusp,sp,-40
9d00873c:afbf0024 swra,36(sp)
9d008740:afb40020 sws4,32(sp)
9d008744:afb3001c sws3,28(sp)
9d008748:afb20018 sws2,24(sp)
9d00874c:afb10014 sws1,20(sp)
9d008750:afb00010 sws0,16(sp)
9d008754:00808021 moves0,a0
9d008758:00a08821 moves1,a1
9d00875c:00c09021 moves2,a2
9d008760:00e0a021 moves4,a3

9d008764 <.LBB10>:

    int x0a, x1a, y0a, y1a;

    switch(rotation) {
9d008764:8c820020 lwv0,32(a0)
9d008768:24030001 liv1,1
9d00876c:10430004 beqv0,v1,9d008780 <.LBB10+0x1c>
9d008770:8fb30038 lws3,56(sp)
9d008774:24030003 liv1,3
9d008778:54430008 bnelv0,v1,9d00879c <.LBE13+0x4>
9d00877c:8e020000 lwv0,0(s0)
9d008780:02801021 movev0,s4

9d008784 <.LBB11>:
    command(0x0022);
}

static void inline swap(int &a, int &b) {
    int t = a;
    a = b;
9d008784:0260a021 moves4,s3
    b = t;
9d008788:00409821 moves3,v0

9d00878c <.LBE11>:

void SSD1289::setAddrWindow(int x0, int y0, int x1, int y1) {

    int x0a, x1a, y0a, y1a;

    switch(rotation) {
9d00878c:02201021 movev0,s1

9d008790 <.LBB13>:
    command(0x0022);
}

static void inline swap(int &a, int &b) {
    int t = a;
    a = b;
9d008790:02408821 moves1,s2
    b = t;
9d008794:00409021 moves2,v0

9d008798 <.LBE13>:
        case 3:
            swap(x0, y0);
            swap(x1, y1);
            break;
    }
    command(68); data((x1 << 8) | x0);
9d008798:8e020000 lwv0,0(s0)
9d00879c:8c4200e0 lwv0,224(v0)
9d0087a0:02002021 movea0,s0

9d0087a4 <.LVL162>:
9d0087a4:0040f809 jalrv0
9d0087a8:24050044 lia1,68

9d0087ac <.LVL163>:
9d0087ac:8e020000 lwv0,0(s0)
9d0087b0:0014a200 slls4,s4,0x8

9d0087b4 <.LVL164>:
9d0087b4:02912825 ora1,s4,s1
9d0087b8:8c4200e4 lwv0,228(v0)
9d0087bc:02002021 movea0,s0
9d0087c0:0040f809 jalrv0
9d0087c4:30a5ffff andia1,a1,0xffff

9d0087c8 <.LVL165>:
    command(69); data(y0);
9d0087c8:8e020000 lwv0,0(s0)
9d0087cc:8c4200e0 lwv0,224(v0)
9d0087d0:02002021 movea0,s0
9d0087d4:0040f809 jalrv0
9d0087d8:24050045 lia1,69

9d0087dc <.LVL166>:
9d0087dc:3252ffff andis2,s2,0xffff

9d0087e0 <.LVL167>:
9d0087e0:8e020000 lwv0,0(s0)
9d0087e4:8c4200e4 lwv0,228(v0)
9d0087e8:02002021 movea0,s0
9d0087ec:0040f809 jalrv0
9d0087f0:02402821 movea1,s2

9d0087f4 <.LVL168>:
    command(70); data(y1);
9d0087f4:8e020000 lwv0,0(s0)
9d0087f8:8c4200e0 lwv0,224(v0)
9d0087fc:02002021 movea0,s0
9d008800:0040f809 jalrv0
9d008804:24050046 lia1,70

9d008808 <.LVL169>:
9d008808:8e020000 lwv0,0(s0)
9d00880c:8c4200e4 lwv0,228(v0)
9d008810:02002021 movea0,s0
9d008814:0040f809 jalrv0
9d008818:3265ffff andia1,s3,0xffff

9d00881c <.LVL170>:
    command(78); data(x0);
9d00881c:8e020000 lwv0,0(s0)
9d008820:8c4200e0 lwv0,224(v0)
9d008824:02002021 movea0,s0
9d008828:0040f809 jalrv0
9d00882c:2405004e lia1,78

9d008830 <.LVL171>:
9d008830:8e020000 lwv0,0(s0)
9d008834:8c4200e4 lwv0,228(v0)
9d008838:02002021 movea0,s0
9d00883c:0040f809 jalrv0
9d008840:3225ffff andia1,s1,0xffff

9d008844 <.LVL172>:
    command(79); data(y0);
9d008844:8e020000 lwv0,0(s0)
9d008848:8c4200e0 lwv0,224(v0)
9d00884c:02002021 movea0,s0
9d008850:0040f809 jalrv0
9d008854:2405004f lia1,79

9d008858 <.LVL173>:
9d008858:8e020000 lwv0,0(s0)
9d00885c:8c4200e4 lwv0,228(v0)
9d008860:02002021 movea0,s0
9d008864:0040f809 jalrv0
9d008868:02402821 movea1,s2

9d00886c <.LVL174>:
    command(34);
9d00886c:8e020000 lwv0,0(s0)
9d008870:8c5900e0 lwt9,224(v0)
9d008874:02002021 movea0,s0
9d008878:24050022 lia1,34

9d00887c <.LBE10>:
}
9d00887c:8fbf0024 lwra,36(sp)
9d008880:8fb40020 lws4,32(sp)
9d008884:8fb3001c lws3,28(sp)

9d008888 <.LVL175>:
9d008888:8fb20018 lws2,24(sp)
9d00888c:8fb10014 lws1,20(sp)

9d008890 <.LVL176>:
9d008890:8fb00010 lws0,16(sp)

9d008894 <.LBB15>:
    command(68); data((x1 << 8) | x0);
    command(69); data(y0);
    command(70); data(y1);
    command(78); data(x0);
    command(79); data(y0);
    command(34);
9d008894:03200008 jrt9
9d008898:27bd0028 addiusp,sp,40

Disassembly of section .text._Z14regularStripesttmm:

9d00889c <L0>:
uint32_t l = off;
for (int i = 0; i < 24; i++) {
tft.drawHorizontalLine(0, i, tft.getWidth(), (l / w) & 1 ? ca : cb);
l++;
}
for (int i = 24; i < 216; i++) {
9d00889c:27bdffc8 addiusp,sp,-56
9d0088a0:afbf0034 swra,52(sp)
9d0088a4:afb60030 sws6,48(sp)
9d0088a8:afb5002c sws5,44(sp)
9d0088ac:afb40028 sws4,40(sp)
9d0088b0:afb30024 sws3,36(sp)
9d0088b4:afb20020 sws2,32(sp)
9d0088b8:afb1001c sws1,28(sp)
9d0088bc:afb00018 sws0,24(sp)
9d0088c0:00c08021 moves0,a2
9d0088c4:00e0a021 moves4,a3
9d0088c8:3092ffff andis2,a0,0xffff
9d0088cc:30b3ffff andis3,a1,0xffff

9d0088d0 <.LBB6>:
uint16_t c = (l/w) & 1 ? ca : cb;
tft.drawHorizontalLine(0, i, 32, c);
9d0088d0:00008821 moves1,zero
9d0088d4:24160018 lis6,24

9d0088d8 <.LVL39>:
9d0088d8:0234a821 addus5,s1,s4

9d0088dc <.LVL40>:
tft.drawHorizontalLine(288, i, 32, c);
9d0088dc:0f4030cf jal9d00c33c <.LFE197>
9d0088e0:27848338 addiua0,gp,-31944

9d0088e4 <.LVL41>:
9d0088e4:02b0001b divuzero,s5,s0
9d0088e8:020001f4 teqs0,zero,0x7
9d0088ec:0000a812 mflos5

9d0088f0 <.LVL42>:
9d0088f0:32b50001 andis5,s5,0x1
9d0088f4:02401821 movev1,s2
9d0088f8:0275180a movzv1,s3,s5
9d0088fc:afa30010 swv1,16(sp)
9d008900:27848338 addiua0,gp,-31944
9d008904:00002821 movea1,zero
9d008908:02203021 movea2,s1
9d00890c:0f4029ee jal9d00a7b8 <L0>
9d008910:00403821 movea3,v0

9d008914 <.LVL43>:
tft.drawHorizontalLine(0, i, tft.getWidth(), (l / w) & 1 ? ca : cb);
l++;
}
for (int i = 24; i < 216; i++) {
uint16_t c = (l/w) & 1 ? ca : cb;
tft.drawHorizontalLine(0, i, 32, c);
9d008914:26310001 addius1,s1,1

9d008918 <.LVL44>:
9d008918:1636fff0 bnes1,s6,9d0088dc <.LVL40>
9d00891c:0234a821 addus5,s1,s4
9d008920:24110018 lis1,24

9d008924 <.LBB8>:
tft.drawHorizontalLine(288, i, 32, c);
l++;
}
for (int i = 216; i < 240; i++) {
9d008924:241600d8 lis6,216

9d008928 <.LVL46>:
9d008928:0234a821 addus5,s1,s4

9d00892c <.LBB9>:
tft.drawHorizontalLine(0, i, tft.getWidth(), (l/w) & 1 ? ca : cb);
9d00892c:02b0001b divuzero,s5,s0
9d008930:020001f4 teqs0,zero,0x7
9d008934:0000a812 mflos5

9d008938 <.LVL48>:
9d008938:32b50001 andis5,s5,0x1
9d00893c:02401021 movev0,s2
9d008940:0275100a movzv0,s3,s5
9d008944:0040a821 moves5,v0

9d008948 <.LVL49>:
l++;
9d008948:afa20010 swv0,16(sp)
9d00894c:27848338 addiua0,gp,-31944
9d008950:00002821 movea1,zero
9d008954:02203021 movea2,s1
9d008958:0f4029ee jal9d00a7b8 <L0>
9d00895c:24070020 lia3,32

9d008960 <.LVL50>:
}
9d008960:afb50010 sws5,16(sp)
9d008964:27848338 addiua0,gp,-31944
9d008968:24050120 lia1,288
9d00896c:02203021 movea2,s1
9d008970:0f4029ee jal9d00a7b8 <L0>
9d008974:24070020 lia3,32

9d008978 <.LBE9>:
uint16_t c = (l/w) & 1 ? ca : cb;
tft.drawHorizontalLine(0, i, 32, c);
tft.drawHorizontalLine(288, i, 32, c);
l++;
}
for (int i = 216; i < 240; i++) {
9d008978:26310001 addius1,s1,1

9d00897c <.LVL52>:
9d00897c:1636ffeb bnes1,s6,9d00892c <.LBB9>
9d008980:0234a821 addus5,s1,s4
9d008984:241100d8 lis1,216

9d008988 <.LBB10>:
tft.drawHorizontalLine(0, i, tft.getWidth(), (l/w) & 1 ? ca : cb);
l++;
}
}

void silence(uint32_t del) {
9d008988:241600f0 lis6,240

9d00898c <.LVL54>:
9d00898c:0234a821 addus5,s1,s4

9d008990 <.LVL55>:
uint32_t ts = millis();
9d008990:0f4030cf jal9d00c33c <.LFE197>
9d008994:27848338 addiua0,gp,-31944

9d008998 <.LVL56>:
9d008998:02b0001b divuzero,s5,s0
9d00899c:020001f4 teqs0,zero,0x7
9d0089a0:0000a812 mflos5

9d0089a4 <.LVL57>:
9d0089a4:32b50001 andis5,s5,0x1
9d0089a8:02401821 movev1,s2
9d0089ac:0275180a movzv1,s3,s5
9d0089b0:afa30010 swv1,16(sp)
9d0089b4:27848338 addiua0,gp,-31944
9d0089b8:00002821 movea1,zero
9d0089bc:02203021 movea2,s1
9d0089c0:0f4029ee jal9d00a7b8 <L0>
9d0089c4:00403821 movea3,v0

9d0089c8 <.LVL58>:
tft.drawHorizontalLine(0, i, tft.getWidth(), (l/w) & 1 ? ca : cb);
l++;
}
}

void silence(uint32_t del) {
9d0089c8:26310001 addius1,s1,1

9d0089cc <.LVL59>:
9d0089cc:1636fff0 bnes1,s6,9d008990 <.LVL55>
9d0089d0:0234a821 addus5,s1,s4

9d0089d4 <.LBE10>:
uint32_t ts = millis();
bool color = false;

setBorderSingle(Color::Cyan);
9d0089d4:8fbf0034 lwra,52(sp)
9d0089d8:8fb60030 lws6,48(sp)
9d0089dc:8fb5002c lws5,44(sp)
9d0089e0:8fb40028 lws4,40(sp)

9d0089e4 <.LVL60>:
9d0089e4:8fb30024 lws3,36(sp)

9d0089e8 <.LVL61>:
9d0089e8:8fb20020 lws2,32(sp)

9d0089ec <.LVL62>:
9d0089ec:8fb1001c lws1,28(sp)

9d0089f0 <.LVL63>:
9d0089f0:8fb00018 lws0,24(sp)

9d0089f4 <.LVL64>:
9d0089f4:03e00008 jrra
9d0089f8:27bd0038 addiusp,sp,56

Disassembly of section .text.pinMode:

9d0089fc <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

//************************************************************************
void pinMode(uint8_t pin, uint8_t mode)
{
9d0089fc:308400ff andia0,a0,0xff
uint32_t                cn;
#endif

/* Check if pin number is in valid range.
*/
if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d008a00:2c820047 sltiuv0,a0,71
9d008a04:10400053 beqzv0,9d008b54 <.LVL11>
9d008a08:30a500ff andia1,a1,0xff
#include "wiring_private.h"
#include "pins_arduino.h"

//************************************************************************
void pinMode(uint8_t pin, uint8_t mode)
{
9d008a0c:27bdffe0 addiusp,sp,-32
9d008a10:afbf001c swra,28(sp)
9d008a14:afb10018 sws1,24(sp)
9d008a18:afb00014 sws0,20(sp)
return;
}
#endif// OPT_BOARD_DIGITAL_IO

//* Get the port number for this pin.
if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d008a1c:3c109d01 luis0,0x9d01
9d008a20:2610b9b0 addius0,s0,-18000
9d008a24:7e04818a lbuxs0,a0(s0)

9d008a28 <.LVL1>:
9d008a28:12000046 beqzs0,9d008b44 <.LVL10>
9d008a2c:00108080 slls0,s0,0x2
{
return;
}

//* Obtain pointer to the registers for this io port.
iop = (p32_ioport *)portRegisters(port);
9d008a30:3c029d01 luiv0,0x9d01
9d008a34:2442bde8 addiuv0,v0,-16920
9d008a38:7c50800a lwxs0,s0(v0)

9d008a3c <.LVL2>:

//* Obtain bit mask for the specific bit for this pin.
bit = digitalPinToBitMask(pin);
9d008a3c:00041040 sllv0,a0,0x1
9d008a40:3c039d01 luiv1,0x9d01
9d008a44:2463ae74 addiuv1,v1,-20876
9d008a48:00431821 adduv1,v0,v1
9d008a4c:94710000 lhus1,0(v1)

9d008a50 <.LVL3>:
volatile uint32_t *pps;

// The MX1xx/MX2xx support peripheral pin select (PPS). It is necessary
// to ensure that the pin is mapped as a general purpose i/o and not
// mapped to a peripheral.
if (isPpsPin(pin))
9d008a50:3c039d01 luiv1,0x9d01
9d008a54:2463b9f8 addiuv1,v1,-17928
9d008a58:7c64218a lbuxa0,a0(v1)

9d008a5c <.LVL4>:
9d008a5c:240300ff liv1,255
9d008a60:10830006 beqa0,v1,9d008a7c <.LVL6>
9d008a64:2610fff0 addius0,s0,-16
{
pps = ppsOutputRegister(pin);
9d008a68:00042080 slla0,a0,0x2
9d008a6c:3c03bf80 luiv1,0xbf80
9d008a70:24631538 addiuv1,v1,5432
9d008a74:00642021 addua0,v1,a0

9d008a78 <.LVL5>:
*pps = ppsOutputSelect(PPS_OUT_GPIO);
9d008a78:ac800000 swzero,0(a0)

9d008a7c <.LVL6>:
// The MX1xx/MX2xx devices have an ANSELx register associated with
// each io port that is used to control analog/digital mode of the
// analog input capable pins.
// Clear the bit in the ANSELx register to ensure that the pin is in
// digital input mode.
iop->ansel.clr = bit;
9d008a7c:ae110004 sws1,4(s0)

}
#endif// defined(__PIC32_PPS__)

// Set the pin to the requested mode.
    switch (mode) {
9d008a80:24030002 liv1,2
9d008a84:10a30027 beqa1,v1,9d008b24 <.LVL9>
9d008a88:2ca30003 sltiuv1,a1,3
9d008a8c:50600005 beqzlv1,9d008aa4 <.LVL6+0x28>
9d008a90:2ca30006 sltiuv1,a1,6
9d008a94:10a00005 beqza1,9d008aac <.LVL6+0x30>
9d008a98:24030003 liv1,3
9d008a9c:0b4022cd j9d008b34 <.LVL9+0x10>
9d008aa0:00000000 nop
9d008aa4:10600023 beqzv1,9d008b34 <.LVL9+0x10>
9d008aa8:24030003 liv1,3
        case INPUT:
        case INPUT_PULLUP:
        case INPUT_PULLDOWN:
        case INPUT_PULLUPDOWN:
#if defined(__PIC32_PPS__)
            if (mode == INPUT_PULLUP) {
9d008aac:14a30004 bnea1,v1,9d008ac0 <.LVL6+0x44>
9d008ab0:24030004 liv1,4
                iop->cnpu.set = bit;
9d008ab4:ae110058 sws1,88(s0)
9d008ab8:0b4022bc j9d008af0 <.LVL6+0x74>
9d008abc:00000000 nop
                iop->cnpd.clr = bit;
            } else if (mode == INPUT_PULLDOWN) {
9d008ac0:14a30004 bnea1,v1,9d008ad4 <.LVL6+0x58>
9d008ac4:24030005 liv1,5
                iop->cnpu.clr = bit;
9d008ac8:ae110054 sws1,84(s0)
9d008acc:0b4022b8 j9d008ae0 <.LVL6+0x64>
9d008ad0:00000000 nop
                iop->cnpd.set = bit;
            } else if (mode == INPUT_PULLUPDOWN) {
9d008ad4:14a30005 bnea1,v1,9d008aec <.LVL6+0x70>
9d008ad8:00000000 nop
                iop->cnpu.set = bit;
9d008adc:ae110058 sws1,88(s0)
                iop->cnpd.set = bit;
9d008ae0:ae110068 sws1,104(s0)
9d008ae4:0b4022be j9d008af8 <.LVL6+0x7c>
9d008ae8:3c049d01 luia0,0x9d01
            } else {
                iop->cnpu.clr = bit;
9d008aec:ae110054 sws1,84(s0)
                iop->cnpd.clr = bit;
9d008af0:ae110064 sws1,100(s0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d008af4:3c049d01 luia0,0x9d01
9d008af8:2484af04 addiua0,a0,-20732
9d008afc:7c82218a lbuxa0,v0(a0)
9d008b00:3084000f andia0,a0,0xf

9d008b04 <.LVL7>:
            if (timer != NOT_ON_TIMER)
9d008b04:10800003 beqza0,9d008b14 <.LVL8>
9d008b08:00000000 nop
            {
                turnOffPWM(timer);
9d008b0c:0f402dce jal9d00b738 <.LFE171>
9d008b10:00000000 nop

9d008b14 <.LVL8>:
            }

            //*May  1,2011
            //*according to item #26 in PIC32MX5XX-6XX-7XX Errata.pdf 
            //*if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;//clear to output bit
9d008b14:ae110034 sws1,52(s0)
            iop->tris.set = bit;//make the pin an input
9d008b18:ae110018 sws1,24(s0)
            break;
9d008b1c:0b4022d2 j9d008b48 <.LVL10+0x4>
9d008b20:8fbf001c lwra,28(sp)

9d008b24 <.LVL9>:
        case OPEN:
            iop->tris.clr = bit;//OPEN implies output, make the pin an output
9d008b24:ae110014 sws1,20(s0)
            iop->odc.set  = bit;//make the pin open drain
9d008b28:ae110048 sws1,72(s0)
            break;
9d008b2c:0b4022d2 j9d008b48 <.LVL10+0x4>
9d008b30:8fbf001c lwra,28(sp)
        default:
            // The behavior inherited from Arduino is that if INPUT wasn't
            // specified you get OUTPUT. That behavior is preserved rather
            // than error checking the input value.
#if defined(__PIC32_PPS__)
            iop->cnpu.clr = bit;
9d008b34:ae110054 sws1,84(s0)
            iop->cnpd.clr = bit;
9d008b38:ae110064 sws1,100(s0)
            cn = digitalPinToCN(pin);
            if (cn != NOT_CN_PIN) {
                CNPUECLR = cn;
            } 
#endif
            iop->tris.clr = bit;//make the pin an output
9d008b3c:ae110014 sws1,20(s0)
            iop->odc.clr  = bit;//make sure it isn't open drain
9d008b40:ae110044 sws1,68(s0)

9d008b44 <.LVL10>:
}
}
9d008b44:8fbf001c lwra,28(sp)
9d008b48:8fb10018 lws1,24(sp)
9d008b4c:8fb00014 lws0,20(sp)
9d008b50:27bd0020 addiusp,sp,32

9d008b54 <.LVL11>:
9d008b54:03e00008 jrra
9d008b58:00000000 nop

Disassembly of section .text._sbrk_init:

9d008b5c <L0>:
9d008b5c:3c028000 luiv0,0x8000
9d008b60:8c4323ac lwv1,9132(v0)
9d008b64:14600051 bnezv1,9d008cac <L0+0x150>
9d008b68:00000000 nop
9d008b6c:27bdffd8 addiusp,sp,-40
9d008b70:afbf0024 swra,36(sp)
9d008b74:afb40020 sws4,32(sp)
9d008b78:afb3001c sws3,28(sp)
9d008b7c:afb20018 sws2,24(sp)
9d008b80:afb10014 sws1,20(sp)
9d008b84:afb00010 sws0,16(sp)
9d008b88:3c128000 luis2,0x8000
9d008b8c:8e4323a4 lwv1,9124(s2)
9d008b90:14600003 bnezv1,9d008ba0 <L0+0x44>
9d008b94:0040a021 moves4,v0
9d008b98:3c038000 luiv1,0x8000
9d008b9c:246323b8 addiuv1,v1,9144
9d008ba0:3c138000 luis3,0x8000
9d008ba4:8e6223a8 lwv0,9128(s3)
9d008ba8:14400006 bnezv0,9d008bc4 <L0+0x68>
9d008bac:00038782 srls0,v1,0x1e
9d008bb0:3c040000 luia0,0x0
9d008bb4:24840800 addiua0,a0,2048
9d008bb8:3c028000 luiv0,0x8000
9d008bbc:244223b8 addiuv0,v0,9144
9d008bc0:00441021 adduv0,v0,a0
9d008bc4:7c64e000 exta0,v1,0x0,0x1d
9d008bc8:3a100002 xoris0,s0,0x2
9d008bcc:0090180a movzv1,a0,s0
9d008bd0:00608021 moves0,v1
9d008bd4:00028f82 srls1,v0,0x1e
9d008bd8:7c43e000 extv1,v0,0x0,0x1d
9d008bdc:3a310002 xoris1,s1,0x2
9d008be0:0071100a movzv0,v1,s1
9d008be4:0f402fb3 jal9d00becc <_stub_sbd_memlayout>
9d008be8:00408821 moves1,v0
9d008bec:8c430000 lwv1,0(v0)
9d008bf0:8c420004 lwv0,4(v0)
9d008bf4:0203202b sltua0,s0,v1
9d008bf8:14800004 bneza0,9d008c0c <L0+0xb0>
9d008bfc:00621021 adduv0,v1,v0
9d008c00:0202202b sltua0,s0,v0
9d008c04:54800008 bnezla0,9d008c28 <L0+0xcc>
9d008c08:0230182b sltuv1,s1,s0
9d008c0c:3c048000 luia0,0x8000
9d008c10:24840948 addiua0,a0,2376
9d008c14:7c84e000 exta0,a0,0x0,0x1d
9d008c18:0064202b sltua0,v1,a0
9d008c1c:1480001c bneza0,9d008c90 <L0+0x134>
9d008c20:00608021 moves0,v1
9d008c24:0230182b sltuv1,s1,s0
9d008c28:14600005 bnezv1,9d008c40 <L0+0xe4>
9d008c2c:0202182b sltuv1,s0,v0
9d008c30:0222182b sltuv1,s1,v0
9d008c34:54600005 bnezlv1,9d008c4c <L0+0xf0>
9d008c38:3c028000 luiv0,0x8000
9d008c3c:0202182b sltuv1,s0,v0
9d008c40:10600013 beqzv1,9d008c90 <L0+0x134>
9d008c44:00408821 moves1,v0
9d008c48:3c028000 luiv0,0x8000
9d008c4c:24420948 addiuv0,v0,2376
9d008c50:00021742 srlv0,v0,0x1d
9d008c54:24030005 liv1,5
9d008c58:14430003 bnev0,v1,9d008c68 <L0+0x10c>
9d008c5c:24030004 liv1,4
9d008c60:0b40231c j9d008c70 <L0+0x114>
9d008c64:3c02a000 luiv0,0xa000
9d008c68:14430006 bnev0,v1,9d008c84 <L0+0x128>
9d008c6c:3c028000 luiv0,0x8000
9d008c70:02028025 ors0,s0,v0
9d008c74:ae5023a4 sws0,9124(s2)
9d008c78:02228825 ors1,s1,v0
9d008c7c:0b402322 j9d008c88 <L0+0x12c>
9d008c80:ae7123a8 sws1,9128(s3)
9d008c84:ae5123a4 sws1,9124(s2)
9d008c88:8e4223a4 lwv0,9124(s2)
9d008c8c:ae8223ac swv0,9132(s4)
9d008c90:8fbf0024 lwra,36(sp)
9d008c94:8fb40020 lws4,32(sp)
9d008c98:8fb3001c lws3,28(sp)
9d008c9c:8fb20018 lws2,24(sp)
9d008ca0:8fb10014 lws1,20(sp)
9d008ca4:8fb00010 lws0,16(sp)
9d008ca8:27bd0028 addiusp,sp,40
9d008cac:03e00008 jrra
9d008cb0:00000000 nop

Disassembly of section .text._Z21SoftPWMServoPinEnablemb:

9d008cb4 <L0>:
    return SOFTPWMSERVO_OK;
}

// Enable SoftPWM functionality on a particular pin number
int32_t SoftPWMServoPinEnable(uint32_t Pin, bool PinType)
{
9d008cb4:27bdffd8 addiusp,sp,-40
9d008cb8:afbf0024 swra,36(sp)
9d008cbc:afb40020 sws4,32(sp)
9d008cc0:afb3001c sws3,28(sp)
9d008cc4:afb20018 sws2,24(sp)
9d008cc8:afb10014 sws1,20(sp)
9d008ccc:afb00010 sws0,16(sp)
9d008cd0:00808021 moves0,a0
    if (Pin >= SOFTPWMSERVO_MAX_PINS)
9d008cd4:2c820047 sltiuv0,a0,71
9d008cd8:10400041 beqzv0,9d008de0 <.LVL13>
9d008cdc:30b400ff andis4,a1,0xff
    {
        return SOFTPWMSERVO_ERROR;
    }
        
    // If user has not already enabled this pin for SoftPWM, then initialize it
    if (Chan[InactiveBuffer][Pin].SetPort == NULL)
9d008ce0:24120047 lis2,71
9d008ce4:8f8284dc lwv0,-31524(gp)
9d008ce8:70521802 mulv1,v0,s2
9d008cec:00641021 adduv0,v1,a0
9d008cf0:3c118000 luis1,0x8000
9d008cf4:26310948 addius1,s1,2376
9d008cf8:00021140 sllv0,v0,0x5
9d008cfc:02221021 adduv0,s1,v0
9d008d00:8c420004 lwv0,4(v0)
9d008d04:14400037 bnezv0,9d008de4 <.LVL14>
9d008d08:00009821 moves3,zero

9d008d0c <.LVL9>:
    {
        // Set up this pin's 
        pinMode(Pin, OUTPUT);                                      // set servo pin to output
9d008d0c:0f40227f jal9d0089fc <.LFE181>
9d008d10:24050001 lia1,1

9d008d14 <.LVL10>:
        digitalWrite(Pin, LOW);                                    // Always start out low
9d008d14:02002021 movea0,s0
9d008d18:0f402778 jal9d009de0 <.LFE170>
9d008d1c:00002821 movea1,zero

9d008d20 <.LVL11>:
        Chan[InactiveBuffer][Pin].NextEdgeTime = 0;                // Computed on the fly in the ISR
9d008d20:8f8384dc lwv1,-31524(gp)
9d008d24:70721002 mulv0,v1,s2
9d008d28:00501821 adduv1,v0,s0
9d008d2c:00031940 sllv1,v1,0x5
9d008d30:00711821 adduv1,v1,s1
9d008d34:ac600000 swzero,0(v1)
        Chan[InactiveBuffer][Pin].Port = digitalPinToPort(Pin);    // Set up our bit and port so we don't have to
9d008d38:3c069d01 luia2,0x9d01
9d008d3c:24c6b9b0 addiua2,a2,-18000
9d008d40:7cd0318a lbuxa2,s0(a2)
9d008d44:ac66000c swa2,12(v1)
        Chan[InactiveBuffer][Pin].Bit = digitalPinToBitMask(Pin);  //  do it inside the ISR.
9d008d48:00102040 slla0,s0,0x1
9d008d4c:3c029d01 luiv0,0x9d01
9d008d50:2442ae74 addiuv0,v0,-20876
9d008d54:00821021 adduv0,a0,v0
9d008d58:94420000 lhuv0,0(v0)
9d008d5c:ac620010 swv0,16(v1)
        Chan[InactiveBuffer][Pin].SetPort = portOutputRegister(Chan[InactiveBuffer][Pin].Port) + 2; // +2 is PORTxSET
9d008d60:00063880 slla3,a2,0x2
9d008d64:3c049d01 luia0,0x9d01
9d008d68:2484bde8 addiua0,a0,-16920
9d008d6c:7c87380a lwxa3,a3(a0)
9d008d70:24e50028 addiua1,a3,40
9d008d74:ac650004 swa1,4(v1)
        Chan[InactiveBuffer][Pin].ClearPort = portOutputRegister(Chan[InactiveBuffer][Pin].Port) + 1; // +1 is PORTxCLR
9d008d78:24e70024 addiua3,a3,36
9d008d7c:ac670008 swa3,8(v1)
        Chan[InactiveBuffer][Pin].PWMValue = 0;                    // Start out with zero PWM time (always off)
9d008d80:ac600014 swzero,20(v1)
        Chan[InactiveBuffer][Pin].IsServo = PinType;               // Set the type for this pin (servo vs PWM)
        Chan[InactiveBuffer][Pin].NextChanP = NULL;                // Add() will set this
9d008d84:ac60001c swzero,28(v1)
        // Now also do the same thing in the other buffer
        Chan[ActiveBuffer][Pin].NextEdgeTime = 0;                  
9d008d88:8f8584d0 lwa1,-31536(gp)
9d008d8c:70b23802 mula3,a1,s2
9d008d90:00f08021 addus0,a3,s0

9d008d94 <.LVL12>:
9d008d94:00108140 slls0,s0,0x5
9d008d98:02118021 addus0,s0,s1
9d008d9c:ae000000 swzero,0(s0)
        Chan[ActiveBuffer][Pin].Port = digitalPinToPort(Pin);    
9d008da0:ae06000c swa2,12(s0)
        Chan[ActiveBuffer][Pin].Bit = digitalPinToBitMask(Pin);  
9d008da4:ae020010 swv0,16(s0)
        Chan[ActiveBuffer][Pin].SetPort = portOutputRegister(Chan[InactiveBuffer][Pin].Port) + 2;
9d008da8:8c62000c lwv0,12(v1)
9d008dac:00021080 sllv0,v0,0x2
9d008db0:7c82100a lwxv0,v0(a0)
9d008db4:24420028 addiuv0,v0,40
9d008db8:ae020004 swv0,4(s0)
        Chan[ActiveBuffer][Pin].ClearPort = portOutputRegister(Chan[InactiveBuffer][Pin].Port) + 1;
9d008dbc:8c62000c lwv0,12(v1)
9d008dc0:00021080 sllv0,v0,0x2
9d008dc4:7c82200a lwxa0,v0(a0)
9d008dc8:24840024 addiua0,a0,36
9d008dcc:ae040008 swa0,8(s0)
        Chan[ActiveBuffer][Pin].PWMValue = 0;                    
9d008dd0:ae000014 swzero,20(s0)
        Chan[InactiveBuffer][Pin].IsServo = PinType;
9d008dd4:ac740018 sws4,24(v1)
9d008dd8:0b402379 j9d008de4 <.LVL14>
9d008ddc:ae00001c swzero,28(s0)

9d008de0 <.LVL13>:
// Enable SoftPWM functionality on a particular pin number
int32_t SoftPWMServoPinEnable(uint32_t Pin, bool PinType)
{
    if (Pin >= SOFTPWMSERVO_MAX_PINS)
    {
        return SOFTPWMSERVO_ERROR;
9d008de0:2413ffff lis3,-1

9d008de4 <.LVL14>:
        Chan[InactiveBuffer][Pin].IsServo = PinType;
        Chan[ActiveBuffer][Pin].NextChanP = NULL;                
    }
    
    return SOFTPWMSERVO_OK;
}
9d008de4:02601021 movev0,s3
9d008de8:8fbf0024 lwra,36(sp)
9d008dec:8fb40020 lws4,32(sp)

9d008df0 <.LVL15>:
9d008df0:8fb3001c lws3,28(sp)
9d008df4:8fb20018 lws2,24(sp)
9d008df8:8fb10014 lws1,20(sp)
9d008dfc:8fb00010 lws0,16(sp)
9d008e00:03e00008 jrra
9d008e04:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCore10drawBitmapEiiPKhiit:

9d008e08 <_ZN11DisplayCore10drawBitmapEiiPKhiit>:
 *          0b01000010,
 *          0b01000010,
 *          0b00000000};
 *      tft.drawBitmap(100, 100, letterA, 8, 8, Color::Red);
 */
void DisplayCore::drawBitmap(int x, int y, const uint8_t *bitmap, int w, int h, color_t color) {
9d008e08:27bdffb0 addiusp,sp,-80
9d008e0c:afbf004c swra,76(sp)
9d008e10:afbe0048 sws8,72(sp)
9d008e14:afb70044 sws7,68(sp)
9d008e18:afb60040 sws6,64(sp)
9d008e1c:afb5003c sws5,60(sp)
9d008e20:afb40038 sws4,56(sp)
9d008e24:afb30034 sws3,52(sp)
9d008e28:afb20030 sws2,48(sp)
9d008e2c:afb1002c sws1,44(sp)
9d008e30:afb00028 sws0,40(sp)
9d008e34:00808821 moves1,a0
9d008e38:00a0b021 moves6,a1
9d008e3c:afa60010 swa2,16(sp)
9d008e40:00e0a821 moves5,a3
9d008e44:8fb40060 lws4,96(sp)
9d008e48:8fb70064 lws7,100(sp)

9d008e4c <.LBB2>:
    int i, j, byteWidth = (w + 7) / 8;

    startBuffer();
9d008e4c:8c830000 lwv1,0(a0)
9d008e50:8c6300c4 lwv1,196(v1)
9d008e54:0060f809 jalrv1
9d008e58:97be0068 lhus8,104(sp)

9d008e5c <.LVL2>:
 *          0b01000010,
 *          0b00000000};
 *      tft.drawBitmap(100, 100, letterA, 8, 8, Color::Red);
 */
void DisplayCore::drawBitmap(int x, int y, const uint8_t *bitmap, int w, int h, color_t color) {
    int i, j, byteWidth = (w + 7) / 8;
9d008e5c:26830007 addiuv1,s4,7
9d008e60:2684000e addiua0,s4,14
9d008e64:28650000 sltia1,v1,0
9d008e68:0085180b movnv1,a0,a1
9d008e6c:000318c3 srav1,v1,0x3

    startBuffer();
    for(j=0; j<h; j++) {
9d008e70:00009821 moves3,zero
9d008e74:00009021 moves2,zero
        for(i=0; i<w; i++ ) {
            if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
9d008e78:240a0080 lit2,128

9d008e7c <.LVL3>:
 */
void DisplayCore::drawBitmap(int x, int y, const uint8_t *bitmap, int w, int h, color_t color) {
    int i, j, byteWidth = (w + 7) / 8;

    startBuffer();
    for(j=0; j<h; j++) {
9d008e7c:0257202a slta0,s2,s7
9d008e80:10800025 beqza0,9d008f18 <.LVL8>
9d008e84:00008021 moves0,zero
        for(i=0; i<w; i++ ) {
            if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
9d008e88:02b34821 addut1,s5,s3
9d008e8c:8fa20010 lwv0,16(sp)
9d008e90:02424021 addut0,s2,v0

9d008e94 <.LVL4>:
void DisplayCore::drawBitmap(int x, int y, const uint8_t *bitmap, int w, int h, color_t color) {
    int i, j, byteWidth = (w + 7) / 8;

    startBuffer();
    for(j=0; j<h; j++) {
        for(i=0; i<w; i++ ) {
9d008e94:0214202a slta0,s0,s4
9d008e98:1080001c beqza0,9d008f0c <.LBB3>
9d008e9c:26040007 addiua0,s0,7
            if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
9d008ea0:2a050000 sltia1,s0,0
9d008ea4:0205200a movza0,s0,a1
9d008ea8:000420c3 sraa0,a0,0x3
9d008eac:01242021 addua0,t1,a0
9d008eb0:80850000 lba1,0(a0)
9d008eb4:32040007 andia0,s0,0x7
9d008eb8:008a2007 srava0,t2,a0
9d008ebc:00a42024 anda0,a1,a0
9d008ec0:5080fff4 beqzla0,9d008e94 <.LVL4>
9d008ec4:26100001 addius0,s0,1
                setPixel(x+i, y+j, color);
9d008ec8:8e240000 lwa0,0(s1)
9d008ecc:8c8b0084 lwt3,132(a0)
9d008ed0:02202021 movea0,s1
9d008ed4:02162821 addua1,s0,s6
9d008ed8:01003021 movea2,t0
9d008edc:03c03821 movea3,s8
9d008ee0:afa30014 swv1,20(sp)
9d008ee4:afa8001c swt0,28(sp)
9d008ee8:afa90018 swt1,24(sp)
9d008eec:0160f809 jalrt3
9d008ef0:afaa0020 swt2,32(sp)

9d008ef4 <.LVL5>:
9d008ef4:8faa0020 lwt2,32(sp)
9d008ef8:8fa90018 lwt1,24(sp)
9d008efc:8fa8001c lwt0,28(sp)
9d008f00:8fa30014 lwv1,20(sp)

9d008f04 <.LBE2>:
void DisplayCore::drawBitmap(int x, int y, const uint8_t *bitmap, int w, int h, color_t color) {
    int i, j, byteWidth = (w + 7) / 8;

    startBuffer();
    for(j=0; j<h; j++) {
        for(i=0; i<w; i++ ) {
9d008f04:0b4023a5 j9d008e94 <.LVL4>
9d008f08:26100001 addius0,s0,1

9d008f0c <.LBB3>:
 */
void DisplayCore::drawBitmap(int x, int y, const uint8_t *bitmap, int w, int h, color_t color) {
    int i, j, byteWidth = (w + 7) / 8;

    startBuffer();
    for(j=0; j<h; j++) {
9d008f0c:26520001 addius2,s2,1
9d008f10:0b40239f j9d008e7c <.LVL3>
9d008f14:02639821 addus3,s3,v1

9d008f18 <.LVL8>:
            if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
                setPixel(x+i, y+j, color);
            }
        }
    }
    endBuffer();
9d008f18:8e220000 lwv0,0(s1)
9d008f1c:8c5900c8 lwt9,200(v0)
9d008f20:02202021 movea0,s1

9d008f24 <.LBE3>:
}
9d008f24:8fbf004c lwra,76(sp)
9d008f28:8fbe0048 lws8,72(sp)
9d008f2c:8fb70044 lws7,68(sp)
9d008f30:8fb60040 lws6,64(sp)

9d008f34 <.LVL9>:
9d008f34:8fb5003c lws5,60(sp)

9d008f38 <.LVL10>:
9d008f38:8fb40038 lws4,56(sp)

9d008f3c <.LVL11>:
9d008f3c:8fb30034 lws3,52(sp)
9d008f40:8fb20030 lws2,48(sp)

9d008f44 <.LVL12>:
9d008f44:8fb1002c lws1,44(sp)

9d008f48 <.LVL13>:
9d008f48:8fb00028 lws0,40(sp)

9d008f4c <.LBB4>:
            if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
                setPixel(x+i, y+j, color);
            }
        }
    }
    endBuffer();
9d008f4c:03200008 jrt9
9d008f50:27bd0050 addiusp,sp,80

Disassembly of section .text.scalbn:

9d008f54 <scalbn>:
9d008f54:27bdffd8 addiusp,sp,-40
9d008f58:afbf0014 swra,20(sp)
9d008f5c:f7b40018 sdc1$f20,24(sp)
9d008f60:46206386 mov.d$f14,$f12
9d008f64:44636000 mfhc1v1,$f12
9d008f68:7c645500 exta0,v1,0x14,0xb
9d008f6c:14800011 bneza0,9d008fb4 <scalbn+0x60>
9d008f70:44026000 mfc1v0,$f12
9d008f74:7c63f000 extv1,v1,0x0,0x1f
9d008f78:00621025 orv0,v1,v0
9d008f7c:1040003d beqzv0,9d009074 <scalbn+0x120>
9d008f80:46206006 mov.d$f0,$f12
9d008f84:3c029d01 luiv0,0x9d01
9d008f88:d44ec0b0 ldc1$f14,-16208(v0)
9d008f8c:462e6382 mul.d$f14,$f12,$f14
9d008f90:3c04ffff luia0,0xffff
9d008f94:24843cb0 addiua0,a0,15536
9d008f98:00c4202a slta0,a2,a0
9d008f9c:1080000a beqza0,9d008fc8 <scalbn+0x74>
9d008fa0:44637000 mfhc1v1,$f14
9d008fa4:3c029d01 luiv0,0x9d01
9d008fa8:d440c0b8 ldc1$f0,-16200(v0)
9d008fac:0b40241d j9d009074 <scalbn+0x120>
9d008fb0:46207002 mul.d$f0,$f14,$f0
9d008fb4:240207ff liv0,2047
9d008fb8:14820006 bnea0,v0,9d008fd4 <scalbn+0x80>
9d008fbc:00602821 movea1,v1
9d008fc0:0b40241d j9d009074 <scalbn+0x120>
9d008fc4:462c6000 add.d$f0,$f12,$f12
9d008fc8:00602821 movea1,v1
9d008fcc:7c645500 exta0,v1,0x14,0xb
9d008fd0:2484ffca addiua0,a0,-54
9d008fd4:00862021 addua0,a0,a2
9d008fd8:288207ff sltiv0,a0,2047
9d008fdc:10400013 beqzv0,9d00902c <scalbn+0xd8>
9d008fe0:3c029d01 luiv0,0x9d01
9d008fe4:18800009 bleza0,9d00900c <scalbn+0xb8>
9d008fe8:44027000 mfc1v0,$f14
9d008fec:00042500 slla0,a0,0x14
9d008ff0:3c06800f luia2,0x800f
9d008ff4:34c6ffff oria2,a2,0xffff
9d008ff8:00a62824 anda1,a1,a2
9d008ffc:00851825 orv1,a0,a1
9d009000:44820000 mtc1v0,$f0
9d009004:0b40241d j9d009074 <scalbn+0x120>
9d009008:44e30000 mthc1v1,$f0
9d00900c:2882ffcb sltiv0,a0,-53
9d009010:1040000d beqzv0,9d009048 <scalbn+0xf4>
9d009014:44027000 mfc1v0,$f14
9d009018:3402c351 liv0,0xc351
9d00901c:00c2302a slta2,a2,v0
9d009020:14c00004 bneza2,9d009034 <scalbn+0xe0>
9d009024:3c029d01 luiv0,0x9d01
9d009028:3c029d01 luiv0,0x9d01
9d00902c:0b40240e j9d009038 <scalbn+0xe4>
9d009030:d454c0c0 ldc1$f20,-16192(v0)
9d009034:d454c0b8 ldc1$f20,-16200(v0)
9d009038:0f402fd2 jal9d00bf48 <.LFE38>
9d00903c:4620a306 mov.d$f12,$f20
9d009040:0b40241d j9d009074 <scalbn+0x120>
9d009044:46340002 mul.d$f0,$f0,$f20
9d009048:24840036 addiua0,a0,54
9d00904c:00042500 slla0,a0,0x14
9d009050:3c06800f luia2,0x800f
9d009054:34c6ffff oria2,a2,0xffff
9d009058:00a62824 anda1,a1,a2
9d00905c:00851825 orv1,a0,a1
9d009060:44821000 mtc1v0,$f2
9d009064:44e31000 mthc1v1,$f2
9d009068:3c049d01 luia0,0x9d01
9d00906c:d480c0c8 ldc1$f0,-16184(a0)
9d009070:46201002 mul.d$f0,$f2,$f0
9d009074:8fbf0014 lwra,20(sp)
9d009078:d7b40018 ldc1$f20,24(sp)
9d00907c:03e00008 jrra
9d009080:27bd0028 addiusp,sp,40

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

9d009084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
9d009084:27bdffb8 addiusp,sp,-72
9d009088:afbf0044 swra,68(sp)
9d00908c:afbe0040 sws8,64(sp)
9d009090:afb7003c sws7,60(sp)
9d009094:afb60038 sws6,56(sp)
9d009098:afb50034 sws5,52(sp)
9d00909c:afb40030 sws4,48(sp)
9d0090a0:afb3002c sws3,44(sp)
9d0090a4:afb20028 sws2,40(sp)
9d0090a8:afb10024 sws1,36(sp)
9d0090ac:afb00020 sws0,32(sp)
9d0090b0:0080b021 moves6,a0
9d0090b4:00a09021 moves2,a1
9d0090b8:00c0a021 moves4,a2
9d0090bc:00e0b821 moves7,a3
9d0090c0:8fb10058 lws1,88(sp)
9d0090c4:8fb5005c lws5,92(sp)
9d0090c8:8fb30060 lws3,96(sp)
9d0090cc:8fb00064 lws0,100(sp)
9d0090d0:8c9e0004 lws8,4(a0)
9d0090d4:03c02021 movea0,s8

9d0090d8 <.LVL17>:
9d0090d8:0f402eb4 jal9d00bad0 <.LFE15+0x48>
9d0090dc:8ce50004 lwa1,4(a3)

9d0090e0 <.LVL18>:
9d0090e0:10400011 beqzv0,9d009128 <.LVL20+0x18>
9d0090e4:00000000 nop
9d0090e8:ae110000 sws1,0(s0)
9d0090ec:06400008 bltzs2,9d009110 <.LVL20>
9d0090f0:ae140004 sws4,4(s0)

9d0090f4 <.LBB9>:
9d0090f4:02328821 addus1,s1,s2

9d0090f8 <.LBE9>:
9d0090f8:24020006 liv0,6
9d0090fc:02719826 xors3,s3,s1
9d009100:24030001 liv1,1
9d009104:0073100b movnv0,v1,s3
9d009108:0b40245e j9d009178 <.LVL22+0x8>
9d00910c:ae02000c swv0,12(s0)

9d009110 <.LVL20>:
9d009110:2403fffe liv1,-2
9d009114:16430019 bnes2,v1,9d00917c <.LVL22+0xc>
9d009118:00001021 movev0,zero
9d00911c:24030001 liv1,1
9d009120:0b40245f j9d00917c <.LVL22+0xc>
9d009124:ae03000c swv1,12(s0)
9d009128:56330007 bnels1,s3,9d009148 <.LVL21+0xc>
9d00912c:8ec40008 lwa0,8(s6)
9d009130:03c02021 movea0,s8
9d009134:0f402eb4 jal9d00bad0 <.LFE15+0x48>
9d009138:8ea50004 lwa1,4(s5)

9d00913c <.LVL21>:
9d00913c:5440000e bnezlv0,9d009178 <.LVL22+0x8>
9d009140:ae140008 sws4,8(s0)
9d009144:8ec40008 lwa0,8(s6)
9d009148:8c820000 lwv0,0(a0)
9d00914c:afb10010 sws1,16(sp)
9d009150:afb50014 sws5,20(sp)
9d009154:afb30018 sws3,24(sp)
9d009158:afb0001c sws0,28(sp)
9d00915c:8c42001c lwv0,28(v0)
9d009160:02402821 movea1,s2
9d009164:02803021 movea2,s4
9d009168:0040f809 jalrv0
9d00916c:02e03821 movea3,s7

9d009170 <.LVL22>:
9d009170:0b402460 j9d009180 <.LVL22+0x10>
9d009174:8fbf0044 lwra,68(sp)
9d009178:00001021 movev0,zero
9d00917c:8fbf0044 lwra,68(sp)
9d009180:8fbe0040 lws8,64(sp)
9d009184:8fb7003c lws7,60(sp)

9d009188 <.LVL23>:
9d009188:8fb60038 lws6,56(sp)

9d00918c <.LVL24>:
9d00918c:8fb50034 lws5,52(sp)
9d009190:8fb40030 lws4,48(sp)

9d009194 <.LVL25>:
9d009194:8fb3002c lws3,44(sp)
9d009198:8fb20028 lws2,40(sp)

9d00919c <.LVL26>:
9d00919c:8fb10024 lws1,36(sp)
9d0091a0:8fb00020 lws0,32(sp)

9d0091a4 <.LVL27>:
9d0091a4:03e00008 jrra
9d0091a8:27bd0048 addiusp,sp,72

Disassembly of section .text._Z13randomStripestt:

9d0091ac <_Z13randomStripestt>:
for (int i = 0; i < 24; i++) {
tft.drawHorizontalLine(0, i, tft.getWidth(), rand() & 1 ? ca : cb);
}
for (int i = 24; i < 216; i++) {
uint16_t c = rand() & 1 ? ca : cb;
tft.drawHorizontalLine(0, i, 32, c);
9d0091ac:27bdffd0 addiusp,sp,-48
9d0091b0:afbf002c swra,44(sp)
9d0091b4:afb40028 sws4,40(sp)
9d0091b8:afb30024 sws3,36(sp)
9d0091bc:afb20020 sws2,32(sp)
9d0091c0:afb1001c sws1,28(sp)
9d0091c4:afb00018 sws0,24(sp)
9d0091c8:3091ffff andis1,a0,0xffff
9d0091cc:30b2ffff andis2,a1,0xffff

9d0091d0 <.LBB2>:
tft.drawHorizontalLine(288, i, 32, c);
9d0091d0:00008021 moves0,zero
9d0091d4:24130018 lis3,24

9d0091d8 <.LVL16>:
}
9d0091d8:0f4030cf jal9d00c33c <.LFE197>
9d0091dc:27848338 addiua0,gp,-31944

9d0091e0 <.LVL17>:
9d0091e0:0f402da3 jal9d00b68c <.LFE18>
9d0091e4:0040a021 moves4,v0

9d0091e8 <.LVL18>:
9d0091e8:30420001 andiv0,v0,0x1
9d0091ec:02201821 movev1,s1
9d0091f0:0242180a movzv1,s2,v0
9d0091f4:afa30010 swv1,16(sp)
9d0091f8:27848338 addiua0,gp,-31944
9d0091fc:00002821 movea1,zero
9d009200:02003021 movea2,s0
9d009204:0f4029ee jal9d00a7b8 <L0>
9d009208:02803821 movea3,s4

9d00920c <.LVL19>:
tft.drawHorizontalLine(0, i, tft.getWidth(), rand() & 1 ? ca : cb);
}
for (int i = 24; i < 216; i++) {
uint16_t c = rand() & 1 ? ca : cb;
tft.drawHorizontalLine(0, i, 32, c);
tft.drawHorizontalLine(288, i, 32, c);
9d00920c:26100001 addius0,s0,1
9d009210:1613fff1 bnes0,s3,9d0091d8 <.LVL16>
9d009214:00000000 nop
9d009218:24100018 lis0,24

9d00921c <.LBB3>:
}
for (int i = 216; i < 240; i++) {
tft.drawHorizontalLine(0, i, tft.getWidth(), rand() & 1 ? ca : cb);
9d00921c:241400d8 lis4,216

9d009220 <.LBB4>:
}
9d009220:0f402da3 jal9d00b68c <.LFE18>
9d009224:02209821 moves3,s1

9d009228 <.LVL23>:
9d009228:30420001 andiv0,v0,0x1
9d00922c:0242980a movzs3,s2,v0

9d009230 <.LVL24>:
}
9d009230:afb30010 sws3,16(sp)
9d009234:27848338 addiua0,gp,-31944
9d009238:00002821 movea1,zero
9d00923c:02003021 movea2,s0
9d009240:0f4029ee jal9d00a7b8 <L0>
9d009244:24070020 lia3,32

9d009248 <.LVL25>:

9d009248:afb30010 sws3,16(sp)
9d00924c:27848338 addiua0,gp,-31944
9d009250:24050120 lia1,288
9d009254:02003021 movea2,s0
9d009258:0f4029ee jal9d00a7b8 <L0>
9d00925c:24070020 lia3,32

9d009260 <.LBE4>:
uint16_t c = rand() & 1 ? ca : cb;
tft.drawHorizontalLine(0, i, 32, c);
tft.drawHorizontalLine(288, i, 32, c);
}
for (int i = 216; i < 240; i++) {
tft.drawHorizontalLine(0, i, tft.getWidth(), rand() & 1 ? ca : cb);
9d009260:26100001 addius0,s0,1
9d009264:1614ffee bnes0,s4,9d009220 <.LBB4>
9d009268:00000000 nop
9d00926c:241000d8 lis0,216

9d009270 <.LBB5>:
}
}

void regularStripes(uint16_t ca, uint16_t cb, uint32_t w, uint32_t off) {
uint32_t l = off;
9d009270:241300f0 lis3,240

9d009274 <.LVL29>:
for (int i = 0; i < 24; i++) {
9d009274:0f4030cf jal9d00c33c <.LFE197>
9d009278:27848338 addiua0,gp,-31944

9d00927c <.LVL30>:
9d00927c:0f402da3 jal9d00b68c <.LFE18>
9d009280:0040a021 moves4,v0

9d009284 <.LVL31>:
9d009284:30420001 andiv0,v0,0x1
9d009288:02201821 movev1,s1
9d00928c:0242180a movzv1,s2,v0
9d009290:afa30010 swv1,16(sp)
9d009294:27848338 addiua0,gp,-31944
9d009298:00002821 movea1,zero
9d00929c:02003021 movea2,s0
9d0092a0:0f4029ee jal9d00a7b8 <L0>
9d0092a4:02803821 movea3,s4

9d0092a8 <.LVL32>:
tft.drawHorizontalLine(0, i, tft.getWidth(), rand() & 1 ? ca : cb);
}
}

void regularStripes(uint16_t ca, uint16_t cb, uint32_t w, uint32_t off) {
uint32_t l = off;
9d0092a8:26100001 addius0,s0,1
9d0092ac:1613fff1 bnes0,s3,9d009274 <.LVL29>
9d0092b0:8fbf002c lwra,44(sp)

9d0092b4 <.LBE5>:
for (int i = 0; i < 24; i++) {
tft.drawHorizontalLine(0, i, tft.getWidth(), (l / w) & 1 ? ca : cb);
l++;
9d0092b4:8fb40028 lws4,40(sp)
9d0092b8:8fb30024 lws3,36(sp)
9d0092bc:8fb20020 lws2,32(sp)

9d0092c0 <.LVL34>:
9d0092c0:8fb1001c lws1,28(sp)

9d0092c4 <.LVL35>:
9d0092c4:8fb00018 lws0,24(sp)

9d0092c8 <.LVL36>:
9d0092c8:03e00008 jrra
9d0092cc:27bd0030 addiusp,sp,48

Disassembly of section .text._ZL11CopyBuffersv:

9d0092d0 <_ZL11CopyBuffersv>:
// If the ISR has just swapped buffers, then we need to copy the ActiveBuffer's
// contents into the inactive buffer's contents so that we start modifying 
// data that matches what is currently 'live'. InactiveBufferReady will be false if
// this is the first call to Write after an ISR swap.
static void CopyBuffers(void)
{
9d0092d0:27bdffd0 addiusp,sp,-48
9d0092d4:afbf002c swra,44(sp)
9d0092d8:afb60028 sws6,40(sp)
9d0092dc:afb50024 sws5,36(sp)
9d0092e0:afb40020 sws4,32(sp)
9d0092e4:afb3001c sws3,28(sp)
9d0092e8:afb20018 sws2,24(sp)
9d0092ec:afb10014 sws1,20(sp)
9d0092f0:afb00010 sws0,16(sp)

9d0092f4 <.LBB14>:
    uint32_t i;
    
    if (!InactiveBufferReady)
9d0092f4:938284c8 lbuv0,-31544(gp)
9d0092f8:14400031 bnezv0,9d0093c0 <.LVL91>
9d0092fc:00008021 moves0,zero
    {
        // TODO: Replace with memcpy?
        for (i = 0; i < SOFTPWMSERVO_MAX_PINS; i++)
        {
            Chan[InactiveBuffer][i] = Chan[ActiveBuffer][i];
9d009300:24140047 lis4,71
9d009304:3c118000 luis1,0x8000
9d009308:26310948 addius1,s1,2376
            if (Chan[ActiveBuffer][i].NextChanP != NULL)
            {
                Chan[InactiveBuffer][i].NextChanP = 
                    (ChanType *)(
                        (uint32_t)&Chan[InactiveBuffer] 
                        +
9d00930c:241508e0 lis5,2272

9d009310 <.LVL88>:
    if (!InactiveBufferReady)
    {
        // TODO: Replace with memcpy?
        for (i = 0; i < SOFTPWMSERVO_MAX_PINS; i++)
        {
            Chan[InactiveBuffer][i] = Chan[ActiveBuffer][i];
9d009310:8f9384dc lws3,-31524(gp)
9d009314:8f9284d0 lws2,-31536(gp)
9d009318:72741002 mulv0,s3,s4
9d00931c:00501821 adduv1,v0,s0
9d009320:00031940 sllv1,v1,0x5
9d009324:00711821 adduv1,v1,s1
9d009328:72541002 mulv0,s2,s4
9d00932c:0050b021 addus6,v0,s0
9d009330:0016b140 slls6,s6,0x5
9d009334:02d1b021 addus6,s6,s1
9d009338:00602021 movea0,v1
9d00933c:02c02821 movea1,s6
9d009340:0f402fa8 jal9d00bea0 <.LFE100>
9d009344:24060020 lia2,32

9d009348 <.LVL89>:
9d009348:00401821 movev1,v0
            // just use the copy we have (to inactive) as is. We need to go fix it up so 
            // that all of the pointers are internally consistent and point only to 
            // channels in InactiveBuffer.
            // TODO: There MUST be a better way to do this without resorting to indexes 
            //  rather than pointers.
            if (Chan[ActiveBuffer][i].NextChanP != NULL)
9d00934c:8ec2001c lwv0,28(s6)
9d009350:10400008 beqzv0,9d009374 <.LVL89+0x2c>
9d009354:02202821 movea1,s1
            {
                Chan[InactiveBuffer][i].NextChanP = 
                    (ChanType *)(
                        (uint32_t)&Chan[InactiveBuffer] 
                        +
9d009358:72753002 mula2,s3,s5
9d00935c:00d12021 addua0,a2,s1
                        ((uint32_t)Chan[ActiveBuffer][i].NextChanP - (uint32_t)&Chan[ActiveBuffer])
9d009360:00441021 adduv0,v0,a0
9d009364:72553002 mula2,s2,s5
9d009368:00d12021 addua0,a2,s1
            if (Chan[ActiveBuffer][i].NextChanP != NULL)
            {
                Chan[InactiveBuffer][i].NextChanP = 
                    (ChanType *)(
                        (uint32_t)&Chan[InactiveBuffer] 
                        +
9d00936c:00441023 subuv0,v0,a0
                        ((uint32_t)Chan[ActiveBuffer][i].NextChanP - (uint32_t)&Chan[ActiveBuffer])
                    );
9d009370:ac62001c swv0,28(v1)
    uint32_t i;
    
    if (!InactiveBufferReady)
    {
        // TODO: Replace with memcpy?
        for (i = 0; i < SOFTPWMSERVO_MAX_PINS; i++)
9d009374:26100001 addius0,s0,1
9d009378:5614ffe6 bnels0,s4,9d009314 <.LVL88+0x4>
9d00937c:8f9384dc lws3,-31524(gp)
                        +
                        ((uint32_t)Chan[ActiveBuffer][i].NextChanP - (uint32_t)&Chan[ActiveBuffer])
                    );
            }
        }
        if (FirstChanP[ActiveBuffer] != NULL)
9d009380:278284c0 addiuv0,gp,-31552
9d009384:00122080 slla0,s2,0x2
9d009388:7c44200a lwxa0,a0(v0)
9d00938c:00131880 sllv1,s3,0x2
9d009390:1080000a beqza0,9d0093bc <.LVL89+0x74>
9d009394:00431021 adduv0,v0,v1
        {
            FirstChanP[InactiveBuffer] = 
                (ChanType *)(
                    (uint32_t)&Chan[InactiveBuffer] 
                    +
9d009398:240608e0 lia2,2272
9d00939c:72661802 mulv1,s3,a2
9d0093a0:00659821 addus3,v1,a1
                    ((uint32_t)FirstChanP[ActiveBuffer] - (uint32_t)&Chan[ActiveBuffer])
9d0093a4:72461802 mulv1,s2,a2
9d0093a8:00659021 addus2,v1,a1
9d0093ac:02722823 subua1,s3,s2
        if (FirstChanP[ActiveBuffer] != NULL)
        {
            FirstChanP[InactiveBuffer] = 
                (ChanType *)(
                    (uint32_t)&Chan[InactiveBuffer] 
                    +
9d0093b0:00852021 addua0,a0,a1
9d0093b4:0b4024f0 j9d0093c0 <.LVL91>
9d0093b8:ac440000 swa0,0(v0)
                    ((uint32_t)FirstChanP[ActiveBuffer] - (uint32_t)&Chan[ActiveBuffer])
                );
        }
        else
        {
            FirstChanP[InactiveBuffer] = NULL;
9d0093bc:ac400000 swzero,0(v0)

9d0093c0 <.LVL91>:
        }
    }
    InactiveBufferReady = true;
9d0093c0:24020001 liv0,1
9d0093c4:a38284c8 sbv0,-31544(gp)

9d0093c8 <.LBE14>:
}
9d0093c8:8fbf002c lwra,44(sp)
9d0093cc:8fb60028 lws6,40(sp)
9d0093d0:8fb50024 lws5,36(sp)
9d0093d4:8fb40020 lws4,32(sp)
9d0093d8:8fb3001c lws3,28(sp)
9d0093dc:8fb20018 lws2,24(sp)
9d0093e0:8fb10014 lws1,20(sp)
9d0093e4:8fb00010 lws0,16(sp)
9d0093e8:03e00008 jrra
9d0093ec:27bd0030 addiusp,sp,48

Disassembly of section .text._ZN11DisplayCore13fillRoundRectEiiiiit:

9d0093f0 <L0>:
 *
 *  Example:
 *
 *      tft.fillRoundRect(10, 10, 100, 50, 4, Color::Yellow);
 */
void DisplayCore::fillRoundRect(int x, int y, int w, int h, int r, color_t color) {
9d0093f0:27bdffb8 addiusp,sp,-72
9d0093f4:afbf0044 swra,68(sp)
9d0093f8:afbe0040 sws8,64(sp)
9d0093fc:afb7003c sws7,60(sp)
9d009400:afb60038 sws6,56(sp)
9d009404:afb50034 sws5,52(sp)
9d009408:afb40030 sws4,48(sp)
9d00940c:afb3002c sws3,44(sp)
9d009410:afb20028 sws2,40(sp)
9d009414:afb10024 sws1,36(sp)
9d009418:afb00020 sws0,32(sp)
9d00941c:00808021 moves0,a0
9d009420:00a0a021 moves4,a1
9d009424:00c0b021 moves6,a2
9d009428:00e09821 moves3,a3
9d00942c:8fb50058 lws5,88(sp)
9d009430:8fb1005c lws1,92(sp)
    startBuffer();
9d009434:8c820000 lwv0,0(a0)
9d009438:8c4200c4 lwv0,196(v0)
9d00943c:0040f809 jalrv0
9d009440:97b20060 lhus2,96(sp)

9d009444 <.LVL48>:
    // smarter version
    fillRectangle(x+r, y, w-2*r, h, color);
9d009444:0291b821 addus7,s4,s1
9d009448:241efffe lis8,-2
9d00944c:723ef002 muls8,s1,s8
9d009450:8e020000 lwv0,0(s0)
9d009454:afb50010 sws5,16(sp)
9d009458:afb20014 sws2,20(sp)
9d00945c:8c42007c lwv0,124(v0)
9d009460:02002021 movea0,s0
9d009464:02e02821 movea1,s7
9d009468:02c03021 movea2,s6
9d00946c:0040f809 jalrv0
9d009470:027e3821 addua3,s3,s8

9d009474 <.LVL49>:

    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
9d009474:02d1b021 addus6,s6,s1

9d009478 <.LVL50>:
9d009478:02bea821 addus5,s5,s8
9d00947c:26b5ffff addius5,s5,-1
9d009480:02939821 addus3,s4,s3

9d009484 <.LVL51>:
9d009484:02712823 subua1,s3,s1
9d009488:24020001 liv0,1
9d00948c:afa20010 swv0,16(sp)
9d009490:afb50014 sws5,20(sp)
9d009494:afb20018 sws2,24(sp)
9d009498:02002021 movea0,s0
9d00949c:24a5ffff addiua1,a1,-1
9d0094a0:02c03021 movea2,s6
9d0094a4:0f401ec1 jal9d007b04 <.LFE18>
9d0094a8:02203821 movea3,s1

9d0094ac <.LVL52>:
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
9d0094ac:24020002 liv0,2
9d0094b0:afa20010 swv0,16(sp)
9d0094b4:afb50014 sws5,20(sp)
9d0094b8:afb20018 sws2,24(sp)
9d0094bc:02002021 movea0,s0
9d0094c0:02e02821 movea1,s7
9d0094c4:02c03021 movea2,s6
9d0094c8:0f401ec1 jal9d007b04 <.LFE18>
9d0094cc:02203821 movea3,s1

9d0094d0 <.LVL53>:
    endBuffer();
9d0094d0:8e020000 lwv0,0(s0)
9d0094d4:8c5900c8 lwt9,200(v0)
9d0094d8:02002021 movea0,s0
}
9d0094dc:8fbf0044 lwra,68(sp)
9d0094e0:8fbe0040 lws8,64(sp)
9d0094e4:8fb7003c lws7,60(sp)
9d0094e8:8fb60038 lws6,56(sp)
9d0094ec:8fb50034 lws5,52(sp)
9d0094f0:8fb40030 lws4,48(sp)

9d0094f4 <.LVL54>:
9d0094f4:8fb3002c lws3,44(sp)
9d0094f8:8fb20028 lws2,40(sp)
9d0094fc:8fb10024 lws1,36(sp)
9d009500:8fb00020 lws0,32(sp)

9d009504 <.LVL55>:
    fillRectangle(x+r, y, w-2*r, h, color);

    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    endBuffer();
9d009504:03200008 jrt9
9d009508:27bd0048 addiusp,sp,72

Disassembly of section .text._malloc_trim_r:

9d00950c <_malloc_trim_r>:
9d00950c:27bdffd8 addiusp,sp,-40
9d009510:afbf0024 swra,36(sp)
9d009514:afb30020 sws3,32(sp)
9d009518:afb2001c sws2,28(sp)
9d00951c:afb10018 sws1,24(sp)
9d009520:afb00014 sws0,20(sp)
9d009524:00808021 moves0,a0
9d009528:0f4030ef jal9d00c3bc <.LFE104+0x8>
9d00952c:00a08821 moves1,a1
9d009530:3c128000 luis2,0x8000
9d009534:26521f20 addius2,s2,7968
9d009538:8e420008 lwv0,8(s2)
9d00953c:8c420004 lwv0,4(v0)
9d009540:2413fffc lis3,-4
9d009544:02629824 ands3,s3,v0
9d009548:02718823 subus1,s3,s1
9d00954c:2631006f addius1,s1,111
9d009550:001189c2 srls1,s1,0x7
9d009554:2631ffff addius1,s1,-1
9d009558:001189c0 slls1,s1,0x7
9d00955c:2a220080 sltiv0,s1,128
9d009560:50400005 beqzlv0,9d009578 <_malloc_trim_r+0x6c>
9d009564:02002021 movea0,s0
9d009568:0f4030f1 jal9d00c3c4 <.LFE104+0x10>
9d00956c:02002021 movea0,s0
9d009570:0b402583 j9d00960c <_malloc_trim_r+0x100>
9d009574:00001021 movev0,zero
9d009578:0f402e0c jal9d00b830 <.LFE103>
9d00957c:00002821 movea1,zero
9d009580:8e430008 lwv1,8(s2)
9d009584:00731821 adduv1,v1,s3
9d009588:1443fff7 bnev0,v1,9d009568 <_malloc_trim_r+0x5c>
9d00958c:00000000 nop
9d009590:02002021 movea0,s0
9d009594:0f402e0c jal9d00b830 <.LFE103>
9d009598:00112823 negua1,s1
9d00959c:2403ffff liv1,-1
9d0095a0:54430010 bnelv0,v1,9d0095e4 <_malloc_trim_r+0xd8>
9d0095a4:8e420008 lwv0,8(s2)
9d0095a8:02002021 movea0,s0
9d0095ac:0f402e0c jal9d00b830 <.LFE103>
9d0095b0:00002821 movea1,zero
9d0095b4:8e430008 lwv1,8(s2)
9d0095b8:00432023 subua0,v0,v1
9d0095bc:28850010 sltia1,a0,16
9d0095c0:14a0ffe9 bneza1,9d009568 <_malloc_trim_r+0x5c>
9d0095c4:3c058000 luia1,0x8000
9d0095c8:8ca5239c lwa1,9116(a1)
9d0095cc:00451023 subuv0,v0,a1
9d0095d0:3c058000 luia1,0x8000
9d0095d4:aca22328 swv0,9000(a1)
9d0095d8:34840001 oria0,a0,0x1
9d0095dc:0b40255a j9d009568 <_malloc_trim_r+0x5c>
9d0095e0:ac640004 swa0,4(v1)
9d0095e4:02719823 subus3,s3,s1
9d0095e8:36730001 oris3,s3,0x1
9d0095ec:ac530004 sws3,4(v0)
9d0095f0:3c028000 luiv0,0x8000
9d0095f4:8c432328 lwv1,9000(v0)
9d0095f8:00718823 subus1,v1,s1
9d0095fc:ac512328 sws1,9000(v0)
9d009600:0f4030f1 jal9d00c3c4 <.LFE104+0x10>
9d009604:02002021 movea0,s0
9d009608:24020001 liv0,1
9d00960c:8fbf0024 lwra,36(sp)
9d009610:8fb30020 lws3,32(sp)
9d009614:8fb2001c lws2,28(sp)
9d009618:8fb10018 lws1,24(sp)
9d00961c:8fb00014 lws0,20(sp)
9d009620:03e00008 jrra
9d009624:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCore10fillCircleEiiit:

9d009628 <_ZN11DisplayCore10fillCircleEiiit>:
 *
 *  Example:
 *
 *      tft.fillCircle(50, 50, 20, Color::Red);
 */
void DisplayCore::fillCircle(int x0, int y0, int radius, color_t color) {
9d009628:27bdffb8 addiusp,sp,-72
9d00962c:afbf0044 swra,68(sp)
9d009630:afbe0040 sws8,64(sp)
9d009634:afb7003c sws7,60(sp)
9d009638:afb60038 sws6,56(sp)
9d00963c:afb50034 sws5,52(sp)
9d009640:afb40030 sws4,48(sp)
9d009644:afb3002c sws3,44(sp)
9d009648:afb20028 sws2,40(sp)
9d00964c:afb10024 sws1,36(sp)
9d009650:afb00020 sws0,32(sp)
9d009654:00808021 moves0,a0
9d009658:00a0b021 moves6,a1
9d00965c:00c09021 moves2,a2
9d009660:00e08821 moves1,a3

9d009664 <.LBB4>:
    startBuffer();
9d009664:8c820000 lwv0,0(a0)
9d009668:8c4200c4 lwv0,196(v0)
9d00966c:0040f809 jalrv0
9d009670:97b30058 lhus3,88(sp)

9d009674 <.LVL41>:
    int32_t r2 = radius * radius;
9d009674:7231f002 muls8,s1,s1

9d009678 <.LBB5>:
    for (int y1 = 0-radius; y1 <= 0; y1++) {
9d009678:0011a023 negus4,s1

9d00967c <.LVL43>:
9d00967c:02808821 moves1,s4

9d009680 <.LBB6>:
        int32_t y12 = y1 * y1;
        for (int x1 = 0-radius; x1 <= 0; x1++) {
            if (x1 * x1 + y12 <= r2) {
                drawHorizontalLine(x0 + x1, y0 + y1, 2 * (0-x1), color);
9d009680:2402fffe liv0,-2

9d009684 <.LBE6>:
 *      tft.fillCircle(50, 50, 20, Color::Red);
 */
void DisplayCore::fillCircle(int x0, int y0, int radius, color_t color) {
    startBuffer();
    int32_t r2 = radius * radius;
    for (int y1 = 0-radius; y1 <= 0; y1++) {
9d009684:1e20001f bgtzs1,9d009704 <.LBB10>
9d009688:72312002 mula0,s1,s1

9d00968c <.LBB9>:
        int32_t y12 = y1 * y1;
        for (int x1 = 0-radius; x1 <= 0; x1++) {
9d00968c:02803821 movea3,s4

9d009690 <.LVL47>:
9d009690:1ce0001a bgtza3,9d0096fc <.LBE4>
9d009694:70e72802 mula1,a3,a3
            if (x1 * x1 + y12 <= r2) {
9d009698:00a41821 adduv1,a1,a0
9d00969c:03c3182a sltv1,s8,v1
9d0096a0:5460fffb bnezlv1,9d009690 <.LVL47>
9d0096a4:24e70001 addiua3,a3,1
                drawHorizontalLine(x0 + x1, y0 + y1, 2 * (0-x1), color);
9d0096a8:02c7b821 addus7,s6,a3
9d0096ac:70e2a802 muls5,a3,v0
9d0096b0:8e030000 lwv1,0(s0)
9d0096b4:afb30010 sws3,16(sp)
9d0096b8:8c63008c lwv1,140(v1)
9d0096bc:02002021 movea0,s0

9d0096c0 <.LVL48>:
9d0096c0:02e02821 movea1,s7
9d0096c4:02323021 addua2,s1,s2
9d0096c8:02a03821 movea3,s5

9d0096cc <.LVL49>:
9d0096cc:0060f809 jalrv1
9d0096d0:afa20018 swv0,24(sp)

9d0096d4 <.LVL50>:
                drawHorizontalLine(x0 + x1, y0 - y1, 2 * (0-x1), color);
9d0096d4:8e030000 lwv1,0(s0)
9d0096d8:afb30010 sws3,16(sp)
9d0096dc:8c63008c lwv1,140(v1)
9d0096e0:02002021 movea0,s0
9d0096e4:02e02821 movea1,s7
9d0096e8:02513023 subua2,s2,s1
9d0096ec:0060f809 jalrv1
9d0096f0:02a03821 movea3,s5

9d0096f4 <.LVL51>:
                break;
9d0096f4:0b4025bf j9d0096fc <.LBE4>
9d0096f8:8fa20018 lwv0,24(sp)

9d0096fc <.LBE4>:
 *      tft.fillCircle(50, 50, 20, Color::Red);
 */
void DisplayCore::fillCircle(int x0, int y0, int radius, color_t color) {
    startBuffer();
    int32_t r2 = radius * radius;
    for (int y1 = 0-radius; y1 <= 0; y1++) {
9d0096fc:0b4025a1 j9d009684 <.LBE6>
9d009700:26310001 addius1,s1,1

9d009704 <.LBB10>:
                drawHorizontalLine(x0 + x1, y0 - y1, 2 * (0-x1), color);
                break;
            }
        }
    }
    endBuffer();
9d009704:8e020000 lwv0,0(s0)
9d009708:8c5900c8 lwt9,200(v0)
9d00970c:02002021 movea0,s0

9d009710 <.LBE10>:
}
9d009710:8fbf0044 lwra,68(sp)
9d009714:8fbe0040 lws8,64(sp)

9d009718 <.LVL54>:
9d009718:8fb7003c lws7,60(sp)
9d00971c:8fb60038 lws6,56(sp)

9d009720 <.LVL55>:
9d009720:8fb50034 lws5,52(sp)
9d009724:8fb40030 lws4,48(sp)

9d009728 <.LVL56>:
9d009728:8fb3002c lws3,44(sp)
9d00972c:8fb20028 lws2,40(sp)

9d009730 <.LVL57>:
9d009730:8fb10024 lws1,36(sp)

9d009734 <.LVL58>:
9d009734:8fb00020 lws0,32(sp)

9d009738 <.LBB11>:
                drawHorizontalLine(x0 + x1, y0 - y1, 2 * (0-x1), color);
                break;
            }
        }
    }
    endBuffer();
9d009738:03200008 jrt9
9d00973c:27bd0048 addiusp,sp,72

Disassembly of section .rodata:

9d009740 <.rodata>:
...
9d00974c:3ff00000 0x3ff00000
9d009750:00000000 nop
9d009754:bff00000 cache0x10,0(ra)
9d009758:8800759c lwlzero,30108(zero)
9d00975c:7e37e43c 0x7e37e43c
9d009760:60000000 0x60000000
9d009764:3ff71547 0x3ff71547
9d009768:f85ddf44 sdc2$29,-8380(v0)
9d00976c:3e54ae0b 0x3e54ae0b
9d009770:00000000 nop
9d009774:3fd00000 0x3fd00000
9d009778:55555555 bnelt2,s5,9d01ecd0 <getpid+0x128e4>
9d00977c:3fd55555 0x3fd55555
9d009780:00000000 nop
9d009784:3fe00000 0x3fe00000
9d009788:652b82fe 0x652b82fe
9d00978c:3ff71547 0x3ff71547
9d009790:00000000 nop
9d009794:43400000 c00x1400000
9d009798:4a454eef c20x454eef
9d00979c:3fca7e28 0x3fca7e28
9d0097a0:93c9db65 lbut1,-9371(s8)
9d0097a4:3fcd864a 0x3fcd864a
9d0097a8:a91d4101 swlsp,16641(t0)
9d0097ac:3fd17460 0x3fd17460
9d0097b0:518f264d beqlt4,t7,9d0130e8 <getpid+0x6cfc>
9d0097b4:3fd55555 0x3fd55555
9d0097b8:db6fabff ldc2$15,-21505(k1)
9d0097bc:3fdb6db6 0x3fdb6db6
9d0097c0:33333303 andis3,t9,0x3303
9d0097c4:3fe33333 0x3fe33333
9d0097c8:00000000 nop
9d0097cc:40080000 mfc0t0,c0_index
9d0097d0:e0000000 sczero,0(zero)
9d0097d4:3feec709 0x3feec709
9d0097d8:145b01f5 bnev0,k1,9d009fb0 <.LFE171+0x20>
9d0097dc:be3e2fe0 cache0x1e,12256(s1)
9d0097e0:dc3a03fd ldc3$26,1021(at)
9d0097e4:3feec709 0x3feec709
9d0097e8:652b82fe 0x652b82fe
9d0097ec:3c971547 0x3c971547
9d0097f0:c2f8f359 llt8,-3239(s7)
9d0097f4:01a56e1f 0x1a56e1f
9d0097f8:00000000 nop
9d0097fc:3fe62e43 0x3fe62e43
9d009800:fefa39ef sdc3$26,14831(s7)
9d009804:3fe62e42 0x3fe62e42
9d009808:0ca86c39 jal92a1b0e4 <_stack+0x1299b0ec>
9d00980c:be205c61 cache0x0,23649(s1)
9d009810:72bea4d0 udi0s5,s8,s4,0x13
9d009814:3e663769 0x3e663769
9d009818:c5d26bf1 lwc1$f18,27633(t6)
9d00981c:3ebbbd41 0x3ebbbd41
9d009820:af25de2c swa1,-8660(t9)
9d009824:3f11566a 0x3f11566a
9d009828:16bebd93 bnes5,s8,9cff8e78 <_stack+0x1cf78e80>
9d00982c:3f66c16c 0x3f66c16c
9d009830:5555553e bnelt2,s5,9d01ed2c <getpid+0x12940>
9d009834:3fc55555 0x3fc55555
9d009838:00000000 nop
9d00983c:40000000 mfc0zero,c0_index

Disassembly of section .text._ZN11DisplayCore8drawRGBAEiiPKtiit:

9d009840 <_ZN11DisplayCore8drawRGBAEiiPKtiit>:
 *
 *  Example:
 *
 *    tft.drawRGBA(10, 30, myImage, 16, 16, Color::Black);
 */
void DisplayCore::drawRGBA(int x, int y, const color_t *bitmap, int w, int h, color_t trans) {
9d009840:27bdffc0 addiusp,sp,-64
9d009844:afbf003c swra,60(sp)
9d009848:afbe0038 sws8,56(sp)
9d00984c:afb70034 sws7,52(sp)
9d009850:afb60030 sws6,48(sp)
9d009854:afb5002c sws5,44(sp)
9d009858:afb40028 sws4,40(sp)
9d00985c:afb30024 sws3,36(sp)
9d009860:afb20020 sws2,32(sp)
9d009864:afb1001c sws1,28(sp)
9d009868:afb00018 sws0,24(sp)
9d00986c:00808021 moves0,a0
9d009870:00a0b021 moves6,a1
9d009874:00c0a821 moves5,a2
9d009878:00e09821 moves3,a3
9d00987c:8fb40050 lws4,80(sp)
9d009880:8fb70054 lws7,84(sp)

9d009884 <.LBB8>:
    startBuffer();
9d009884:8c820000 lwv0,0(a0)
9d009888:8c4200c4 lwv0,196(v0)
9d00988c:0040f809 jalrv0
9d009890:97be0058 lhus8,88(sp)

9d009894 <.LVL30>:
9d009894:00141840 sllv1,s4,0x1
    int i, j;
    color_t col;
    for (j = 0; j < h; j++) {
9d009898:00009021 moves2,zero

9d00989c <.LVL31>:
9d00989c:0257102a sltv0,s2,s7
9d0098a0:10400017 beqzv0,9d009900 <.LVL38>
9d0098a4:00008821 moves1,zero
9d0098a8:02551021 adduv0,s2,s5

9d0098ac <.LVL32>:
        for (i = 0; i < w; i++) {
9d0098ac:0234202a slta0,s1,s4
9d0098b0:10800010 beqza0,9d0098f4 <.LBB9>
9d0098b4:00112040 slla0,s1,0x1
9d0098b8:02642021 addua0,s3,a0
            col = bitmap[j * w + i];
9d0098bc:94870000 lhua3,0(a0)

9d0098c0 <.LVL33>:
            if (col != trans) {
9d0098c0:10fe000a beqa3,s8,9d0098ec <.LBE8>
9d0098c4:02362821 addua1,s1,s6
                setPixel(x+i, y+j, col);
9d0098c8:8e040000 lwa0,0(s0)

9d0098cc <.LVL34>:
9d0098cc:8c880084 lwt0,132(a0)
9d0098d0:02002021 movea0,s0
9d0098d4:00403021 movea2,v0
9d0098d8:afa20014 swv0,20(sp)
9d0098dc:0100f809 jalrt0
9d0098e0:afa30010 swv1,16(sp)

9d0098e4 <.LVL35>:
9d0098e4:8fa30010 lwv1,16(sp)
9d0098e8:8fa20014 lwv0,20(sp)

9d0098ec <.LBE8>:
void DisplayCore::drawRGBA(int x, int y, const color_t *bitmap, int w, int h, color_t trans) {
    startBuffer();
    int i, j;
    color_t col;
    for (j = 0; j < h; j++) {
        for (i = 0; i < w; i++) {
9d0098ec:0b40262b j9d0098ac <.LVL32>
9d0098f0:26310001 addius1,s1,1

9d0098f4 <.LBB9>:
 */
void DisplayCore::drawRGBA(int x, int y, const color_t *bitmap, int w, int h, color_t trans) {
    startBuffer();
    int i, j;
    color_t col;
    for (j = 0; j < h; j++) {
9d0098f4:26520001 addius2,s2,1
9d0098f8:0b402627 j9d00989c <.LVL31>
9d0098fc:02639821 addus3,s3,v1

9d009900 <.LVL38>:
            if (col != trans) {
                setPixel(x+i, y+j, col);
            }
        }
    }
    endBuffer();
9d009900:8e020000 lwv0,0(s0)
9d009904:8c5900c8 lwt9,200(v0)
9d009908:02002021 movea0,s0

9d00990c <.LBE9>:
}
9d00990c:8fbf003c lwra,60(sp)
9d009910:8fbe0038 lws8,56(sp)
9d009914:8fb70034 lws7,52(sp)
9d009918:8fb60030 lws6,48(sp)

9d00991c <.LVL39>:
9d00991c:8fb5002c lws5,44(sp)

9d009920 <.LVL40>:
9d009920:8fb40028 lws4,40(sp)
9d009924:8fb30024 lws3,36(sp)
9d009928:8fb20020 lws2,32(sp)

9d00992c <.LVL41>:
9d00992c:8fb1001c lws1,28(sp)
9d009930:8fb00018 lws0,24(sp)

9d009934 <.LBB10>:
            if (col != trans) {
                setPixel(x+i, y+j, col);
            }
        }
    }
    endBuffer();
9d009934:03200008 jrt9
9d009938:27bd0040 addiusp,sp,64

Disassembly of section .text._ZN11DisplayCore13drawRectangleEiiiit:

9d00993c <_ZN11DisplayCore13drawRectangleEiiiit>:
 *
 *  Example:
 * 
 *      tft.drawRectangle(10, 10, 200, 300, Color::Blue);
 */
void DisplayCore::drawRectangle(int x, int y, int w, int h, color_t color) {
9d00993c:27bdffc8 addiusp,sp,-56
9d009940:afbf0034 swra,52(sp)
9d009944:afb50030 sws5,48(sp)
9d009948:afb4002c sws4,44(sp)
9d00994c:afb30028 sws3,40(sp)
9d009950:afb20024 sws2,36(sp)
9d009954:afb10020 sws1,32(sp)
9d009958:afb0001c sws0,28(sp)
9d00995c:00808021 moves0,a0
9d009960:00a09821 moves3,a1
9d009964:00c08821 moves1,a2
9d009968:00e0a821 moves5,a3
9d00996c:8fb40048 lws4,72(sp)
    startBuffer();
9d009970:8c820000 lwv0,0(a0)
9d009974:8c4200c4 lwv0,196(v0)
9d009978:0040f809 jalrv0
9d00997c:97b2004c lhus2,76(sp)

9d009980 <.LVL1>:
    drawHorizontalLine(x, y, w, color);
9d009980:8e020000 lwv0,0(s0)
9d009984:afb20010 sws2,16(sp)
9d009988:8c42008c lwv0,140(v0)
9d00998c:02002021 movea0,s0
9d009990:02602821 movea1,s3
9d009994:02203021 movea2,s1
9d009998:0040f809 jalrv0
9d00999c:02a03821 movea3,s5

9d0099a0 <.LVL2>:
    drawHorizontalLine(x, y+h-1, w, color);
9d0099a0:8e020000 lwv0,0(s0)
9d0099a4:02343021 addua2,s1,s4
9d0099a8:afb20010 sws2,16(sp)
9d0099ac:8c42008c lwv0,140(v0)
9d0099b0:02002021 movea0,s0
9d0099b4:02602821 movea1,s3
9d0099b8:24c6ffff addiua2,a2,-1
9d0099bc:0040f809 jalrv0
9d0099c0:02a03821 movea3,s5

9d0099c4 <.LVL3>:
    drawVerticalLine(x, y, h, color);
9d0099c4:8e020000 lwv0,0(s0)
9d0099c8:afb20010 sws2,16(sp)
9d0099cc:8c420090 lwv0,144(v0)
9d0099d0:02002021 movea0,s0
9d0099d4:02602821 movea1,s3
9d0099d8:02203021 movea2,s1
9d0099dc:0040f809 jalrv0
9d0099e0:02803821 movea3,s4

9d0099e4 <.LVL4>:
    drawVerticalLine(x+w-1, y, h, color);
9d0099e4:8e020000 lwv0,0(s0)
9d0099e8:02752821 addua1,s3,s5
9d0099ec:afb20010 sws2,16(sp)
9d0099f0:8c420090 lwv0,144(v0)
9d0099f4:02002021 movea0,s0
9d0099f8:24a5ffff addiua1,a1,-1
9d0099fc:02203021 movea2,s1
9d009a00:0040f809 jalrv0
9d009a04:02803821 movea3,s4

9d009a08 <.LVL5>:
    endBuffer();
9d009a08:8e020000 lwv0,0(s0)
9d009a0c:8c5900c8 lwt9,200(v0)
9d009a10:02002021 movea0,s0
}
9d009a14:8fbf0034 lwra,52(sp)
9d009a18:8fb50030 lws5,48(sp)

9d009a1c <.LVL6>:
9d009a1c:8fb4002c lws4,44(sp)
9d009a20:8fb30028 lws3,40(sp)

9d009a24 <.LVL7>:
9d009a24:8fb20024 lws2,36(sp)
9d009a28:8fb10020 lws1,32(sp)

9d009a2c <.LVL8>:
9d009a2c:8fb0001c lws0,28(sp)

9d009a30 <.LVL9>:
    startBuffer();
    drawHorizontalLine(x, y, w, color);
    drawHorizontalLine(x, y+h-1, w, color);
    drawVerticalLine(x, y, h, color);
    drawVerticalLine(x+w-1, y, h, color);
    endBuffer();
9d009a30:03200008 jrt9
9d009a34:27bd0038 addiusp,sp,56

Disassembly of section .text._ZN11DisplayCore12drawTriangleEiiiiiit:

9d009a38 <L0>:
 *
 *  Example:
 *
 *      tft.drawTriangle(40, 10, 60, 30, 20, 30, Color::Cyan);
 */
void DisplayCore::drawTriangle(int x0, int y0, int x1, int y1, int x2, int y2, color_t color) {
9d009a38:27bdffc0 addiusp,sp,-64
9d009a3c:afbf003c swra,60(sp)
9d009a40:afb70038 sws7,56(sp)
9d009a44:afb60034 sws6,52(sp)
9d009a48:afb50030 sws5,48(sp)
9d009a4c:afb4002c sws4,44(sp)
9d009a50:afb30028 sws3,40(sp)
9d009a54:afb20024 sws2,36(sp)
9d009a58:afb10020 sws1,32(sp)
9d009a5c:afb0001c sws0,28(sp)
9d009a60:00808021 moves0,a0
9d009a64:00a09021 moves2,a1
9d009a68:00c0a821 moves5,a2
9d009a6c:00e0b821 moves7,a3
9d009a70:8fb60050 lws6,80(sp)
9d009a74:8fb40054 lws4,84(sp)
9d009a78:8fb30058 lws3,88(sp)
    startBuffer();
9d009a7c:8c820000 lwv0,0(a0)
9d009a80:8c4200c4 lwv0,196(v0)
9d009a84:0040f809 jalrv0
9d009a88:97b1005c lhus1,92(sp)

9d009a8c <.LVL1>:
    drawLine(x0, y0, x1, y1, color);
9d009a8c:8e020000 lwv0,0(s0)
9d009a90:afb60010 sws6,16(sp)
9d009a94:afb10014 sws1,20(sp)
9d009a98:8c420010 lwv0,16(v0)
9d009a9c:02002021 movea0,s0
9d009aa0:02402821 movea1,s2
9d009aa4:02a03021 movea2,s5
9d009aa8:0040f809 jalrv0
9d009aac:02e03821 movea3,s7

9d009ab0 <.LVL2>:
    drawLine(x1, y1, x2, y2, color);
9d009ab0:8e020000 lwv0,0(s0)
9d009ab4:afb30010 sws3,16(sp)
9d009ab8:afb10014 sws1,20(sp)
9d009abc:8c420010 lwv0,16(v0)
9d009ac0:02002021 movea0,s0
9d009ac4:02e02821 movea1,s7
9d009ac8:02c03021 movea2,s6
9d009acc:0040f809 jalrv0
9d009ad0:02803821 movea3,s4

9d009ad4 <.LVL3>:
    drawLine(x2, y2, x0, y0, color);
9d009ad4:8e020000 lwv0,0(s0)
9d009ad8:afb50010 sws5,16(sp)
9d009adc:afb10014 sws1,20(sp)
9d009ae0:8c420010 lwv0,16(v0)
9d009ae4:02002021 movea0,s0
9d009ae8:02802821 movea1,s4
9d009aec:02603021 movea2,s3
9d009af0:0040f809 jalrv0
9d009af4:02403821 movea3,s2

9d009af8 <.LVL4>:
    endBuffer();
9d009af8:8e020000 lwv0,0(s0)
9d009afc:8c5900c8 lwt9,200(v0)
9d009b00:02002021 movea0,s0
}
9d009b04:8fbf003c lwra,60(sp)
9d009b08:8fb70038 lws7,56(sp)

9d009b0c <.LVL5>:
9d009b0c:8fb60034 lws6,52(sp)
9d009b10:8fb50030 lws5,48(sp)

9d009b14 <.LVL6>:
9d009b14:8fb4002c lws4,44(sp)
9d009b18:8fb30028 lws3,40(sp)
9d009b1c:8fb20024 lws2,36(sp)

9d009b20 <.LVL7>:
9d009b20:8fb10020 lws1,32(sp)
9d009b24:8fb0001c lws0,28(sp)

9d009b28 <.LVL8>:
void DisplayCore::drawTriangle(int x0, int y0, int x1, int y1, int x2, int y2, color_t color) {
    startBuffer();
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color);
    endBuffer();
9d009b28:03200008 jrt9
9d009b2c:27bd0040 addiusp,sp,64

Disassembly of section .text._ZN11DisplayCore7drawRGBEiiPKtii:

9d009b30 <_ZN11DisplayCore7drawRGBEiiPKtii>:
 *
 *  Example:
 *
 *    tft.drawRGB(10, 30, myImage, 16, 16);
 */
void DisplayCore::drawRGB(int x, int y, const color_t *bitmap, int w, int h) {
9d009b30:27bdffc0 addiusp,sp,-64
9d009b34:afbf003c swra,60(sp)
9d009b38:afbe0038 sws8,56(sp)
9d009b3c:afb70034 sws7,52(sp)
9d009b40:afb60030 sws6,48(sp)
9d009b44:afb5002c sws5,44(sp)
9d009b48:afb40028 sws4,40(sp)
9d009b4c:afb30024 sws3,36(sp)
9d009b50:afb20020 sws2,32(sp)
9d009b54:afb1001c sws1,28(sp)
9d009b58:afb00018 sws0,24(sp)
9d009b5c:00808021 moves0,a0
9d009b60:00a0b021 moves6,a1
9d009b64:00c0a821 moves5,a2
9d009b68:00e09821 moves3,a3
9d009b6c:8fb40050 lws4,80(sp)

9d009b70 <.LBB5>:
    startBuffer();
9d009b70:8c820000 lwv0,0(a0)
9d009b74:8c4200c4 lwv0,196(v0)
9d009b78:0040f809 jalrv0
9d009b7c:8fb70054 lws7,84(sp)

9d009b80 <.LVL17>:
9d009b80:00141040 sllv0,s4,0x1
    int i, j;
    for (j = 0; j < h; j++) {
9d009b84:00009021 moves2,zero

9d009b88 <.LVL18>:
9d009b88:0257182a sltv1,s2,s7
9d009b8c:10600014 beqzv1,9d009be0 <.LVL23>
9d009b90:00008821 moves1,zero
9d009b94:0255f021 addus8,s2,s5

9d009b98 <.LVL19>:
        for (i = 0; i < w; i++) {
9d009b98:0234182a sltv1,s1,s4
9d009b9c:1060000d beqzv1,9d009bd4 <.LBB6>
9d009ba0:00113840 slla3,s1,0x1
            setPixel(x+i, y+j, bitmap[j * w + i]);
9d009ba4:8e030000 lwv1,0(s0)
9d009ba8:02673821 addua3,s3,a3
9d009bac:8c630084 lwv1,132(v1)
9d009bb0:02002021 movea0,s0
9d009bb4:02362821 addua1,s1,s6
9d009bb8:03c03021 movea2,s8
9d009bbc:94e70000 lhua3,0(a3)
9d009bc0:0060f809 jalrv1
9d009bc4:afa20010 swv0,16(sp)

9d009bc8 <.LVL20>:
 */
void DisplayCore::drawRGB(int x, int y, const color_t *bitmap, int w, int h) {
    startBuffer();
    int i, j;
    for (j = 0; j < h; j++) {
        for (i = 0; i < w; i++) {
9d009bc8:26310001 addius1,s1,1

9d009bcc <.LBE5>:
9d009bcc:0b4026e6 j9d009b98 <.LVL19>
9d009bd0:8fa20010 lwv0,16(sp)

9d009bd4 <.LBB6>:
 *    tft.drawRGB(10, 30, myImage, 16, 16);
 */
void DisplayCore::drawRGB(int x, int y, const color_t *bitmap, int w, int h) {
    startBuffer();
    int i, j;
    for (j = 0; j < h; j++) {
9d009bd4:26520001 addius2,s2,1
9d009bd8:0b4026e2 j9d009b88 <.LVL18>
9d009bdc:02629821 addus3,s3,v0

9d009be0 <.LVL23>:
        for (i = 0; i < w; i++) {
            setPixel(x+i, y+j, bitmap[j * w + i]);
        }
    }
    endBuffer();
9d009be0:8e020000 lwv0,0(s0)
9d009be4:8c5900c8 lwt9,200(v0)
9d009be8:02002021 movea0,s0

9d009bec <.LBE6>:
}
9d009bec:8fbf003c lwra,60(sp)
9d009bf0:8fbe0038 lws8,56(sp)
9d009bf4:8fb70034 lws7,52(sp)
9d009bf8:8fb60030 lws6,48(sp)

9d009bfc <.LVL24>:
9d009bfc:8fb5002c lws5,44(sp)

9d009c00 <.LVL25>:
9d009c00:8fb40028 lws4,40(sp)
9d009c04:8fb30024 lws3,36(sp)
9d009c08:8fb20020 lws2,32(sp)

9d009c0c <.LVL26>:
9d009c0c:8fb1001c lws1,28(sp)
9d009c10:8fb00018 lws0,24(sp)

9d009c14 <.LBB7>:
    for (j = 0; j < h; j++) {
        for (i = 0; i < w; i++) {
            setPixel(x+i, y+j, bitmap[j * w + i]);
        }
    }
    endBuffer();
9d009c14:03200008 jrt9
9d009c18:27bd0040 addiusp,sp,64

Disassembly of section .text._Z3Addm:

9d009c1c <_Z3Addm>:
}

// Add a channel into the linked list, based upon PWMValue (i.e. in order)
void Add(uint32_t Channel)
{
    ChanType * ChanP = FirstChanP[InactiveBuffer];
9d009c1c:8f8384dc lwv1,-31524(gp)
9d009c20:00034880 sllt1,v1,0x2
9d009c24:278284c0 addiuv0,gp,-31552
9d009c28:00491021 adduv0,v0,t1
9d009c2c:8c460000 lwa2,0(v0)

9d009c30 <.LVL76>:
9d009c30:3c058000 luia1,0x8000
    ChanType * LastChanP = FirstChanP[InactiveBuffer];

    // As a speical case, if there are no elements in the list, then just add this one to the front
    if (ChanP == NULL)
9d009c34:14c00008 bneza2,9d009c58 <.LBB11>
9d009c38:24a50948 addiua1,a1,2376
    {
        // Yes, so put us first in line
        FirstChanP[InactiveBuffer] = &Chan[InactiveBuffer][Channel];
9d009c3c:24060047 lia2,71

9d009c40 <.LVL77>:
9d009c40:70663802 mula3,v1,a2
9d009c44:00e41821 adduv1,a3,a0
9d009c48:00031940 sllv1,v1,0x5
9d009c4c:00a32821 addua1,a1,v1

9d009c50 <.LBE10>:
9d009c50:0b40273e j9d009cf8 <.LBE13>
9d009c54:ac450000 swa1,0(v0)

9d009c58 <.LBB11>:
    
    // Walk through the linked list, looking for a PWMValue that's bigger than ours
    while (ChanP != NULL)
    {
        // Is this element's PWMValue greater than ours?
        if (ChanP->PWMValue > Chan[InactiveBuffer][Channel].PWMValue) 
9d009c58:24020047 liv0,71
9d009c5c:70623802 mula3,v1,v0
9d009c60:00e41021 adduv0,a3,a0
9d009c64:00021140 sllv0,v0,0x5
9d009c68:00a21021 adduv0,a1,v0
9d009c6c:8c4a0014 lwt2,20(v0)
9d009c70:00c04021 movet0,a2
9d009c74:00c01021 movev0,a2

9d009c78 <.LVL80>:
9d009c78:8c470014 lwa3,20(v0)
9d009c7c:0147382b sltua3,t2,a3
9d009c80:50e00013 beqzla3,9d009cd0 <.LBB12>
9d009c84:8c47001c lwa3,28(v0)
        {
            // Yup. So let's add ourselves right here in the list
            // Are we on the first channel?
            if (ChanP == FirstChanP[InactiveBuffer])
9d009c88:1446000a bnev0,a2,9d009cb4 <.LVL82>
9d009c8c:24060047 lia2,71
            {
                // Yes, so put us first in line
                Chan[InactiveBuffer][Channel].NextChanP = ChanP;
9d009c90:70663802 mula3,v1,a2
9d009c94:00e41821 adduv1,a3,a0
9d009c98:00031940 sllv1,v1,0x5
9d009c9c:00a32821 addua1,a1,v1
9d009ca0:aca2001c swv0,28(a1)
                FirstChanP[InactiveBuffer] = &Chan[InactiveBuffer][Channel];
9d009ca4:278284c0 addiuv0,gp,-31552

9d009ca8 <.LVL81>:
9d009ca8:00494821 addut1,v0,t1
9d009cac:03e00008 jrra
9d009cb0:ad250000 swa1,0(t1)

9d009cb4 <.LVL82>:
            }
            else
            {
                // Nope, we're in the list. So change this element's previous pointer
                Chan[InactiveBuffer][Channel].NextChanP = ChanP;
9d009cb4:70663802 mula3,v1,a2
9d009cb8:00e41821 adduv1,a3,a0
9d009cbc:00031940 sllv1,v1,0x5
9d009cc0:00a32821 addua1,a1,v1
9d009cc4:aca2001c swv0,28(a1)

9d009cc8 <.LBE11>:
                LastChanP->NextChanP = &Chan[InactiveBuffer][Channel];
9d009cc8:03e00008 jrra
9d009ccc:ad05001c swa1,28(t0)

9d009cd0 <.LBB12>:
        Chan[InactiveBuffer][Channel].NextChanP = NULL;
        return;
    }
    
    // Walk through the linked list, looking for a PWMValue that's bigger than ours
    while (ChanP != NULL)
9d009cd0:10e00003 beqza3,9d009ce0 <.LBB13>
9d009cd4:00404021 movet0,v0

9d009cd8 <.LBE12>:
            // And we're done so bail
            return;
        }
        // Advance our pointers by one element in the list
        LastChanP = ChanP;
        ChanP = ChanP->NextChanP;
9d009cd8:0b40271e j9d009c78 <.LVL80>
9d009cdc:00e01021 movev0,a3

9d009ce0 <.LBB13>:
    }
    // Did we blow by the end of the list without finding any greater than ours?
    LastChanP->NextChanP = &Chan[InactiveBuffer][Channel];
9d009ce0:24060047 lia2,71
9d009ce4:70663802 mula3,v1,a2

9d009ce8 <.LVL86>:
9d009ce8:00e41821 adduv1,a3,a0
9d009cec:00031940 sllv1,v1,0x5
9d009cf0:00a32821 addua1,a1,v1
9d009cf4:ac45001c swa1,28(v0)

9d009cf8 <.LBE13>:
    Chan[InactiveBuffer][Channel].NextChanP = NULL;
9d009cf8:03e00008 jrra
9d009cfc:aca0001c swzero,28(a1)

Disassembly of section .text._ZN11DisplayCore20translateCoordinatesEPiS0_:

9d009d00 <_ZN11DisplayCore20translateCoordinatesEPiS0_>:
#include <DisplayCore.h>
#include <stdarg.h>

void DisplayCore::translateCoordinates(int *x, int *y) {
9d009d00:27bdffd8 addiusp,sp,-40
9d009d04:afbf0024 swra,36(sp)
9d009d08:afb30020 sws3,32(sp)
9d009d0c:afb2001c sws2,28(sp)
9d009d10:afb10018 sws1,24(sp)
9d009d14:afb00014 sws0,20(sp)
9d009d18:00808021 moves0,a0
9d009d1c:00a08821 moves1,a1

9d009d20 <.LBB6>:
    int t;
    switch (rotation) {
9d009d20:8c820020 lwv0,32(a0)
9d009d24:24030002 liv1,2
9d009d28:1043000f beqv0,v1,9d009d68 <.LVL3>
9d009d2c:00c09021 moves2,a2
9d009d30:24030003 liv1,3
9d009d34:1043001a beqv0,v1,9d009da0 <.LBB7>
9d009d38:24030001 liv1,1
9d009d3c:14430022 bnev0,v1,9d009dc8 <.LBE7+0x4>
9d009d40:8fbf0024 lwra,36(sp)

9d009d44 <.LVL1>:
        case 1:
            t = *x;
            *x = getWidth() - *y;
9d009d44:8c820000 lwv0,0(a0)
9d009d48:8c4200d8 lwv0,216(v0)
9d009d4c:0040f809 jalrv0
9d009d50:8cb30000 lws3,0(a1)

9d009d54 <.LVL2>:
9d009d54:8e430000 lwv1,0(s2)
9d009d58:00431023 subuv0,v0,v1
9d009d5c:ae220000 swv0,0(s1)
            *y = t;
            break;
9d009d60:0b402771 j9d009dc4 <.LBE7>
9d009d64:ae530000 sws3,0(s2)

9d009d68 <.LVL3>:
        case 2:
            *x = getWidth() - *x;
9d009d68:8c820000 lwv0,0(a0)
9d009d6c:8c4200d8 lwv0,216(v0)
9d009d70:0040f809 jalrv0
9d009d74:00000000 nop

9d009d78 <.LVL4>:
9d009d78:8e230000 lwv1,0(s1)
9d009d7c:00431023 subuv0,v0,v1
9d009d80:ae220000 swv0,0(s1)
            *y = getHeight() - *y;
9d009d84:8e020000 lwv0,0(s0)
9d009d88:8c4200dc lwv0,220(v0)
9d009d8c:0040f809 jalrv0
9d009d90:02002021 movea0,s0

9d009d94 <.LVL5>:
9d009d94:8e430000 lwv1,0(s2)

9d009d98 <.LBE6>:
9d009d98:0b402770 j9d009dc0 <.LVL9>
9d009d9c:00431023 subuv0,v0,v1

9d009da0 <.LBB7>:
            break;
        case 3:
            t = *x;
9d009da0:8cb30000 lws3,0(a1)

9d009da4 <.LVL7>:
            *x = *y;
9d009da4:8cc20000 lwv0,0(a2)
9d009da8:aca20000 swv0,0(a1)
            *y = getHeight() - t;
9d009dac:8c820000 lwv0,0(a0)
9d009db0:8c4200dc lwv0,220(v0)
9d009db4:0040f809 jalrv0
9d009db8:00000000 nop

9d009dbc <.LVL8>:
9d009dbc:00531023 subuv0,v0,s3

9d009dc0 <.LVL9>:
9d009dc0:ae420000 swv0,0(s2)

9d009dc4 <.LBE7>:
            break;
    }
}
9d009dc4:8fbf0024 lwra,36(sp)
9d009dc8:8fb30020 lws3,32(sp)
9d009dcc:8fb2001c lws2,28(sp)

9d009dd0 <.LVL10>:
9d009dd0:8fb10018 lws1,24(sp)

9d009dd4 <.LVL11>:
9d009dd4:8fb00014 lws0,20(sp)

9d009dd8 <.LVL12>:
9d009dd8:03e00008 jrra
9d009ddc:27bd0028 addiusp,sp,40

Disassembly of section .text.digitalWrite:

9d009de0 <digitalWrite>:
//*Reading from PORT gives you a snapshot of the actual pins state regardless of how, 
//*if at all, the PIC is trying to drive them.  
//*Reading from LAT gives you the values last written to the pins, whether thru LAT or PORT.
//************************************************************************
void digitalWrite(uint8_t pin, uint8_t val)
{
9d009de0:27bdffe0 addiusp,sp,-32
9d009de4:afbf001c swra,28(sp)
9d009de8:afb20018 sws2,24(sp)
9d009dec:afb10014 sws1,20(sp)
9d009df0:afb00010 sws0,16(sp)
9d009df4:308400ff andia0,a0,0xff
uint32_t                cn;
#endif

/* Check if pin number is in valid range.
*/
if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d009df8:2c820047 sltiuv0,a0,71
9d009dfc:10400029 beqzv0,9d009ea4 <.LVL27>
9d009e00:30b200ff andis2,a1,0xff
return;
}
#endif// OPT_BOARD_DIGITAL_IO

//* Get the port number for this pin.
if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d009e04:3c109d01 luis0,0x9d01
9d009e08:2610b9b0 addius0,s0,-18000
9d009e0c:7e04818a lbuxs0,a0(s0)

9d009e10 <.LVL22>:
9d009e10:12000024 beqzs0,9d009ea4 <.LVL27>
9d009e14:00108080 slls0,s0,0x2
{
return;
}

//* Obtain pointer to the registers for this io port.
iop = (p32_ioport *)portRegisters(port);
9d009e18:3c029d01 luiv0,0x9d01
9d009e1c:2442bde8 addiuv0,v0,-16920
9d009e20:7c50800a lwxs0,s0(v0)
9d009e24:2610fff0 addius0,s0,-16

9d009e28 <.LVL23>:

    //* If the port is in input mode and we write a value to it
    //* we must be enabling or disabling the internal pull-up
    //* resistor.  Only works for pins that have an associated
    //* change notification pin.
    if (iop->tris.reg & bit) {
9d009e28:8e020010 lwv0,16(s0)

//* Obtain pointer to the registers for this io port.
iop = (p32_ioport *)portRegisters(port);

//* Obtain bit mask for the specific bit for this pin.
bit = digitalPinToBitMask(pin);
9d009e2c:00042040 slla0,a0,0x1

9d009e30 <.LVL24>:
9d009e30:3c039d01 luiv1,0x9d01
9d009e34:2463ae74 addiuv1,v1,-20876
9d009e38:00831821 adduv1,a0,v1

    //* If the port is in input mode and we write a value to it
    //* we must be enabling or disabling the internal pull-up
    //* resistor.  Only works for pins that have an associated
    //* change notification pin.
    if (iop->tris.reg & bit) {
9d009e3c:94710000 lhus1,0(v1)
9d009e40:02221024 andv0,s1,v0
9d009e44:5040000a beqzlv0,9d009e70 <.LVL24+0x40>
9d009e48:3c029d01 luiv0,0x9d01
#if defined(__PIC32_PPS__)
        if (val == LOW) {
9d009e4c:16400004 bnezs2,9d009e60 <.LVL24+0x30>
9d009e50:00000000 nop
            iop->cnpu.clr = bit;
9d009e54:ae110054 sws1,84(s0)
9d009e58:0b402799 j9d009e64 <.LVL24+0x34>
9d009e5c:00000000 nop
            iop->cnpd.clr = bit;
        } else {
            iop->cnpu.set = bit;
9d009e60:ae110058 sws1,88(s0)
            iop->cnpd.clr = bit;
9d009e64:ae110064 sws1,100(s0)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d009e68:0b4027aa j9d009ea8 <.LVL27+0x4>
9d009e6c:8fbf001c lwra,28(sp)
#endif

    } else {
        //* Determine if this is an output compare pin. If so,
        //* we need to make sure PWM output is off.
        timer = digitalPinToTimerOC(pin);
9d009e70:2442af04 addiuv0,v0,-20732
9d009e74:7c44218a lbuxa0,a0(v0)
9d009e78:3084000f andia0,a0,0xf

9d009e7c <.LVL25>:
        if (timer != NOT_ON_TIMER)
9d009e7c:10800003 beqza0,9d009e8c <.LVL26>
9d009e80:00000000 nop
        {
            turnOffPWM(timer);
9d009e84:0f402dce jal9d00b738 <.LFE171>
9d009e88:00000000 nop

9d009e8c <.LVL26>:
        }

        //* Set the pin state
        if (val == LOW)
9d009e8c:16400004 bnezs2,9d009ea0 <.LVL26+0x14>
9d009e90:00000000 nop
        {
            iop->lat.clr = bit;
9d009e94:ae110034 sws1,52(s0)
9d009e98:0b4027aa j9d009ea8 <.LVL27+0x4>
9d009e9c:8fbf001c lwra,28(sp)
        }
        else
        {
            iop->lat.set = bit;
9d009ea0:ae110038 sws1,56(s0)

9d009ea4 <.LVL27>:
        }
    }
}
9d009ea4:8fbf001c lwra,28(sp)
9d009ea8:8fb20018 lws2,24(sp)

9d009eac <.LVL28>:
9d009eac:8fb10014 lws1,20(sp)
9d009eb0:8fb00010 lws0,16(sp)
9d009eb4:03e00008 jrra
9d009eb8:27bd0020 addiusp,sp,32

Disassembly of section .text._ZN11DisplayCore13fillRectangleEiiiit:

9d009ebc <_ZN11DisplayCore13fillRectangleEiiiit>:
 *      tft.fillRectangle(10, 10, 200, 300, Color::Blue);
 *
 *  It is expected that actual screen drivers will override this function with a high speed
 *  optimized function.
 */
void DisplayCore::fillRectangle(int x, int y, int w, int h, color_t color) {
9d009ebc:27bdffc8 addiusp,sp,-56
9d009ec0:afbf0034 swra,52(sp)
9d009ec4:afbe0030 sws8,48(sp)
9d009ec8:afb7002c sws7,44(sp)
9d009ecc:afb60028 sws6,40(sp)
9d009ed0:afb50024 sws5,36(sp)
9d009ed4:afb40020 sws4,32(sp)
9d009ed8:afb3001c sws3,28(sp)
9d009edc:afb20018 sws2,24(sp)
9d009ee0:afb10014 sws1,20(sp)
9d009ee4:afb00010 sws0,16(sp)
9d009ee8:00808021 moves0,a0
9d009eec:00a0a021 moves4,a1
9d009ef0:00c09821 moves3,a2
9d009ef4:00e0a821 moves5,a3
9d009ef8:8fb60048 lws6,72(sp)
    startBuffer();
9d009efc:8c820000 lwv0,0(a0)
9d009f00:8c4200c4 lwv0,196(v0)
9d009f04:0040f809 jalrv0
9d009f08:97b7004c lhus7,76(sp)

9d009f0c <.LBB3>:
    for (int i = 0; i < h; i++) {
9d009f0c:00008821 moves1,zero

9d009f10 <.LVL13>:
9d009f10:0236102a sltv0,s1,s6
9d009f14:1040000f beqzv0,9d009f54 <.LVL17>
9d009f18:00009021 moves2,zero
9d009f1c:0233f021 addus8,s1,s3

9d009f20 <.LBB4>:
        for (int j = 0; j < w; j++) {
9d009f20:0255102a sltv0,s2,s5
9d009f24:10400009 beqzv0,9d009f4c <.LBE3+0x8>
9d009f28:02002021 movea0,s0
            setPixel(x + j, y + i, color);
9d009f2c:8e020000 lwv0,0(s0)
9d009f30:8c420084 lwv0,132(v0)
9d009f34:02542821 addua1,s2,s4
9d009f38:03c03021 movea2,s8
9d009f3c:0040f809 jalrv0
9d009f40:02e03821 movea3,s7

9d009f44 <.LBE3>:
 *  optimized function.
 */
void DisplayCore::fillRectangle(int x, int y, int w, int h, color_t color) {
    startBuffer();
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
9d009f44:0b4027c8 j9d009f20 <.LBB4>
9d009f48:26520001 addius2,s2,1
 *  It is expected that actual screen drivers will override this function with a high speed
 *  optimized function.
 */
void DisplayCore::fillRectangle(int x, int y, int w, int h, color_t color) {
    startBuffer();
    for (int i = 0; i < h; i++) {
9d009f4c:0b4027c4 j9d009f10 <.LVL13>
9d009f50:26310001 addius1,s1,1

9d009f54 <.LVL17>:
        for (int j = 0; j < w; j++) {
            setPixel(x + j, y + i, color);
        }
    }
    endBuffer();
9d009f54:8e020000 lwv0,0(s0)
9d009f58:8c5900c8 lwt9,200(v0)
9d009f5c:02002021 movea0,s0
}
9d009f60:8fbf0034 lwra,52(sp)
9d009f64:8fbe0030 lws8,48(sp)
9d009f68:8fb7002c lws7,44(sp)
9d009f6c:8fb60028 lws6,40(sp)
9d009f70:8fb50024 lws5,36(sp)

9d009f74 <.LVL18>:
9d009f74:8fb40020 lws4,32(sp)

9d009f78 <.LVL19>:
9d009f78:8fb3001c lws3,28(sp)

9d009f7c <.LVL20>:
9d009f7c:8fb20018 lws2,24(sp)
9d009f80:8fb10014 lws1,20(sp)

9d009f84 <.LVL21>:
9d009f84:8fb00010 lws0,16(sp)

9d009f88 <.LVL22>:
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            setPixel(x + j, y + i, color);
        }
    }
    endBuffer();
9d009f88:03200008 jrt9
9d009f8c:27bd0038 addiusp,sp,56

Disassembly of section .text._ZN7SSD128913fillRectangleEiiiit:

9d009f90 <_ZN7SSD128913fillRectangleEiiiit>:

void SSD1289::fillScreen(color_t color) {
fillRectangle(0, 0,  _width, _height, color);
}

void SSD1289::fillRectangle(int x, int y, int w, int h, color_t color) {
9d009f90:27bdffd8 addiusp,sp,-40
9d009f94:afbf0024 swra,36(sp)
9d009f98:afb10020 sws1,32(sp)
9d009f9c:afb0001c sws0,28(sp)
9d009fa0:00808021 moves0,a0
9d009fa4:afa5002c swa1,44(sp)
9d009fa8:afa60030 swa2,48(sp)
9d009fac:afa70034 swa3,52(sp)
9d009fb0:97b1003c lhus1,60(sp)
    if (!clipToScreen(x, y, w, h)) {
9d009fb4:27a20038 addiuv0,sp,56

9d009fb8 <.LVL190>:
9d009fb8:afa20010 swv0,16(sp)
9d009fbc:27a5002c addiua1,sp,44

9d009fc0 <.LVL191>:
9d009fc0:27a60030 addiua2,sp,48

9d009fc4 <.LVL192>:
9d009fc4:0f401f91 jal9d007e44 <.LBE47>
9d009fc8:27a70034 addiua3,sp,52

9d009fcc <.LVL193>:
9d009fcc:10400020 beqzv0,9d00a050 <.LVL195+0x1c>
9d009fd0:8fbf0024 lwra,36(sp)
        return;
    }
setAddrWindow(x, y, x+w-1, y+h-1);
9d009fd4:8fa5002c lwa1,44(sp)
9d009fd8:8fa60030 lwa2,48(sp)
9d009fdc:8fa70034 lwa3,52(sp)
9d009fe0:00a73821 addua3,a1,a3
9d009fe4:8fa20038 lwv0,56(sp)
9d009fe8:00c21021 adduv0,a2,v0
9d009fec:2442ffff addiuv0,v0,-1
9d009ff0:afa20010 swv0,16(sp)
9d009ff4:02002021 movea0,s0
9d009ff8:0f4021ce jal9d008738 <.LFE192>
9d009ffc:24e7ffff addiua3,a3,-1

9d00a000 <.LVL194>:
for(y=h; y>0; y--) {
9d00a000:8fa20038 lwv0,56(sp)
9d00a004:afa20030 swv0,48(sp)
9d00a008:8fa20030 lwv0,48(sp)
9d00a00c:1840000f blezv0,9d00a04c <.LVL195+0x18>
9d00a010:8fa20034 lwv0,52(sp)
for(x=w; x>0; x--) {
9d00a014:afa2002c swv0,44(sp)
9d00a018:8fa2002c lwv0,44(sp)
9d00a01c:18400008 blezv0,9d00a040 <.LVL195+0xc>
9d00a020:02002021 movea0,s0
            data(color);
9d00a024:8e020000 lwv0,0(s0)
9d00a028:8c4200e4 lwv0,228(v0)
9d00a02c:0040f809 jalrv0
9d00a030:02202821 movea1,s1

9d00a034 <.LVL195>:
    if (!clipToScreen(x, y, w, h)) {
        return;
    }
setAddrWindow(x, y, x+w-1, y+h-1);
for(y=h; y>0; y--) {
for(x=w; x>0; x--) {
9d00a034:8fa2002c lwv0,44(sp)
9d00a038:0b402805 j9d00a014 <.LVL194+0x14>
9d00a03c:2442ffff addiuv0,v0,-1
void SSD1289::fillRectangle(int x, int y, int w, int h, color_t color) {
    if (!clipToScreen(x, y, w, h)) {
        return;
    }
setAddrWindow(x, y, x+w-1, y+h-1);
for(y=h; y>0; y--) {
9d00a040:8fa20030 lwv0,48(sp)
9d00a044:0b402801 j9d00a004 <.LVL194+0x4>
9d00a048:2442ffff addiuv0,v0,-1
for(x=w; x>0; x--) {
            data(color);
}
}
}
9d00a04c:8fbf0024 lwra,36(sp)
9d00a050:8fb10020 lws1,32(sp)
9d00a054:8fb0001c lws0,28(sp)

9d00a058 <.LVL196>:
9d00a058:03e00008 jrra
9d00a05c:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCore9map3Dto2DER7point3d:

9d00a060 <_ZN11DisplayCore9map3Dto2DER7point3d>:
#include <DisplayCore.h>
#include <stdarg.h>

point2d DisplayCore::map3Dto2D(point3d &d) {
9d00a060:27bdffd0 addiusp,sp,-48
9d00a064:afbf001c swra,28(sp)
9d00a068:afb20018 sws2,24(sp)
9d00a06c:afb10014 sws1,20(sp)
9d00a070:afb00010 sws0,16(sp)
9d00a074:f7b40020 sdc1$f20,32(sp)
9d00a078:00809021 moves2,a0
9d00a07c:00a08021 moves0,a1
9d00a080:00c08821 moves1,a2

9d00a084 <.LBB2>:
    point2d p2d;

    p2d.x = d.x * _fov / d.z + (getWidth() / 2);
9d00a084:c4a000b8 lwc1$f0,184(a1)
9d00a088:46800521 cvt.d.w$f20,$f0
9d00a08c:d4c00000 ldc1$f0,0(a2)
9d00a090:4620a502 mul.d$f20,$f20,$f0
9d00a094:d4c00010 ldc1$f0,16(a2)
9d00a098:4620a503 div.d$f20,$f20,$f0
9d00a09c:8ca20000 lwv0,0(a1)
9d00a0a0:8c4200d8 lwv0,216(v0)

9d00a0a4 <.LVL1>:
9d00a0a4:0040f809 jalrv0
9d00a0a8:00a02021 movea0,a1

9d00a0ac <.LVL2>:
9d00a0ac:00021fc2 srlv1,v0,0x1f
9d00a0b0:00621021 adduv0,v1,v0
9d00a0b4:00021843 srav1,v0,0x1
9d00a0b8:44830800 mtc1v1,$f1
9d00a0bc:46800821 cvt.d.w$f0,$f1
9d00a0c0:4620a500 add.d$f20,$f20,$f0
9d00a0c4:f6540000 sdc1$f20,0(s2)
    p2d.y = d.y * _fov / d.z + (getHeight() / 2);
9d00a0c8:c60000b8 lwc1$f0,184(s0)
9d00a0cc:46800521 cvt.d.w$f20,$f0
9d00a0d0:d6200008 ldc1$f0,8(s1)
9d00a0d4:4620a502 mul.d$f20,$f20,$f0
9d00a0d8:d6200010 ldc1$f0,16(s1)
9d00a0dc:4620a503 div.d$f20,$f20,$f0
9d00a0e0:8e020000 lwv0,0(s0)
9d00a0e4:8c4200dc lwv0,220(v0)
9d00a0e8:0040f809 jalrv0
9d00a0ec:02002021 movea0,s0

9d00a0f0 <.LVL3>:
9d00a0f0:00021fc2 srlv1,v0,0x1f
9d00a0f4:00621021 adduv0,v1,v0
9d00a0f8:00021843 srav1,v0,0x1
9d00a0fc:44830800 mtc1v1,$f1
9d00a100:46800821 cvt.d.w$f0,$f1
9d00a104:4620a500 add.d$f20,$f20,$f0
9d00a108:f6540008 sdc1$f20,8(s2)

9d00a10c <.LBE2>:

    return p2d;
}
9d00a10c:02401021 movev0,s2
9d00a110:8fbf001c lwra,28(sp)
9d00a114:8fb20018 lws2,24(sp)

9d00a118 <.LVL4>:
9d00a118:8fb10014 lws1,20(sp)

9d00a11c <.LVL5>:
9d00a11c:8fb00010 lws0,16(sp)

9d00a120 <.LVL6>:
9d00a120:d7b40020 ldc1$f20,32(sp)
9d00a124:03e00008 jrra
9d00a128:27bd0030 addiusp,sp,48

Disassembly of section .text._Z16SoftPWMServoInitv:

9d00a12c <_Z16SoftPWMServoInitv>:
/****************** Public Functions ******************************/

// Initialize all static variables to default state
// Insert SoftPWM ISR into Core Timer ISR
int32_t SoftPWMServoInit(void)
{
9d00a12c:27bdffe8 addiusp,sp,-24
9d00a130:afbf0014 swra,20(sp)
9d00a134:afb00010 sws0,16(sp)

9d00a138 <.LVL0>:
9d00a138:278384c0 addiuv1,gp,-31552
9d00a13c:3c058000 luia1,0x8000
9d00a140:24a50948 addiua1,a1,2376
9d00a144:24660008 addiua2,v1,8

9d00a148 <.LVL1>:
9d00a148:00a01021 movev0,a1
9d00a14c:24040047 lia0,71

9d00a150 <.LBB5>:
    // Initialize all of our static arrays
    for (j = 0; j < 2; j++)
    {
        for (i = 0; i < SOFTPWMSERVO_MAX_PINS; i++)
        {
            Chan[j][i].NextEdgeTime = 0;
9d00a150:ac400000 swzero,0(v0)
            Chan[j][i].SetPort = NULL;
9d00a154:ac400004 swzero,4(v0)
            Chan[j][i].ClearPort = NULL;
9d00a158:ac400008 swzero,8(v0)
            Chan[j][i].Port = 0;
9d00a15c:ac40000c swzero,12(v0)
            Chan[j][i].Bit = 0;
9d00a160:ac400010 swzero,16(v0)
            Chan[j][i].PWMValue = 0;
9d00a164:ac400014 swzero,20(v0)
            Chan[j][i].IsServo = false;
9d00a168:ac400018 swzero,24(v0)
            Chan[j][i].NextChanP = NULL;
9d00a16c:ac40001c swzero,28(v0)

9d00a170 <.LVL3>:
9d00a170:2484ffff addiua0,a0,-1

9d00a174 <.LVL4>:
    uint32_t i, j;

    // Initialize all of our static arrays
    for (j = 0; j < 2; j++)
    {
        for (i = 0; i < SOFTPWMSERVO_MAX_PINS; i++)
9d00a174:1480fff6 bneza0,9d00a150 <.LBB5>
9d00a178:24420020 addiuv0,v0,32
            Chan[j][i].Bit = 0;
            Chan[j][i].PWMValue = 0;
            Chan[j][i].IsServo = false;
            Chan[j][i].NextChanP = NULL;
        }
        FirstChanP[j] = NULL;
9d00a17c:ac600000 swzero,0(v1)
9d00a180:24630004 addiuv1,v1,4
int32_t SoftPWMServoInit(void)
{
    uint32_t i, j;

    // Initialize all of our static arrays
    for (j = 0; j < 2; j++)
9d00a184:1466fff0 bnev1,a2,9d00a148 <.LVL1>
9d00a188:24a508e0 addiua1,a1,2272
            Chan[j][i].NextChanP = NULL;
        }
        FirstChanP[j] = NULL;
    }

    RisingEdge = true;
9d00a18c:24020001 liv0,1
9d00a190:a38284c9 sbv0,-31543(gp)
    CurrentTime = 0;
9d00a194:af8084cc swzero,-31540(gp)
    InactiveBuffer = 1;
9d00a198:24100001 lis0,1
9d00a19c:af9084dc sws0,-31524(gp)
    ActiveBuffer = 0;
9d00a1a0:af8084d0 swzero,-31536(gp)
    ISRFirstChanP = NULL;
9d00a1a4:af8084d4 swzero,-31532(gp)
    InactiveBufferReady = false;
9d00a1a8:a38084c8 sbzero,-31544(gp)
    FrameTime = SOFTPWMSERVO_DEFAULT_FRAME_TIME;        // Start out with default 2ms frame time
9d00a1ac:3c020003 luiv0,0x3
9d00a1b0:3442d090 oriv0,v0,0xd090
9d00a1b4:af828010 swv0,-32752(gp)
    ServoFrames = SOFTPWMSERVO_DEFAULT_SERVO_FRAMES;    // Start out with default of 10 frames (20ms)
9d00a1b8:2402000a liv0,10
9d00a1bc:af828014 swv0,-32748(gp)
    
    // Insert our ISR handler, if it's not already there
    if (attachCoreTimerService(HandlePWMServo))
9d00a1c0:3c049d00 luia0,0x9d00

9d00a1c4 <.LVL5>:
9d00a1c4:0f402b52 jal9d00ad48 <.LFE171>
9d00a1c8:24846cf4 addiua0,a0,27892

9d00a1cc <.LVL6>:
9d00a1cc:10400003 beqzv0,9d00a1dc <.LVL6+0x10>
9d00a1d0:00001021 movev0,zero
    {
        Initalized = true;
        return SOFTPWMSERVO_OK;
9d00a1d4:0b402879 j9d00a1e4 <.LBE5>
9d00a1d8:a39084e0 sbs0,-31520(gp)
    }
    else
    {
        Initalized = false;
9d00a1dc:a38084e0 sbzero,-31520(gp)
        return SOFTPWMSERVO_ERROR;
9d00a1e0:2402ffff liv0,-1

9d00a1e4 <.LBE5>:
    }
}
9d00a1e4:8fbf0014 lwra,20(sp)
9d00a1e8:8fb00010 lws0,16(sp)
9d00a1ec:03e00008 jrra
9d00a1f0:27bd0018 addiusp,sp,24

Disassembly of section .text._Z20SoftPWMServoRawWritemmb:

9d00a1f4 <_Z20SoftPWMServoRawWritemmb>:
// Set a new PWM value for a given pin
// Primarily this consists of updating the PWMValue and then 
// re-sorting the list of active pins by removing and then adding
// the pin to the linked list.
int32_t SoftPWMServoRawWrite(uint32_t Pin, uint32_t Value, bool PinType)
{
9d00a1f4:27bdffd8 addiusp,sp,-40
9d00a1f8:afbf0024 swra,36(sp)
9d00a1fc:afb30020 sws3,32(sp)
9d00a200:afb2001c sws2,28(sp)
9d00a204:afb10018 sws1,24(sp)
9d00a208:afb00014 sws0,20(sp)
9d00a20c:00808021 moves0,a0

9d00a210 <.LBB7>:
    int i;
    int32_t intr;

    if (Pin >= SOFTPWMSERVO_MAX_PINS)
9d00a210:2c820047 sltiuv0,a0,71
9d00a214:10400021 beqzv0,9d00a29c <.LVL33>
9d00a218:30d100ff andis1,a2,0xff
    {
        return SOFTPWMSERVO_ERROR;
    }

    // Insert our ISR handler, if it's not already there
    if (!Initalized)
9d00a21c:938284e0 lbuv0,-31520(gp)
9d00a220:14400003 bnezv0,9d00a230 <.LVL25>
9d00a224:00a09021 moves2,a1
    {
        SoftPWMServoInit();
9d00a228:0f40284b jal9d00a12c <.LFE170>
9d00a22c:00000000 nop

9d00a230 <.LVL25>:
    }

    // Limit check the inputs
    if (Value > FrameTime)
9d00a230:8f828010 lwv0,-32752(gp)
9d00a234:0052182b sltuv1,v0,s2
    // TODO: Switch to using 3 buffers - one 'active' that the ISR
    // is currently using, one 'primed' that the mainline code doesn't
    // touch but has updates and is ready to be swapped before the
    // next rising edge, and then 'inactive' which is the one we modify
    // with here. Maybe we wouldn't need to disable interrupts then.
    intr = disableInterrupts();
9d00a238:0f4030c2 jal9d00c308 <.LFE6>
9d00a23c:0043900b movns2,v0,v1

9d00a240 <.LVL27>:

    // If needed, copy the values from the previously active buffer
    // into the inactive buffer before we begin work on it.
    CopyBuffers();
9d00a240:0f4024b4 jal9d0092d0 <.LFE180>
9d00a244:00409821 moves3,v0

9d00a248 <.LVL28>:
 
    // Always make sure this pin's enabled
    SoftPWMServoPinEnable(Pin, PinType);
9d00a248:02002021 movea0,s0
9d00a24c:0f40232d jal9d008cb4 <L0>
9d00a250:02202821 movea1,s1

9d00a254 <.LVL29>:

    // Update the PWM value for this pin
    Chan[InactiveBuffer][Pin].PWMValue = Value;
9d00a254:24020047 liv0,71
9d00a258:8f8384dc lwv1,-31524(gp)
9d00a25c:70622002 mula0,v1,v0
9d00a260:00901021 adduv0,a0,s0
9d00a264:00021140 sllv0,v0,0x5
9d00a268:3c038000 luiv1,0x8000
9d00a26c:24630948 addiuv1,v1,2376
9d00a270:00621821 adduv1,v1,v0
9d00a274:ac720014 sws2,20(v1)
    Chan[InactiveBuffer][Pin].IsServo = PinType;
9d00a278:ac710018 sws1,24(v1)
    
    // Remove it from the list
    Remove(Pin);
9d00a27c:0f402c84 jal9d00b210 <.LFE101>
9d00a280:02002021 movea0,s0

9d00a284 <.LVL30>:
    
    // And add it back in the list, in the right place (in time)
    Add(Pin);    
9d00a284:0f402707 jal9d009c1c <.LBE7>
9d00a288:02002021 movea0,s0

9d00a28c <.LVL31>:

    restoreInterrupts(intr);  
9d00a28c:0f403042 jal9d00c108 <.LFE171>
9d00a290:02602021 movea0,s3

9d00a294 <.LVL32>:

    return SOFTPWMSERVO_OK;
9d00a294:0b4028a8 j9d00a2a0 <.LBE7>
9d00a298:00001021 movev0,zero

9d00a29c <.LVL33>:
    int i;
    int32_t intr;

    if (Pin >= SOFTPWMSERVO_MAX_PINS)
    {
        return SOFTPWMSERVO_ERROR;
9d00a29c:2402ffff liv0,-1

9d00a2a0 <.LBE7>:
    Add(Pin);    

    restoreInterrupts(intr);  

    return SOFTPWMSERVO_OK;
}
9d00a2a0:8fbf0024 lwra,36(sp)
9d00a2a4:8fb30020 lws3,32(sp)
9d00a2a8:8fb2001c lws2,28(sp)
9d00a2ac:8fb10018 lws1,24(sp)

9d00a2b0 <.LVL35>:
9d00a2b0:8fb00014 lws0,20(sp)

9d00a2b4 <.LVL36>:
9d00a2b4:03e00008 jrra
9d00a2b8:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCore3mixEtti:

9d00a2bc <_ZN11DisplayCore3mixEtti>:
 *
 *  Example:
 *
 *      unsigned int yellow = tft.mix(Color::Red, Color::Green);
 */
color_t DisplayCore::mix(color_t a, color_t b, int pct) {
9d00a2bc:27bdfff0 addiusp,sp,-16

9d00a2c0 <.LBB22>:
    Color565 col_a;
    Color565 col_b;
    Color565 col_out;
    col_a.value = a;
9d00a2c0:a7a50008 sha1,8(sp)
    col_b.value = b;
9d00a2c4:a7a60004 sha2,4(sp)
    uint32_t temp;
    temp = (((int32_t)col_a.r * (255-pct)) / 255) + (((uint32_t)col_b.r * pct) / 255);
9d00a2c8:240300ff liv1,255
9d00a2cc:00672823 subua1,v1,a3

9d00a2d0 <.LVL119>:
9d00a2d0:8fa60008 lwa2,8(sp)

9d00a2d4 <.LVL120>:
9d00a2d4:30c2001f andiv0,a2,0x1f
9d00a2d8:70451002 mulv0,v0,a1
9d00a2dc:0043001a divzero,v0,v1
9d00a2e0:006001f4 teqv1,zero,0x7
9d00a2e4:00004012 mflot0
9d00a2e8:8fa40004 lwa0,4(sp)

9d00a2ec <.LVL121>:
9d00a2ec:3082001f andiv0,a0,0x1f
9d00a2f0:70e21002 mulv0,a3,v0
9d00a2f4:0043001b divuzero,v0,v1
9d00a2f8:006001f4 teqv1,zero,0x7
9d00a2fc:00001012 mflov0
9d00a300:01024021 addut0,t0,v0
    col_out.r = temp;
9d00a304:97a20000 lhuv0,0(sp)
9d00a308:7d022004 insv0,t0,0x0,0x5

9d00a30c <.LVL122>:
    temp = (((int32_t)col_a.g * (255-pct)) / 255) + (((uint32_t)col_b.g * pct) / 255);
9d00a30c:7cc82940 extt0,a2,0x5,0x6
9d00a310:71054002 mult0,t0,a1
9d00a314:0103001a divzero,t0,v1
9d00a318:006001f4 teqv1,zero,0x7
9d00a31c:00004812 mflot1
9d00a320:7c882940 extt0,a0,0x5,0x6
9d00a324:70e84002 mult0,a3,t0
9d00a328:0103001b divuzero,t0,v1
9d00a32c:006001f4 teqv1,zero,0x7
9d00a330:00004012 mflot0
9d00a334:01284021 addut0,t1,t0
    col_out.g = temp;
9d00a338:7d025144 insv0,t0,0x5,0x6

9d00a33c <.LVL123>:
    temp = (((int32_t)col_a.b * (255-pct)) / 255) + (((uint32_t)col_b.b * pct) / 255);
9d00a33c:7cc622c0 exta2,a2,0xb,0x5
9d00a340:70c52802 mula1,a2,a1

9d00a344 <.LVL124>:
9d00a344:00a3001a divzero,a1,v1
9d00a348:006001f4 teqv1,zero,0x7
9d00a34c:00002812 mfloa1
9d00a350:7c8422c0 exta0,a0,0xb,0x5
9d00a354:70e43802 mula3,a3,a0

9d00a358 <.LVL125>:
9d00a358:00e3001b divuzero,a3,v1
9d00a35c:006001f4 teqv1,zero,0x7
9d00a360:00003812 mfloa3
9d00a364:00a72821 addua1,a1,a3
    col_out.b = temp;
9d00a368:7ca27ac4 insv0,a1,0xb,0x5

9d00a36c <.LBE22>:
    return col_out.value;
}
9d00a36c:3042ffff andiv0,v0,0xffff

9d00a370 <.LVL126>:
9d00a370:03e00008 jrra
9d00a374:27bd0010 addiusp,sp,16

Disassembly of section .text._ZN11DisplayCore11stringWidthEPKc:

9d00a378 <_ZN11DisplayCore11stringWidthEPKc>:
 *
 *      int width = tft.stringWidth("The quick brown fox jumped over the lazy dog");
 */
int DisplayCore::stringWidth(const char *text) {
    int w = 0;
    if (font == NULL) {
9d00a378:8c8400bc lwa0,188(a0)

9d00a37c <.LVL1>:
9d00a37c:1080002b beqza0,9d00a42c <.LBE7>
9d00a380:00000000 nop
9d00a384:00001021 movev0,zero

9d00a388 <.LBB3>:
        return 1;
    }
    FontHeader *header = (FontHeader *)font;

    for (const char *t = text; *t; t++) {
9d00a388:80a30000 lbv1,0(a1)
9d00a38c:10600025 beqzv1,9d00a424 <.LBB7>
9d00a390:306300ff andiv1,v1,0xff

9d00a394 <.LBB4>:
        uint8_t c = *t;
        if (c < header->startGlyph) {
9d00a394:90860002 lbua2,2(a0)
9d00a398:0066382b sltua3,v1,a2
9d00a39c:50e00007 beqzla3,9d00a3bc <.LVL5>
9d00a3a0:90870003 lbua3,3(a0)
            if (c >= 'A' && c <= 'Z') {
9d00a3a4:2467ffbf addiua3,v1,-65
9d00a3a8:2ce7001a sltiua3,a3,26
9d00a3ac:10e00003 beqza3,9d00a3bc <.LVL5>
9d00a3b0:90870003 lbua3,3(a0)
                c += ('a' - 'A');
9d00a3b4:24630020 addiuv1,v1,32

9d00a3b8 <.LVL4>:
9d00a3b8:306300ff andiv1,v1,0xff

9d00a3bc <.LVL5>:
            }
        }
        if (c > header->endGlyph) {
9d00a3bc:00e3402b sltut0,a3,v1
9d00a3c0:5100000b beqzlt0,9d00a3f0 <.LVL8>
9d00a3c4:0066382b sltua3,v1,a2
            if (c >= 'a' && c <= 'z') {
9d00a3c8:2468ff9f addiut0,v1,-97
9d00a3cc:2d08001a sltiut0,t0,26
9d00a3d0:5100ffed beqzlt0,9d00a388 <.LBB3>
9d00a3d4:24a50001 addiua1,a1,1
                c -= ('a' - 'A');
9d00a3d8:2463ffe0 addiuv1,v1,-32

9d00a3dc <.LVL6>:
9d00a3dc:306300ff andiv1,v1,0xff

9d00a3e0 <.LVL7>:
            }
        }
        if (c >= header->startGlyph && c <= header->endGlyph) {
9d00a3e0:0066402b sltut0,v1,a2
9d00a3e4:5500ffe8 bnezlt0,9d00a388 <.LBB3>
9d00a3e8:24a50001 addiua1,a1,1
9d00a3ec:00e3382b sltua3,a3,v1

9d00a3f0 <.LVL8>:
9d00a3f0:14e0ffe5 bneza3,9d00a388 <.LBB3>
9d00a3f4:24a50001 addiua1,a1,1

9d00a3f8 <.LBB6>:
            uint8_t co = c - header->startGlyph;
9d00a3f8:00661823 subuv1,v1,a2

9d00a3fc <.LVL10>:
            uint32_t charstart = (co * ((header->linesPerCharacter * header->bytesPerLine) + 1)) + sizeof(FontHeader); // Start of character data
9d00a3fc:306300ff andiv1,v1,0xff
9d00a400:90870000 lbua3,0(a0)
9d00a404:90860001 lbua2,1(a0)
9d00a408:70e63802 mula3,a3,a2
9d00a40c:24e70001 addiua3,a3,1
            uint8_t charwidth = font[charstart++];
9d00a410:70673002 mula2,v1,a3
9d00a414:00c41821 adduv1,a2,a0
            w += charwidth;
9d00a418:90630005 lbuv1,5(v1)

9d00a41c <.LBE2>:
9d00a41c:0b4028e2 j9d00a388 <.LBB3>
9d00a420:00431021 adduv0,v0,v1

9d00a424 <.LBB7>:
9d00a424:03e00008 jrra
9d00a428:00000000 nop

9d00a42c <.LBE7>:
 *      int width = tft.stringWidth("The quick brown fox jumped over the lazy dog");
 */
int DisplayCore::stringWidth(const char *text) {
    int w = 0;
    if (font == NULL) {
        return 1;
9d00a42c:03e00008 jrra
9d00a430:24020001 liv0,1

Disassembly of section .text._sbrk:

9d00a434 <L0>:
9d00a434:27bdffe0 addiusp,sp,-32
9d00a438:afbf001c swra,28(sp)
9d00a43c:afb20018 sws2,24(sp)
9d00a440:afb10014 sws1,20(sp)
9d00a444:afb00010 sws0,16(sp)
9d00a448:00809021 moves2,a0
9d00a44c:3c108000 luis0,0x8000
9d00a450:8e0223ac lwv0,9132(s0)
9d00a454:14400006 bnezv0,9d00a470 <L0+0x3c>
9d00a458:02008821 moves1,s0
9d00a45c:0f4022d7 jal9d008b5c <.LFE6>
9d00a460:00000000 nop
9d00a464:8e0223ac lwv0,9132(s0)
9d00a468:1040000b beqzv0,9d00a498 <L0+0x64>
9d00a46c:00000000 nop
9d00a470:8e2223ac lwv0,9132(s1)
9d00a474:1a40000c blezs2,9d00a4a8 <L0+0x74>
9d00a478:00521821 adduv1,v0,s2
9d00a47c:0062202b sltua0,v1,v0
9d00a480:14800005 bneza0,9d00a498 <L0+0x64>
9d00a484:3c048000 luia0,0x8000
9d00a488:8c8423a8 lwa0,9128(a0)
9d00a48c:0083202b sltua0,a0,v1
9d00a490:50800011 beqzla0,9d00a4d8 <L0+0xa4>
9d00a494:ae2323ac swv1,9132(s1)
9d00a498:0f4030c8 jal9d00c320 <.LFE21>
9d00a49c:00000000 nop
9d00a4a0:0b402934 j9d00a4d0 <L0+0x9c>
9d00a4a4:2403000c liv1,12
9d00a4a8:0043202b sltua0,v0,v1
9d00a4ac:14800005 bneza0,9d00a4c4 <L0+0x90>
9d00a4b0:3c048000 luia0,0x8000
9d00a4b4:8c8423a4 lwa0,9124(a0)
9d00a4b8:0064202b sltua0,v1,a0
9d00a4bc:50800006 beqzla0,9d00a4d8 <L0+0xa4>
9d00a4c0:ae2323ac swv1,9132(s1)
9d00a4c4:0f4030c8 jal9d00c320 <.LFE21>
9d00a4c8:00000000 nop
9d00a4cc:24030016 liv1,22
9d00a4d0:ac430000 swv1,0(v0)
9d00a4d4:2402ffff liv0,-1
9d00a4d8:8fbf001c lwra,28(sp)
9d00a4dc:8fb20018 lws2,24(sp)
9d00a4e0:8fb10014 lws1,20(sp)
9d00a4e4:8fb00010 lws0,16(sp)
9d00a4e8:03e00008 jrra
9d00a4ec:27bd0020 addiusp,sp,32

Disassembly of section .text._GLOBAL__sub_I_tft:

9d00a4f0 <_GLOBAL__sub_I_tft>:
9d00a4f0:27bdffa0 addiusp,sp,-96
9d00a4f4:afbf005c swra,92(sp)

9d00a4f8 <.LBB23>:
#include <SSD1289.h>
#include <Sinclair.h>

SSD1289 tft(3, 4, 5, 6, 7,
            26, 27, 28, 29, 30, 31, 32, 33,
            34, 35, 36, 37, 38, 39, 40, 41 
9d00a4f8:24020006 liv0,6
9d00a4fc:afa20010 swv0,16(sp)
9d00a500:24020007 liv0,7
9d00a504:afa20014 swv0,20(sp)
9d00a508:2402001a liv0,26
9d00a50c:afa20018 swv0,24(sp)
9d00a510:2402001b liv0,27
9d00a514:afa2001c swv0,28(sp)
9d00a518:2402001c liv0,28
9d00a51c:afa20020 swv0,32(sp)
9d00a520:2402001d liv0,29
9d00a524:afa20024 swv0,36(sp)
9d00a528:2402001e liv0,30
9d00a52c:afa20028 swv0,40(sp)
9d00a530:2402001f liv0,31
9d00a534:afa2002c swv0,44(sp)
9d00a538:24020020 liv0,32
9d00a53c:afa20030 swv0,48(sp)
9d00a540:24020021 liv0,33
9d00a544:afa20034 swv0,52(sp)
9d00a548:24020022 liv0,34
9d00a54c:afa20038 swv0,56(sp)
9d00a550:24020023 liv0,35
9d00a554:afa2003c swv0,60(sp)
9d00a558:24020024 liv0,36
9d00a55c:afa20040 swv0,64(sp)
9d00a560:24020025 liv0,37
9d00a564:afa20044 swv0,68(sp)
9d00a568:24020026 liv0,38
9d00a56c:afa20048 swv0,72(sp)
9d00a570:24020027 liv0,39
9d00a574:afa2004c swv0,76(sp)
9d00a578:24020028 liv0,40
9d00a57c:afa20050 swv0,80(sp)
9d00a580:24020029 liv0,41
9d00a584:afa20054 swv0,84(sp)
9d00a588:27848338 addiua0,gp,-31944
9d00a58c:24050003 lia1,3
9d00a590:24060004 lia2,4
9d00a594:0f4020b7 jal9d0082dc <.LFE173>
9d00a598:24070005 lia3,5

9d00a59c <.LBE23>:
9d00a59c:8fbf005c lwra,92(sp)
9d00a5a0:03e00008 jrra
9d00a5a4:27bd0060 addiusp,sp,96

Disassembly of section .text._ZN7SSD128916drawVerticalLineEiiit:

9d00a5a8 <_ZN7SSD128916drawVerticalLineEiiit>:
    while (w--) {
        data(color);
    }
}

void SSD1289::drawVerticalLine(int x, int y, int h, color_t color) {
9d00a5a8:27bdffd0 addiusp,sp,-48
9d00a5ac:afbf002c swra,44(sp)
9d00a5b0:afb10028 sws1,40(sp)
9d00a5b4:afb00024 sws0,36(sp)
9d00a5b8:00808021 moves0,a0
9d00a5bc:afa50034 swa1,52(sp)
9d00a5c0:afa60038 swa2,56(sp)
9d00a5c4:afa7003c swa3,60(sp)
9d00a5c8:97b10040 lhus1,64(sp)

9d00a5cc <.LBB23>:
    int w = 1;
9d00a5cc:24020001 liv0,1
9d00a5d0:afa20018 swv0,24(sp)
    if (!clipToScreen(x, y, w, h)) {
9d00a5d4:27a2003c addiuv0,sp,60
9d00a5d8:afa20010 swv0,16(sp)
9d00a5dc:27a50034 addiua1,sp,52

9d00a5e0 <.LVL205>:
9d00a5e0:27a60038 addiua2,sp,56

9d00a5e4 <.LVL206>:
9d00a5e4:0f401f91 jal9d007e44 <.LBE47>
9d00a5e8:27a70018 addiua3,sp,24

9d00a5ec <.LVL207>:
9d00a5ec:10400016 beqzv0,9d00a648 <.LBE23+0xc>
9d00a5f0:8fbf002c lwra,44(sp)
        return;
    }

    setAddrWindow(x, y, x, y+h-1);
9d00a5f4:8fa60038 lwa2,56(sp)
9d00a5f8:8fa2003c lwv0,60(sp)
9d00a5fc:00c21021 adduv0,a2,v0
9d00a600:2442ffff addiuv0,v0,-1
9d00a604:afa20010 swv0,16(sp)
9d00a608:02002021 movea0,s0
9d00a60c:8fa50034 lwa1,52(sp)
9d00a610:0f4021ce jal9d008738 <.LFE192>
9d00a614:00a03821 movea3,a1

9d00a618 <.LVL208>:
    while (h--) {
9d00a618:8fa2003c lwv0,60(sp)
9d00a61c:2443ffff addiuv1,v0,-1
9d00a620:10400008 beqzv0,9d00a644 <.LBE23+0x8>
9d00a624:afa3003c swv1,60(sp)
        data(color);
9d00a628:8e020000 lwv0,0(s0)
9d00a62c:8c4200e4 lwv0,228(v0)
9d00a630:02002021 movea0,s0
9d00a634:0040f809 jalrv0
9d00a638:02202821 movea1,s1

9d00a63c <.LBE23>:
    if (!clipToScreen(x, y, w, h)) {
        return;
    }

    setAddrWindow(x, y, x, y+h-1);
    while (h--) {
9d00a63c:0b402987 j9d00a61c <.LVL208+0x4>
9d00a640:8fa2003c lwv0,60(sp)
        data(color);
    }
}
9d00a644:8fbf002c lwra,44(sp)
9d00a648:8fb10028 lws1,40(sp)
9d00a64c:8fb00024 lws0,36(sp)

9d00a650 <.LVL210>:
9d00a650:03e00008 jrra
9d00a654:27bd0030 addiusp,sp,48

Disassembly of section .text.init:

9d00a658 <init>:
}


//************************************************************************
void init()
{
9d00a658:27bdffe8 addiusp,sp,-24
9d00a65c:afbf0014 swra,20(sp)
__PIC32_pbClk=SYSTEMConfigPerformance(F_CPU);
#endif
#endif

// Configure the processor for the proper number of wait states and caching.
_configSystem(F_CPU);
9d00a660:3c040beb luia0,0xbeb
9d00a664:0f402f35 jal9d00bcd4 <.LFE171>
9d00a668:3484c200 oria0,a0,0xc200

9d00a66c <.LVL23>:

// Enable multi-vector interrupts
_enableMultiVectorInterrupts();
9d00a66c:0f402f43 jal9d00bd0c <.LFE23>
9d00a670:00000000 nop

9d00a674 <.LVL24>:

// Initialize the core timer for use to maintain the system timer tick.
        _initCoreTimer(CORE_TICK_RATE);
9d00a674:3c040001 luia0,0x1
9d00a678:0f4030a0 jal9d00c280 <.LFE173>
9d00a67c:348486a0 oria0,a0,0x86a0

9d00a680 <.LVL25>:

        initIntVector();

setIntPriority(_CORE_TIMER_VECTOR, _CT_IPL_IPC, _CT_SPL_IPC);
9d00a680:00002021 movea0,zero
9d00a684:24050007 lia1,7
9d00a688:0f402d8d jal9d00b634 <.LFE105>
9d00a68c:00003021 movea2,zero

9d00a690 <.LVL26>:
setIntVector(_CORE_TIMER_VECTOR, CoreTimerHandler);
9d00a690:00002021 movea0,zero
9d00a694:3c059d00 luia1,0x9d00
9d00a698:0f402f0a jal9d00bc28 <.LFE188>
9d00a69c:24a51018 addiua1,a1,4120

9d00a6a0 <.LVL27>:
setIntEnable(_CORE_TIMER_IRQ);
9d00a6a0:0f402e90 jal9d00ba40 <L0>
9d00a6a4:00002021 movea0,zero

9d00a6a8 <.LVL28>:

// Save the peripheral bus frequency for later use.
__PIC32_pbClk = getPeripheralClock();
9d00a6a8:0f402fbe jal9d00bef8 <getPeripheralClock>
9d00a6ac:00000000 nop

9d00a6b0 <.LVL29>:
9d00a6b0:af8285c4 swv0,-31292(gp)

   // allow for debugging, this will stop the core timer when the debugger takes control
    _CP0_BIC_DEBUG(_CP0_DEBUG_COUNTDM_MASK); 
9d00a6b4:3c020200 luiv0,0x200
9d00a6b8:4003b800 mfc0v1,c0_debug
9d00a6bc:00021027 norv0,zero,v0
9d00a6c0:00621024 andv0,v1,v0
9d00a6c4:4082b800 mtc0v0,c0_debug
9d00a6c8:000000c0 ehb
RtccSetTimeDate(0x10073000, 0x10101701);
// please note that the rsvd field has to be 0 in the time field!
#endif
#endif

delay(50);
9d00a6cc:0f402e47 jal9d00b91c <.LFE87>
9d00a6d0:24040032 lia0,50

9d00a6d4 <.LVL30>:

//*as per Al.Rodriguez@microchip.com, Jan 7, 2011
//*Disable the JTAG interface.
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__) || defined(__PIC32MZXX__)
    #if defined(_JTAG) && (_JTAG == 1)
    CFGCONbits.JTAGEN = 1;
9d00a6d4:3c02bf80 luiv0,0xbf80
9d00a6d8:8c430000 lwv1,0(v0)
9d00a6dc:24040001 lia0,1
9d00a6e0:7c8318c4 insv1,a0,0x3,0x1
9d00a6e4:ac430000 swv1,0(v0)
void_board_init(void);
_board_init();
#endif

//* Initialize the periodic task manager
_initTaskManager();
9d00a6e8:0f402fdc jal9d00bf70 <_initTaskManager>
9d00a6ec:00000000 nop

9d00a6f0 <.LVL31>:
//*Issue #84
//*disable the uart so that the pins can be used as general purpose I/O
#if defined(_SER0_BASE)
p32_uart *uart;
uart = (p32_uart *)_SER0_BASE;
uart->uxMode.clr = (1 << _UARTMODE_ON);
9d00a6f0:34038000 liv1,0x8000
9d00a6f4:3c02bf82 luiv0,0xbf82
9d00a6f8:ac432604 swv1,9732(v0)
#endif
}
9d00a6fc:8fbf0014 lwra,20(sp)
9d00a700:03e00008 jrra
9d00a704:27bd0018 addiusp,sp,24

Disassembly of section .text._raise_r:

9d00a708 <.text._raise_r>:
9d00a708:27bdffe0 addiusp,sp,-32
9d00a70c:afbf001c swra,28(sp)
9d00a710:afb10018 sws1,24(sp)
9d00a714:afb00014 sws0,20(sp)
9d00a718:00808021 moves0,a0
9d00a71c:2ca20020 sltiuv0,a1,32
9d00a720:14400005 bnezv0,9d00a738 <.LFE10+0x30>
9d00a724:00a08821 moves1,a1
9d00a728:24020016 liv0,22
9d00a72c:ac820000 swv0,0(a0)
9d00a730:0b4029e9 j9d00a7a4 <.LFE10+0x9c>
9d00a734:2402ffff liv0,-1
9d00a738:8c8202dc lwv0,732(a0)
9d00a73c:10400005 beqzv0,9d00a754 <.LFE10+0x4c>
9d00a740:00051880 sllv1,a1,0x2
9d00a744:00431821 adduv1,v0,v1
9d00a748:8c620000 lwv0,0(v1)
9d00a74c:54400009 bnezlv0,9d00a774 <.LFE10+0x6c>
9d00a750:24040001 lia0,1
9d00a754:0f403050 jal9d00c140 <.LFE103>
9d00a758:02002021 movea0,s0
9d00a75c:02002021 movea0,s0
9d00a760:00402821 movea1,v0
9d00a764:0f402de3 jal9d00b78c <.LFE10>
9d00a768:02203021 movea2,s1
9d00a76c:0b4029ea j9d00a7a8 <.LFE10+0xa0>
9d00a770:8fbf001c lwra,28(sp)
9d00a774:5044000b beqlv0,a0,9d00a7a4 <.LFE10+0x9c>
9d00a778:00001021 movev0,zero
9d00a77c:2404ffff lia0,-1
9d00a780:54440005 bnelv0,a0,9d00a798 <.LFE10+0x90>
9d00a784:ac600000 swzero,0(v1)
9d00a788:24020016 liv0,22
9d00a78c:ae020000 swv0,0(s0)
9d00a790:0b4029e9 j9d00a7a4 <.LFE10+0x9c>
9d00a794:24020001 liv0,1
9d00a798:0040f809 jalrv0
9d00a79c:00a02021 movea0,a1
9d00a7a0:00001021 movev0,zero
9d00a7a4:8fbf001c lwra,28(sp)
9d00a7a8:8fb10018 lws1,24(sp)
9d00a7ac:8fb00014 lws0,20(sp)
9d00a7b0:03e00008 jrra
9d00a7b4:27bd0020 addiusp,sp,32

Disassembly of section .text._ZN7SSD128918drawHorizontalLineEiiit:

9d00a7b8 <L0>:
            data(color);
}
}
}

void SSD1289::drawHorizontalLine(int x, int y, int w, color_t color) {
9d00a7b8:27bdffd0 addiusp,sp,-48
9d00a7bc:afbf002c swra,44(sp)
9d00a7c0:afb10028 sws1,40(sp)
9d00a7c4:afb00024 sws0,36(sp)
9d00a7c8:00808021 moves0,a0
9d00a7cc:afa50034 swa1,52(sp)
9d00a7d0:afa60038 swa2,56(sp)
9d00a7d4:afa7003c swa3,60(sp)
9d00a7d8:97b10040 lhus1,64(sp)

9d00a7dc <.LBB22>:
    int h = 1;
9d00a7dc:24020001 liv0,1
9d00a7e0:afa20018 swv0,24(sp)
    if (!clipToScreen(x, y, w, h)) {
9d00a7e4:27a20018 addiuv0,sp,24
9d00a7e8:afa20010 swv0,16(sp)
9d00a7ec:27a50034 addiua1,sp,52

9d00a7f0 <.LVL198>:
9d00a7f0:27a60038 addiua2,sp,56

9d00a7f4 <.LVL199>:
9d00a7f4:0f401f91 jal9d007e44 <.LBE47>
9d00a7f8:27a7003c addiua3,sp,60

9d00a7fc <.LVL200>:
9d00a7fc:10400015 beqzv0,9d00a854 <.LBE22+0xc>
9d00a800:8fbf002c lwra,44(sp)
        return;
    }

    setAddrWindow(x, y, x+w-1, y);
9d00a804:8fa50034 lwa1,52(sp)
9d00a808:8fa60038 lwa2,56(sp)
9d00a80c:8fa7003c lwa3,60(sp)
9d00a810:00a73821 addua3,a1,a3
9d00a814:afa60010 swa2,16(sp)
9d00a818:02002021 movea0,s0
9d00a81c:0f4021ce jal9d008738 <.LFE192>
9d00a820:24e7ffff addiua3,a3,-1

9d00a824 <.LVL201>:
    while (w--) {
9d00a824:8fa2003c lwv0,60(sp)
9d00a828:2443ffff addiuv1,v0,-1
9d00a82c:10400008 beqzv0,9d00a850 <.LBE22+0x8>
9d00a830:afa3003c swv1,60(sp)
        data(color);
9d00a834:8e020000 lwv0,0(s0)
9d00a838:8c4200e4 lwv0,228(v0)
9d00a83c:02002021 movea0,s0
9d00a840:0040f809 jalrv0
9d00a844:02202821 movea1,s1

9d00a848 <.LBE22>:
    if (!clipToScreen(x, y, w, h)) {
        return;
    }

    setAddrWindow(x, y, x+w-1, y);
    while (w--) {
9d00a848:0b402a0a j9d00a828 <.LVL201+0x4>
9d00a84c:8fa2003c lwv0,60(sp)
        data(color);
    }
}
9d00a850:8fbf002c lwra,44(sp)
9d00a854:8fb10028 lws1,40(sp)
9d00a858:8fb00024 lws0,36(sp)

9d00a85c <.LVL203>:
9d00a85c:03e00008 jrra
9d00a860:27bd0030 addiusp,sp,48

Disassembly of section .text._Z15setBorderSinglet:

9d00a864 <_Z15setBorderSinglet>:
tft.fillRectangle(0, 0, 320, 24, c);
tft.fillRectangle(0, 24, 32, 192, c);
tft.fillRectangle(288, 24, 32, 192, c);
tft.fillRectangle(0, 216, 320, 24, c);
}

9d00a864:27bdffd8 addiusp,sp,-40
9d00a868:afbf0024 swra,36(sp)
9d00a86c:afb20020 sws2,32(sp)
9d00a870:afb1001c sws1,28(sp)
9d00a874:afb00018 sws0,24(sp)
9d00a878:3090ffff andis0,a0,0xffff
void randomStripes(uint16_t ca, uint16_t cb) {
9d00a87c:24110018 lis1,24
9d00a880:afb10010 sws1,16(sp)
9d00a884:afb00014 sws0,20(sp)
9d00a888:27848338 addiua0,gp,-31944

9d00a88c <.LVL8>:
9d00a88c:00002821 movea1,zero
9d00a890:00003021 movea2,zero
9d00a894:0f4027e4 jal9d009f90 <.LFE171>
9d00a898:24070140 lia3,320

9d00a89c <.LVL9>:
for (int i = 0; i < 24; i++) {
9d00a89c:241200c0 lis2,192
9d00a8a0:afb20010 sws2,16(sp)
9d00a8a4:afb00014 sws0,20(sp)
9d00a8a8:27848338 addiua0,gp,-31944
9d00a8ac:00002821 movea1,zero
9d00a8b0:24060018 lia2,24
9d00a8b4:0f4027e4 jal9d009f90 <.LFE171>
9d00a8b8:24070020 lia3,32

9d00a8bc <.LVL10>:
tft.drawHorizontalLine(0, i, tft.getWidth(), rand() & 1 ? ca : cb);
9d00a8bc:afb20010 sws2,16(sp)
9d00a8c0:afb00014 sws0,20(sp)
9d00a8c4:27848338 addiua0,gp,-31944
9d00a8c8:24050120 lia1,288
9d00a8cc:24060018 lia2,24
9d00a8d0:0f4027e4 jal9d009f90 <.LFE171>
9d00a8d4:24070020 lia3,32

9d00a8d8 <.LVL11>:
}
9d00a8d8:afb10010 sws1,16(sp)
9d00a8dc:afb00014 sws0,20(sp)
9d00a8e0:27848338 addiua0,gp,-31944
9d00a8e4:00002821 movea1,zero
9d00a8e8:240600d8 lia2,216
9d00a8ec:0f4027e4 jal9d009f90 <.LFE171>
9d00a8f0:24070140 lia3,320

9d00a8f4 <.LVL12>:
for (int i = 24; i < 216; i++) {
9d00a8f4:8fbf0024 lwra,36(sp)
9d00a8f8:8fb20020 lws2,32(sp)
9d00a8fc:8fb1001c lws1,28(sp)
9d00a900:8fb00018 lws0,24(sp)

9d00a904 <.LVL13>:
9d00a904:03e00008 jrra
9d00a908:27bd0028 addiusp,sp,40

Disassembly of section .text._Z7silencem:

9d00a90c <_Z7silencem>:
uint32_t ts = millis();
bool color = false;

setBorderSingle(Color::Cyan);
uint32_t delLeft = del;

9d00a90c:27bdffd8 addiusp,sp,-40
9d00a910:afbf0024 swra,36(sp)
9d00a914:afb30020 sws3,32(sp)
9d00a918:afb2001c sws2,28(sp)
9d00a91c:afb10018 sws1,24(sp)
9d00a920:afb00014 sws0,20(sp)

9d00a924 <.LBB11>:
while (millis() - ts < del) {
9d00a924:0f4030bf jal9d00c2fc <.LFE175>
9d00a928:00809021 moves2,a0

9d00a92c <.LVL66>:
9d00a92c:00409821 moves3,v0

9d00a930 <.LVL67>:
uint32_t nextDel = rand() % delLeft;
delLeft -= nextDel;
delay(nextDel);
9d00a930:0f402a19 jal9d00a864 <.LFE190>
9d00a934:240407ff lia0,2047

9d00a938 <.LVL68>:
if (color) {
9d00a938:02408021 moves0,s2

setBorderSingle(Color::Cyan);
uint32_t delLeft = del;

while (millis() - ts < del) {
uint32_t nextDel = rand() % delLeft;
9d00a93c:00008821 moves1,zero

9d00a940 <.LVL69>:
delLeft -= nextDel;
delay(nextDel);
if (color) {
setBorderSingle(Color::Cyan);
} else {
9d00a940:0f4030bf jal9d00c2fc <.LFE175>
9d00a944:00000000 nop

9d00a948 <.LVL70>:
9d00a948:00531023 subuv0,v0,s3
9d00a94c:0052102b sltuv0,v0,s2
9d00a950:1040000f beqzv0,9d00a990 <.LBE11>
9d00a954:8fbf0024 lwra,36(sp)

9d00a958 <.LBB12>:
setBorderSingle(Color::Red);
9d00a958:0f402da3 jal9d00b68c <.LFE18>
9d00a95c:00000000 nop

9d00a960 <.LVL71>:
9d00a960:0050001b divuzero,v0,s0
9d00a964:020001f4 teqs0,zero,0x7
9d00a968:00002010 mfhia0

9d00a96c <.LVL72>:
}
color = !color;
9d00a96c:0f402e47 jal9d00b91c <.LFE87>
9d00a970:02048023 subus0,s0,a0

9d00a974 <.LVL73>:
}
9d00a974:16200002 bnezs1,9d00a980 <.LVL73+0xc>
9d00a978:240407ff lia0,2047
}

void loadHeader(uint32_t del) {
9d00a97c:3404f800 lia0,0xf800
9d00a980:0f402a19 jal9d00a864 <.LFE190>
9d00a984:3a310001 xoris1,s1,0x1

9d00a988 <.LVL74>:
9d00a988:0b402a50 j9d00a940 <.LVL69>
9d00a98c:00000000 nop

9d00a990 <.LBE11>:
uint32_t ts = millis();
uint32_t o = 0;
while (millis() - ts < del) {
regularStripes(Color::Red, Color::Cyan, 12, o++);
9d00a990:8fb30020 lws3,32(sp)

9d00a994 <.LVL75>:
9d00a994:8fb2001c lws2,28(sp)

9d00a998 <.LVL76>:
9d00a998:8fb10018 lws1,24(sp)

9d00a99c <.LVL77>:
9d00a99c:8fb00014 lws0,20(sp)

9d00a9a0 <.LVL78>:
9d00a9a0:03e00008 jrra
9d00a9a4:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCoreC2Ev:

9d00a9a8 <_ZN11DisplayCoreC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
9d00a9a8:ac800004 swzero,4(a0)

9d00a9ac <.LBE16>:
#include <DisplayCore.h>
#include <stdarg.h>

DisplayCore::DisplayCore() {
9d00a9ac:3c029d00 luiv0,0x9d00
9d00a9b0:24421780 addiuv0,v0,6016
9d00a9b4:ac820000 swv0,0(a0)

9d00a9b8 <.LBB18>:
        double sx;
        double sy;
        double sz;
        color_t color;
        double illumination;
        point3d() : x(0), y(0), z(0), sx(0), sy(0), sz(0) {}
9d00a9b8:ac800038 swzero,56(a0)
9d00a9bc:ac80003c swzero,60(a0)
9d00a9c0:ac800040 swzero,64(a0)
9d00a9c4:ac800044 swzero,68(a0)
9d00a9c8:ac800048 swzero,72(a0)
9d00a9cc:ac80004c swzero,76(a0)
9d00a9d0:ac800050 swzero,80(a0)
9d00a9d4:ac800054 swzero,84(a0)
9d00a9d8:ac800058 swzero,88(a0)
9d00a9dc:ac80005c swzero,92(a0)
9d00a9e0:ac800060 swzero,96(a0)
9d00a9e4:ac800064 swzero,100(a0)

9d00a9e8 <.LBB20>:
9d00a9e8:ac800078 swzero,120(a0)
9d00a9ec:ac80007c swzero,124(a0)
9d00a9f0:ac800080 swzero,128(a0)
9d00a9f4:ac800084 swzero,132(a0)
9d00a9f8:ac800088 swzero,136(a0)
9d00a9fc:ac80008c swzero,140(a0)
9d00aa00:ac800090 swzero,144(a0)
9d00aa04:ac800094 swzero,148(a0)
9d00aa08:ac800098 swzero,152(a0)
9d00aa0c:ac80009c swzero,156(a0)
9d00aa10:ac8000a0 swzero,160(a0)
9d00aa14:ac8000a4 swzero,164(a0)

9d00aa18 <.LBE20>:
    cursor_y = cursor_x = 0;
9d00aa18:ac800008 swzero,8(a0)
9d00aa1c:ac80000c swzero,12(a0)
    textcolor = 0xFFFF;
9d00aa20:2402ffff liv0,-1
9d00aa24:a4820012 shv0,18(a0)
    textbgcolor = 0;
9d00aa28:a4800014 shzero,20(a0)
    wrap = true;
9d00aa2c:24020001 liv0,1
9d00aa30:a0820010 sbv0,16(a0)
    font = Fonts::Default;
9d00aa34:3c029d00 luiv0,0x9d00
9d00aa38:24423358 addiuv0,v0,13144
9d00aa3c:03e00008 jrra
9d00aa40:ac8200bc swv0,188(a0)

Disassembly of section .text._ZN11DisplayCore18drawHorizontalLineEiiit:

9d00aa44 <_ZN11DisplayCore18drawHorizontalLineEiiit>:
        }
    }
    endBuffer();
}

void DisplayCore::drawHorizontalLine(int x, int y, int w, color_t c) {
9d00aa44:27bdffd0 addiusp,sp,-48
9d00aa48:afbf002c swra,44(sp)
9d00aa4c:afb50028 sws5,40(sp)
9d00aa50:afb40024 sws4,36(sp)
9d00aa54:afb30020 sws3,32(sp)
9d00aa58:afb2001c sws2,28(sp)
9d00aa5c:afb10018 sws1,24(sp)
9d00aa60:afb00014 sws0,20(sp)
9d00aa64:00808021 moves0,a0
9d00aa68:00a09821 moves3,a1
9d00aa6c:00c0a021 moves4,a2
9d00aa70:00e09021 moves2,a3
    startBuffer();
9d00aa74:8c820000 lwv0,0(a0)
9d00aa78:8c4200c4 lwv0,196(v0)
9d00aa7c:0040f809 jalrv0
9d00aa80:97b50040 lhus5,64(sp)

9d00aa84 <.LBB49>:
    for(int z = 0; z < w; z++) {
9d00aa84:00008821 moves1,zero

9d00aa88 <.LVL65>:
9d00aa88:0232182a sltv1,s1,s2
9d00aa8c:10600009 beqzv1,9d00aab4 <.LBE49+0x8>
9d00aa90:8e020000 lwv0,0(s0)
        setPixel(x + z, y, c);
9d00aa94:8c420084 lwv0,132(v0)
9d00aa98:02002021 movea0,s0
9d00aa9c:02332821 addua1,s1,s3
9d00aaa0:02803021 movea2,s4
9d00aaa4:0040f809 jalrv0
9d00aaa8:02a03821 movea3,s5

9d00aaac <.LBE49>:
    endBuffer();
}

void DisplayCore::drawHorizontalLine(int x, int y, int w, color_t c) {
    startBuffer();
    for(int z = 0; z < w; z++) {
9d00aaac:0b402aa2 j9d00aa88 <.LVL65>
9d00aab0:26310001 addius1,s1,1
        setPixel(x + z, y, c);
    }
    endBuffer();
9d00aab4:8c5900c8 lwt9,200(v0)
9d00aab8:02002021 movea0,s0
}
9d00aabc:8fbf002c lwra,44(sp)
9d00aac0:8fb50028 lws5,40(sp)
9d00aac4:8fb40024 lws4,36(sp)

9d00aac8 <.LVL67>:
9d00aac8:8fb30020 lws3,32(sp)

9d00aacc <.LVL68>:
9d00aacc:8fb2001c lws2,28(sp)

9d00aad0 <.LVL69>:
9d00aad0:8fb10018 lws1,24(sp)

9d00aad4 <.LVL70>:
9d00aad4:8fb00014 lws0,20(sp)

9d00aad8 <.LVL71>:
void DisplayCore::drawHorizontalLine(int x, int y, int w, color_t c) {
    startBuffer();
    for(int z = 0; z < w; z++) {
        setPixel(x + z, y, c);
    }
    endBuffer();
9d00aad8:03200008 jrt9
9d00aadc:27bd0030 addiusp,sp,48

Disassembly of section .text._ZN11DisplayCore16drawVerticalLineEiiit:

9d00aae0 <_ZN11DisplayCore16drawVerticalLineEiiit>:
}

void DisplayCore::drawVerticalLine(int x, int y, int h, color_t c) {
9d00aae0:27bdffd0 addiusp,sp,-48
9d00aae4:afbf002c swra,44(sp)
9d00aae8:afb50028 sws5,40(sp)
9d00aaec:afb40024 sws4,36(sp)
9d00aaf0:afb30020 sws3,32(sp)
9d00aaf4:afb2001c sws2,28(sp)
9d00aaf8:afb10018 sws1,24(sp)
9d00aafc:afb00014 sws0,20(sp)
9d00ab00:00808021 moves0,a0
9d00ab04:00a09821 moves3,a1
9d00ab08:00c0a021 moves4,a2
9d00ab0c:00e09021 moves2,a3
    startBuffer();
9d00ab10:8c820000 lwv0,0(a0)
9d00ab14:8c4200c4 lwv0,196(v0)
9d00ab18:0040f809 jalrv0
9d00ab1c:97b50040 lhus5,64(sp)

9d00ab20 <.LBB53>:
    for(int z = 0; z < h; z++) {
9d00ab20:00008821 moves1,zero

9d00ab24 <.LVL75>:
9d00ab24:0232182a sltv1,s1,s2
9d00ab28:10600009 beqzv1,9d00ab50 <.LBE53+0x8>
9d00ab2c:8e020000 lwv0,0(s0)
        setPixel(x, y + z, c);
9d00ab30:8c420084 lwv0,132(v0)
9d00ab34:02002021 movea0,s0
9d00ab38:02602821 movea1,s3
9d00ab3c:02343021 addua2,s1,s4
9d00ab40:0040f809 jalrv0
9d00ab44:02a03821 movea3,s5

9d00ab48 <.LBE53>:
    endBuffer();
}

void DisplayCore::drawVerticalLine(int x, int y, int h, color_t c) {
    startBuffer();
    for(int z = 0; z < h; z++) {
9d00ab48:0b402ac9 j9d00ab24 <.LVL75>
9d00ab4c:26310001 addius1,s1,1
        setPixel(x, y + z, c);
    }
    endBuffer();
9d00ab50:8c5900c8 lwt9,200(v0)
9d00ab54:02002021 movea0,s0
}
9d00ab58:8fbf002c lwra,44(sp)
9d00ab5c:8fb50028 lws5,40(sp)
9d00ab60:8fb40024 lws4,36(sp)

9d00ab64 <.LVL77>:
9d00ab64:8fb30020 lws3,32(sp)

9d00ab68 <.LVL78>:
9d00ab68:8fb2001c lws2,28(sp)

9d00ab6c <.LVL79>:
9d00ab6c:8fb10018 lws1,24(sp)

9d00ab70 <.LVL80>:
9d00ab70:8fb00014 lws0,20(sp)

9d00ab74 <.LVL81>:
void DisplayCore::drawVerticalLine(int x, int y, int h, color_t c) {
    startBuffer();
    for(int z = 0; z < h; z++) {
        setPixel(x, y + z, c);
    }
    endBuffer();
9d00ab74:03200008 jrt9
9d00ab78:27bd0030 addiusp,sp,48

Disassembly of section .text._ZN11DisplayCore10fillScreenEt:

9d00ab7c <_ZN11DisplayCore10fillScreenEt>:
 * 
 *  Example: 
 *
 *      tft.fillScreen(Color::Black);
 */
void DisplayCore::fillScreen(color_t color) {
9d00ab7c:27bdffd0 addiusp,sp,-48
9d00ab80:afbf002c swra,44(sp)
9d00ab84:afb30028 sws3,40(sp)
9d00ab88:afb20024 sws2,36(sp)
9d00ab8c:afb10020 sws1,32(sp)
9d00ab90:afb0001c sws0,28(sp)
9d00ab94:00808021 moves0,a0
    startBuffer();
9d00ab98:8c820000 lwv0,0(a0)
9d00ab9c:8c4200c4 lwv0,196(v0)
9d00aba0:0040f809 jalrv0
9d00aba4:30b1ffff andis1,a1,0xffff

9d00aba8 <.LVL25>:
    bgColor = color;
9d00aba8:a61100d8 shs1,216(s0)
    fillRectangle(0, 0, getWidth(), getHeight(), color);
9d00abac:8e020000 lwv0,0(s0)
9d00abb0:8c52007c lws2,124(v0)
9d00abb4:8c4200d8 lwv0,216(v0)
9d00abb8:0040f809 jalrv0
9d00abbc:02002021 movea0,s0

9d00abc0 <.LVL26>:
9d00abc0:00409821 moves3,v0
9d00abc4:8e020000 lwv0,0(s0)
9d00abc8:8c4200dc lwv0,220(v0)
9d00abcc:0040f809 jalrv0
9d00abd0:02002021 movea0,s0

9d00abd4 <.LVL27>:
9d00abd4:afa20010 swv0,16(sp)
9d00abd8:afb10014 sws1,20(sp)
9d00abdc:02002021 movea0,s0
9d00abe0:00002821 movea1,zero
9d00abe4:00003021 movea2,zero
9d00abe8:0240f809 jalrs2
9d00abec:02603821 movea3,s3

9d00abf0 <.LVL28>:
    endBuffer();
9d00abf0:8e020000 lwv0,0(s0)
9d00abf4:8c5900c8 lwt9,200(v0)
9d00abf8:02002021 movea0,s0
}
9d00abfc:8fbf002c lwra,44(sp)
9d00ac00:8fb30028 lws3,40(sp)
9d00ac04:8fb20024 lws2,36(sp)
9d00ac08:8fb10020 lws1,32(sp)

9d00ac0c <.LVL29>:
9d00ac0c:8fb0001c lws0,28(sp)

9d00ac10 <.LVL30>:
 */
void DisplayCore::fillScreen(color_t color) {
    startBuffer();
    bgColor = color;
    fillRectangle(0, 0, getWidth(), getHeight(), color);
    endBuffer();
9d00ac10:03200008 jrt9
9d00ac14:27bd0030 addiusp,sp,48

Disassembly of section .text._ZN11DisplayCore8setPixelEiiit:

9d00ac18 <_ZN11DisplayCore8setPixelEiiit>:

int DisplayCore::getHeight() {
    return _height;
}

void DisplayCore::setPixel(int x, int y, int z, color_t c) {
9d00ac18:27bdff90 addiusp,sp,-112
9d00ac1c:afbf006c swra,108(sp)
9d00ac20:afb10068 sws1,104(sp)
9d00ac24:afb00064 sws0,100(sp)
9d00ac28:00808021 moves0,a0
9d00ac2c:97b10080 lhus1,128(sp)

9d00ac30 <.LBB9>:
    point3d p3d = {x, y, z};
9d00ac30:44850000 mtc1a1,$f0
9d00ac34:468000a1 cvt.d.w$f2,$f0
9d00ac38:44860800 mtc1a2,$f1
9d00ac3c:46800821 cvt.d.w$f0,$f1
9d00ac40:44870800 mtc1a3,$f1
9d00ac44:46800921 cvt.d.w$f4,$f1

9d00ac48 <.LBB10>:
        point3d(double _x,double _y, double _z) : x(_x), y(_y), z(_z), sx(_x), sy(_y), sz(_z) {}
9d00ac48:f7a20010 sdc1$f2,16(sp)
9d00ac4c:f7a00018 sdc1$f0,24(sp)
9d00ac50:f7a40020 sdc1$f4,32(sp)
9d00ac54:f7a20028 sdc1$f2,40(sp)
9d00ac58:f7a00030 sdc1$f0,48(sp)
9d00ac5c:f7a40038 sdc1$f4,56(sp)

9d00ac60 <.LBE10>:
    point2d p2d = map3Dto2D(p3d);
9d00ac60:27a40050 addiua0,sp,80

9d00ac64 <.LVL22>:
9d00ac64:02002821 movea1,s0

9d00ac68 <.LVL23>:
9d00ac68:0f402818 jal9d00a060 <.LFE189>
9d00ac6c:27a60010 addiua2,sp,16

9d00ac70 <.LVL24>:
    setPixel(p2d.x, p2d.y, c);
9d00ac70:8e020000 lwv0,0(s0)
9d00ac74:8c420084 lwv0,132(v0)
9d00ac78:02002021 movea0,s0
9d00ac7c:d7a00050 ldc1$f0,80(sp)
9d00ac80:4620000d trunc.w.d$f0,$f0
9d00ac84:44050000 mfc1a1,$f0
9d00ac88:d7a00058 ldc1$f0,88(sp)
9d00ac8c:4620000d trunc.w.d$f0,$f0
9d00ac90:44060000 mfc1a2,$f0
9d00ac94:0040f809 jalrv0
9d00ac98:02203821 movea3,s1

9d00ac9c <.LBE9>:
}
9d00ac9c:8fbf006c lwra,108(sp)
9d00aca0:8fb10068 lws1,104(sp)
9d00aca4:8fb00064 lws0,100(sp)

9d00aca8 <.LVL26>:
9d00aca8:03e00008 jrra
9d00acac:27bd0070 addiusp,sp,112

Disassembly of section .text._ZN11DisplayCore10windowDataEt:

9d00acb0 <_ZN11DisplayCore10windowDataEt>:
 *
 *  Example:
 *
 *      tft.windowData(Color::Red);
 */
void DisplayCore::windowData(color_t d) {
9d00acb0:27bdffe8 addiusp,sp,-24
9d00acb4:afbf0014 swra,20(sp)
9d00acb8:afb00010 sws0,16(sp)
9d00acbc:00808021 moves0,a0
9d00acc0:30a7ffff andia3,a1,0xffff
    setPixel(winx0 + winpx, winy0 + winpy, d);
9d00acc4:8c820000 lwv0,0(a0)
9d00acc8:8c8800c0 lwt0,192(a0)
9d00accc:8c8500d0 lwa1,208(a0)

9d00acd0 <.LVL5>:
9d00acd0:8c8600c4 lwa2,196(a0)
9d00acd4:8c8300d4 lwv1,212(a0)
9d00acd8:8c420084 lwv0,132(v0)
9d00acdc:01052821 addua1,t0,a1
9d00ace0:0040f809 jalrv0
9d00ace4:00c33021 addua2,a2,v1

9d00ace8 <.LVL6>:
    winpx++;
9d00ace8:8e0200d0 lwv0,208(s0)
9d00acec:24420001 addiuv0,v0,1
9d00acf0:ae0200d0 swv0,208(s0)
    if ((winx0 + winpx) >= winx1) {
9d00acf4:8e0300c0 lwv1,192(s0)
9d00acf8:00431021 adduv0,v0,v1
9d00acfc:8e0300c8 lwv1,200(s0)
9d00ad00:0043102a sltv0,v0,v1
9d00ad04:54400006 bnezlv0,9d00ad20 <.LVL6+0x38>
9d00ad08:8e0300c4 lwv1,196(s0)
        winpx = 0;
9d00ad0c:ae0000d0 swzero,208(s0)
        winpy++;
9d00ad10:8e0200d4 lwv0,212(s0)
9d00ad14:24420001 addiuv0,v0,1
9d00ad18:ae0200d4 swv0,212(s0)
    }
    if ((winy0 + winpy) >= winy1) {
9d00ad1c:8e0300c4 lwv1,196(s0)
9d00ad20:8e0200d4 lwv0,212(s0)
9d00ad24:00621021 adduv0,v1,v0
9d00ad28:8e0300cc lwv1,204(s0)
9d00ad2c:0043102a sltv0,v0,v1
9d00ad30:50400001 beqzlv0,9d00ad38 <.LVL6+0x50>
9d00ad34:ae0000d4 swzero,212(s0)
        winpy = 0;
    }
}
9d00ad38:8fbf0014 lwra,20(sp)
9d00ad3c:8fb00010 lws0,16(sp)

9d00ad40 <.LVL7>:
9d00ad40:03e00008 jrra
9d00ad44:27bd0018 addiusp,sp,24

Disassembly of section .text.attachCoreTimerService:

9d00ad48 <attachCoreTimerService>:

    // make sure we are not already registered
    for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
    {
        // found it, do nothing
        if(gCoreTimerInfo[i].serivce == service)
9d00ad48:8f858020 lwa1,-32736(gp)
9d00ad4c:10a40022 beqa1,a0,9d00add8 <.LBE2+0x4>
9d00ad50:24020001 liv0,1

9d00ad54 <.LVL52>:
9d00ad54:8f828028 lwv0,-32728(gp)
9d00ad58:1044001e beqv0,a0,9d00add4 <.LBE2>
9d00ad5c:8f838030 lwv1,-32720(gp)

9d00ad60 <.LVL53>:
9d00ad60:5064001d beqlv1,a0,9d00add8 <.LBE2+0x4>
9d00ad64:24020001 liv0,1

9d00ad68 <.LVL54>:
    // we are not register, find an open slot
    // look for a open slot
    for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
    {
        // found one, add the service
        if(gCoreTimerInfo[i].serivce == NULL)
9d00ad68:50a00006 beqzla1,9d00ad84 <.LBB2>
9d00ad6c:00001821 movev1,zero

9d00ad70 <.LVL55>:
9d00ad70:50400004 beqzlv0,9d00ad84 <.LBB2>
9d00ad74:24030001 liv1,1

9d00ad78 <.LVL56>:
9d00ad78:14600017 bnezv1,9d00add8 <.LBE2+0x4>
9d00ad7c:00001021 movev0,zero
9d00ad80:24030002 liv1,2

9d00ad84 <.LBB2>:
 uint32_t lastBaseCount;

// this has a very specific order...
// first we initialize the nextInt time to something
// that is in the begining part or our linear time range
lastBaseCount = gLastBaseCount;
9d00ad84:8f828510 lwv0,-31472(gp)

9d00ad88 <.LVL58>:
gCoreTimerInfo[i].nextInt = lastBaseCount;
9d00ad88:000328c0 slla1,v1,0x3
9d00ad8c:2783801c addiuv1,gp,-32740
9d00ad90:00651821 adduv1,v1,a1
9d00ad94:ac620000 swv0,0(v1)
// it is possible that the core timer handler was called here, and that
// would put gLastBaseCount more like 100+ sec in the future, rather than than
// at the bottom or our linear time. But since the serice is still NULL, our serivce was
// not called and we missed it. But assign the service pointer and we will have to check to see
// if we missed it.
gCoreTimerInfo[i].serivce = service;
9d00ad98:27868020 addiua2,gp,-32736
9d00ad9c:00c52821 addua1,a2,a1
9d00ada0:aca40000 swa0,0(a1)

9d00ada4 <.LVL59>:
//  1. lastBaseCount != gLastBaseCount, as gLastBaseCount was just updated by the isr
//2. lastBaseCount == gCoreTimerInfo[i].nextInt, as the serivce was not run (missed) and nothing changed nextInt

// we also know that the isr can be run at any time and we can keep missing it even while we are trying to fix it.
// so go into a loop checking for the "we missed it" case until we don't miss it.
while(lastBaseCount != gLastBaseCount  &&  lastBaseCount == gCoreTimerInfo[i].nextInt)
9d00ada4:8f848510 lwa0,-31472(gp)
9d00ada8:50440008 beqlv0,a0,9d00adcc <.LVL59+0x28>
9d00adac:24030001 liv1,1
9d00adb0:8c640000 lwa0,0(v1)
9d00adb4:54440005 bnelv0,a0,9d00adcc <.LVL59+0x28>
9d00adb8:24030001 liv1,1
{
lastBaseCount = gLastBaseCount;
9d00adbc:8f828510 lwv0,-31472(gp)
gCoreTimerInfo[i].nextInt = lastBaseCount;
9d00adc0:ac620000 swv0,0(v1)
9d00adc4:0b402b69 j9d00ada4 <.LVL59>
9d00adc8:00000000 nop
// at this point we know either the serice has been run, or nothing has happened at all
// we know we didn't miss it because of the while loop.
// now just trigger the isr for good measure. If we have run it already, nothing bad will
// happen except the isr will run with nothing to do
// otherwise it will trigger the serice immediately.
mCTSetIntFlag();
9d00adcc:3c02bf81 luiv0,0xbf81

9d00add0 <.LVL61>:
9d00add0:ac430048 swv1,72(v0)

9d00add4 <.LBE2>:
    for(i = 0; i < MaxNbrOfCoreTimerServices; i++)
    {
        // found it, do nothing
        if(gCoreTimerInfo[i].serivce == service)
        {
            return(true);
9d00add4:24020001 liv0,1
mCTSetIntFlag();
            return(true);
        }
    }
    return(false);
}
9d00add8:03e00008 jrra
9d00addc:00000000 nop

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:

9d00ade0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
9d00ade0:27bdffd8 addiusp,sp,-40
9d00ade4:afbf0024 swra,36(sp)
9d00ade8:afb40020 sws4,32(sp)
9d00adec:afb3001c sws3,28(sp)
9d00adf0:afb20018 sws2,24(sp)
9d00adf4:afb10014 sws1,20(sp)
9d00adf8:afb00010 sws0,16(sp)
9d00adfc:00c09021 moves2,a2
9d00ae00:00e0a021 moves4,a3
9d00ae04:8fb10038 lws1,56(sp)
9d00ae08:8fb00044 lws0,68(sp)
9d00ae0c:8fa20040 lwv0,64(sp)
9d00ae10:16220007 bnes1,v0,9d00ae30 <.LBB20>
9d00ae14:8c930004 lws3,4(a0)
9d00ae18:02602021 movea0,s3

9d00ae1c <.LVL25>:
9d00ae1c:8fa2003c lwv0,60(sp)
9d00ae20:0f402ea2 jal9d00ba88 <.LFE15>
9d00ae24:8c450004 lwa1,4(v0)

9d00ae28 <.LVL26>:
9d00ae28:54400009 bnezlv0,9d00ae50 <.LBE20>
9d00ae2c:ae120008 sws2,8(s0)

9d00ae30 <.LBB20>:
9d00ae30:02602021 movea0,s3
9d00ae34:0f402ea2 jal9d00ba88 <.LFE15>
9d00ae38:8e850004 lwa1,4(s4)

9d00ae3c <.LVL28>:
9d00ae3c:10400004 beqzv0,9d00ae50 <.LBE20>
9d00ae40:24020001 liv0,1
9d00ae44:ae110000 sws1,0(s0)
9d00ae48:ae120004 sws2,4(s0)
9d00ae4c:ae02000c swv0,12(s0)

9d00ae50 <.LBE20>:
9d00ae50:00001021 movev0,zero
9d00ae54:8fbf0024 lwra,36(sp)
9d00ae58:8fb40020 lws4,32(sp)

9d00ae5c <.LVL30>:
9d00ae5c:8fb3001c lws3,28(sp)
9d00ae60:8fb20018 lws2,24(sp)

9d00ae64 <.LVL31>:
9d00ae64:8fb10014 lws1,20(sp)
9d00ae68:8fb00010 lws0,16(sp)

9d00ae6c <.LVL32>:
9d00ae6c:03e00008 jrra
9d00ae70:27bd0028 addiusp,sp,40

Disassembly of section .rodata.digital_pin_to_bit_mask_PGM.digital_pin_to_bit_mask_PGM:

9d00ae74 <digital_pin_to_bit_mask_PGM>:
9d00ae74:01000004 00010100 00020008 02000004     ................
9d00ae84:00084000 08000200 00400001 02000020     .@........@. ...
9d00ae94:80000004 01000080 00040008 00020010     ................
9d00aea4:00010100 00020001 00080004 00200010     .............. .
9d00aeb4:00800040 00020020 00040002 40001000     @... ..........@
9d00aec4:02008000 00100400 80000800 00100020     ............ ...
9d00aed4:10002000 40002000 04000008 04000010     . ... .@........
9d00aee4:00200200 80000001 00100002 00010002     .. .............
9d00aef4:20001000 20000040 40001000 00000080     ... @.. ...@....

Disassembly of section .rodata.digital_pin_to_timer_PGM.digital_pin_to_timer_PGM:

9d00af04 <digital_pin_to_timer_PGM>:
9d00af04:00000000 00010010 00020000 00200003     .............. .
9d00af14:00040030 00070069 00000000 00000000     0...i...........
...
9d00af48:02700400 00000600 00000300 00000000     ..p.............
...

Disassembly of section .text._ZN7SSD12898setPixelEiit:

9d00af94 <_ZN7SSD12898setPixelEiit>:
    command(78); data(x0);
    command(79); data(y0);
    command(34);
}

void SSD1289::setPixel(int x, int y, color_t color) {
9d00af94:27bdffd8 addiusp,sp,-40
9d00af98:afbf0024 swra,36(sp)
9d00af9c:afb10020 sws1,32(sp)
9d00afa0:afb0001c sws0,28(sp)
if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) 
9d00afa4:04a00017 bltza1,9d00b004 <.LBE21>
9d00afa8:30f1ffff andis1,a3,0xffff
9d00afac:8c870018 lwa3,24(a0)

9d00afb0 <.LVL180>:
9d00afb0:00a7382a slta3,a1,a3
9d00afb4:10e00013 beqza3,9d00b004 <.LBE21>
9d00afb8:00808021 moves0,a0
9d00afbc:04c00012 bltza2,9d00b008 <.LBE21+0x4>
9d00afc0:8fbf0024 lwra,36(sp)
9d00afc4:8c87001c lwa3,28(a0)
9d00afc8:00c7382a slta3,a2,a3
9d00afcc:50e0000f beqzla3,9d00b00c <.LBE21+0x8>
9d00afd0:8fb10020 lws1,32(sp)

9d00afd4 <.LBB18>:
return;

setAddrWindow(x,y,x,y);
9d00afd4:afa60010 swa2,16(sp)
9d00afd8:0f4021ce jal9d008738 <.LFE192>
9d00afdc:00a03821 movea3,a1

9d00afe0 <.LVL182>:
data(color);
9d00afe0:8e020000 lwv0,0(s0)
9d00afe4:8c5900e4 lwt9,228(v0)
9d00afe8:02002021 movea0,s0
9d00afec:02202821 movea1,s1

9d00aff0 <.LBE18>:
}
9d00aff0:8fbf0024 lwra,36(sp)
9d00aff4:8fb10020 lws1,32(sp)

9d00aff8 <.LVL183>:
9d00aff8:8fb0001c lws0,28(sp)

9d00affc <.LBB21>:
void SSD1289::setPixel(int x, int y, color_t color) {
if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) 
return;

setAddrWindow(x,y,x,y);
data(color);
9d00affc:03200008 jrt9
9d00b000:27bd0028 addiusp,sp,40

9d00b004 <.LBE21>:
}
9d00b004:8fbf0024 lwra,36(sp)
9d00b008:8fb10020 lws1,32(sp)
9d00b00c:8fb0001c lws0,28(sp)
9d00b010:03e00008 jrra
9d00b014:27bd0028 addiusp,sp,40

Disassembly of section .text._Z10loadHeaderm:

9d00b018 <_Z10loadHeaderm>:
delay(40);
}
9d00b018:27bdffd8 addiusp,sp,-40
9d00b01c:afbf0024 swra,36(sp)
9d00b020:afb30020 sws3,32(sp)
9d00b024:afb2001c sws2,28(sp)
9d00b028:afb10018 sws1,24(sp)
9d00b02c:afb00014 sws0,20(sp)

9d00b030 <.LBB13>:
}
9d00b030:0f4030bf jal9d00c2fc <.LFE175>
9d00b034:00808821 moves1,a0

9d00b038 <.LVL80>:
9d00b038:00409021 moves2,v0

9d00b03c <.LVL81>:

9d00b03c:00008021 moves0,zero

9d00b040 <.LVL82>:
void loadBody(uint32_t del) {
9d00b040:0f4030bf jal9d00c2fc <.LFE175>
9d00b044:00000000 nop

9d00b048 <.LVL83>:
9d00b048:00521023 subuv0,v0,s2
9d00b04c:0051102b sltuv0,v0,s1
9d00b050:1040000a beqzv0,9d00b07c <.LVL87>
9d00b054:26130001 addius3,s0,1

9d00b058 <.LVL84>:
uint32_t ts = millis();
9d00b058:3404f800 lia0,0xf800
9d00b05c:240507ff lia1,2047
9d00b060:2406000c lia2,12
9d00b064:0f402227 jal9d00889c <.LBE15>
9d00b068:02003821 movea3,s0

9d00b06c <.LVL85>:
while (millis() - ts < del) {
9d00b06c:0f402e47 jal9d00b91c <.LFE87>
9d00b070:24040028 lia0,40

9d00b074 <.LBE13>:
delay(40);
}
}

void loadBody(uint32_t del) {
uint32_t ts = millis();
9d00b074:0b402c10 j9d00b040 <.LVL82>
9d00b078:02608021 moves0,s3

9d00b07c <.LVL87>:
while (millis() - ts < del) {
randomStripes(Color::Blue, Color::Yellow);
delay(40);
9d00b07c:8fbf0024 lwra,36(sp)
9d00b080:8fb30020 lws3,32(sp)
9d00b084:8fb2001c lws2,28(sp)

9d00b088 <.LVL88>:
9d00b088:8fb10018 lws1,24(sp)

9d00b08c <.LVL89>:
9d00b08c:8fb00014 lws0,20(sp)

9d00b090 <.LVL90>:
9d00b090:03e00008 jrra
9d00b094:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCore5writeEPKhm:

9d00b098 <_ZN11DisplayCore5writeEPKhm>:
    return header->linesPerCharacter;
}
        

#if ARDUINO >= 100
size_t DisplayCore::write(const uint8_t *buffer, size_t size) {
9d00b098:27bdffd8 addiusp,sp,-40
9d00b09c:afbf0024 swra,36(sp)
9d00b0a0:afb30020 sws3,32(sp)
9d00b0a4:afb2001c sws2,28(sp)
9d00b0a8:afb10018 sws1,24(sp)
9d00b0ac:afb00014 sws0,20(sp)
9d00b0b0:00808821 moves1,a0
9d00b0b4:00a08021 moves0,a1
    startBuffer();
9d00b0b8:8c820000 lwv0,0(a0)
9d00b0bc:8c4200c4 lwv0,196(v0)
9d00b0c0:0040f809 jalrv0
9d00b0c4:00c09021 moves2,a2

9d00b0c8 <.LVL17>:
9d00b0c8:02129821 addus3,s0,s2

9d00b0cc <.LBB11>:
    for (size_t i = 0; i < size; i++) {
9d00b0cc:12130007 beqs0,s3,9d00b0ec <.LBE11>
9d00b0d0:8e220000 lwv0,0(s1)
        write(buffer[i]);
9d00b0d4:8c420000 lwv0,0(v0)
9d00b0d8:02202021 movea0,s1
9d00b0dc:0040f809 jalrv0
9d00b0e0:92050000 lbua1,0(s0)

9d00b0e4 <.LVL19>:
9d00b0e4:0b402c33 j9d00b0cc <.LBB11>
9d00b0e8:26100001 addius0,s0,1

9d00b0ec <.LBE11>:
    }
    endBuffer();
9d00b0ec:8c4200c8 lwv0,200(v0)
9d00b0f0:0040f809 jalrv0
9d00b0f4:02202021 movea0,s1

9d00b0f8 <.LVL20>:
    return size;
}
9d00b0f8:02401021 movev0,s2
9d00b0fc:8fbf0024 lwra,36(sp)
9d00b100:8fb30020 lws3,32(sp)
9d00b104:8fb2001c lws2,28(sp)

9d00b108 <.LVL21>:
9d00b108:8fb10018 lws1,24(sp)

9d00b10c <.LVL22>:
9d00b10c:8fb00014 lws0,20(sp)

9d00b110 <.LVL23>:
9d00b110:03e00008 jrra
9d00b114:27bd0028 addiusp,sp,40

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:

9d00b118 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
9d00b118:27bdffd8 addiusp,sp,-40
9d00b11c:afbf0024 swra,36(sp)
9d00b120:afb20020 sws2,32(sp)
9d00b124:afb1001c sws1,28(sp)
9d00b128:afb00018 sws0,24(sp)
9d00b12c:00808821 moves1,a0
9d00b130:00a08021 moves0,a1
9d00b134:00e09021 moves2,a3
9d00b138:8c840004 lwa0,4(a0)

9d00b13c <.LVL7>:
9d00b13c:8ca50004 lwa1,4(a1)

9d00b140 <.LVL8>:
9d00b140:0f402ea2 jal9d00ba88 <.LFE15>
9d00b144:afa60010 swa2,16(sp)

9d00b148 <.LVL9>:
9d00b148:24030001 liv1,1

9d00b14c <.LVL10>:
9d00b14c:1440000a bnezv0,9d00b178 <.LBE11>
9d00b150:8fa60010 lwa2,16(sp)
9d00b154:2e520004 sltius2,s2,4

9d00b158 <.LVL11>:
9d00b158:12400007 beqzs2,9d00b178 <.LBE11>
9d00b15c:00001821 movev1,zero

9d00b160 <.LBB11>:
9d00b160:8e020000 lwv0,0(s0)
9d00b164:8c420014 lwv0,20(v0)
9d00b168:02002021 movea0,s0
9d00b16c:0040f809 jalrv0
9d00b170:02202821 movea1,s1

9d00b174 <.LVL13>:
9d00b174:00401821 movev1,v0

9d00b178 <.LBE11>:
9d00b178:00601021 movev0,v1
9d00b17c:8fbf0024 lwra,36(sp)
9d00b180:8fb20020 lws2,32(sp)
9d00b184:8fb1001c lws1,28(sp)

9d00b188 <.LVL15>:
9d00b188:8fb00018 lws0,24(sp)

9d00b18c <.LVL16>:
9d00b18c:03e00008 jrra
9d00b190:27bd0028 addiusp,sp,40

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

9d00b194 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
9d00b194:27bdffd0 addiusp,sp,-48
9d00b198:afbf002c swra,44(sp)
9d00b19c:afb20028 sws2,40(sp)
9d00b1a0:afb10024 sws1,36(sp)
9d00b1a4:afb00020 sws0,32(sp)
9d00b1a8:00808821 moves1,a0
9d00b1ac:8fb00040 lws0,64(sp)
9d00b1b0:1606000b bnes0,a2,9d00b1e0 <.LBB7>
9d00b1b4:00a09021 moves2,a1
9d00b1b8:8c840004 lwa0,4(a0)

9d00b1bc <.LVL7>:
9d00b1bc:8ce50004 lwa1,4(a3)

9d00b1c0 <.LVL8>:
9d00b1c0:afa60018 swa2,24(sp)
9d00b1c4:0f402eb4 jal9d00bad0 <.LFE15+0x48>
9d00b1c8:afa7001c swa3,28(sp)

9d00b1cc <.LVL9>:
9d00b1cc:8fa60018 lwa2,24(sp)

9d00b1d0 <.LVL10>:
9d00b1d0:10400003 beqzv0,9d00b1e0 <.LBB7>
9d00b1d4:8fa7001c lwa3,28(sp)
9d00b1d8:0b402c7e j9d00b1f8 <.LBE7>
9d00b1dc:24020006 liv0,6

9d00b1e0 <.LBB7>:
9d00b1e0:8e240008 lwa0,8(s1)
9d00b1e4:8c820000 lwv0,0(a0)
9d00b1e8:afb00010 sws0,16(sp)
9d00b1ec:8c420020 lwv0,32(v0)
9d00b1f0:0040f809 jalrv0
9d00b1f4:02402821 movea1,s2

9d00b1f8 <.LBE7>:
9d00b1f8:8fbf002c lwra,44(sp)
9d00b1fc:8fb20028 lws2,40(sp)

9d00b200 <.LVL13>:
9d00b200:8fb10024 lws1,36(sp)

9d00b204 <.LVL14>:
9d00b204:8fb00020 lws0,32(sp)

9d00b208 <.LVL15>:
9d00b208:03e00008 jrra
9d00b20c:27bd0030 addiusp,sp,48

Disassembly of section .text._Z6Removem:

9d00b210 <L0>:
}

// Remove a channel from the linked list of channels
void Remove(uint32_t Channel)
{
    ChanType * ChanP = FirstChanP[InactiveBuffer];
9d00b210:8f8784dc lwa3,-31524(gp)
9d00b214:00073080 slla2,a3,0x2
9d00b218:278384c0 addiuv1,gp,-31552
9d00b21c:7c66180a lwxv1,a2(v1)

9d00b220 <.LVL71>:
    ChanType * LastChanP = FirstChanP[InactiveBuffer];
9d00b220:00602821 movea1,v1
}

// Remove a channel from the linked list of channels
void Remove(uint32_t Channel)
{
    ChanType * ChanP = FirstChanP[InactiveBuffer];
9d00b224:00601021 movev0,v1
    
    // Walk through the linked list, looking for our target
    while (ChanP != NULL)
    {
        // Is this element the one we're looking for?
        if (ChanP == &Chan[InactiveBuffer][Channel])
9d00b228:24080047 lit0,71
9d00b22c:70e84802 mult1,a3,t0
9d00b230:01242021 addua0,t1,a0

9d00b234 <.LVL72>:
9d00b234:00044140 sllt0,a0,0x5
9d00b238:3c078000 luia3,0x8000
9d00b23c:24e70948 addiua3,a3,2376
9d00b240:00e83821 addua3,a3,t0

9d00b244 <.LVL73>:
{
    ChanType * ChanP = FirstChanP[InactiveBuffer];
    ChanType * LastChanP = FirstChanP[InactiveBuffer];
    
    // Walk through the linked list, looking for our target
    while (ChanP != NULL)
9d00b244:1040000e beqzv0,9d00b280 <.LBE9+0x8>
9d00b248:00000000 nop
    {
        // Is this element the one we're looking for?
        if (ChanP == &Chan[InactiveBuffer][Channel])
9d00b24c:5447000a bnelv0,a3,9d00b278 <.LBE9>
9d00b250:00402821 movea1,v0
        {
            // Yup. So let's remove it from the linked list then
            // Are we on the first channel?
            if (ChanP == FirstChanP[InactiveBuffer])
9d00b254:14430005 bnev0,v1,9d00b26c <.LVL73+0x28>
9d00b258:8c44001c lwa0,28(v0)
            {
                // Yes, so change the first channel pointer instead
                FirstChanP[InactiveBuffer] = ChanP->NextChanP;
9d00b25c:278384c0 addiuv1,gp,-31552
9d00b260:00663021 addua2,v1,a2
9d00b264:0b402c9c j9d00b270 <.LVL73+0x2c>
9d00b268:acc40000 swa0,0(a2)
            }
            else
            {
                // Nope, we're in the list. So change this element's previous pointer
                LastChanP->NextChanP = ChanP->NextChanP;
9d00b26c:aca4001c swa0,28(a1)
            }
            // And always zero this element's next pointer out
            ChanP->NextChanP = NULL;
            
            // And we're done so bail
            break;
9d00b270:03e00008 jrra
9d00b274:ac40001c swzero,28(v0)

9d00b278 <.LBE9>:
        }
        // Advance our pointers by one element in the list
        LastChanP = ChanP;
        ChanP = ChanP->NextChanP;
9d00b278:0b402c91 j9d00b244 <.LVL73>
9d00b27c:8c42001c lwv0,28(v0)
9d00b280:03e00008 jrra
9d00b284:00000000 nop

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

9d00b288 <L0>:
9d00b288:27bdffd8 addiusp,sp,-40
9d00b28c:afbf0024 swra,36(sp)
9d00b290:afb30020 sws3,32(sp)
9d00b294:afb2001c sws2,28(sp)
9d00b298:afb10018 sws1,24(sp)
9d00b29c:afb00014 sws0,20(sp)
9d00b2a0:00809821 moves3,a0
9d00b2a4:00a09021 moves2,a1
9d00b2a8:00c08821 moves1,a2
9d00b2ac:0f402d76 jal9d00b5d8 <.LFE184>
9d00b2b0:00e08021 moves0,a3

9d00b2b4 <.LVL29>:
9d00b2b4:14400009 bnezv0,9d00b2dc <.LBE13>
9d00b2b8:24030001 liv1,1

9d00b2bc <.LBB13>:
9d00b2bc:8e640008 lwa0,8(s3)
9d00b2c0:8c820000 lwv0,0(a0)
9d00b2c4:8c420018 lwv0,24(v0)
9d00b2c8:02402821 movea1,s2
9d00b2cc:02203021 movea2,s1
9d00b2d0:0040f809 jalrv0
9d00b2d4:02003821 movea3,s0

9d00b2d8 <.LVL31>:
9d00b2d8:00401821 movev1,v0

9d00b2dc <.LBE13>:
9d00b2dc:00601021 movev0,v1
9d00b2e0:8fbf0024 lwra,36(sp)
9d00b2e4:8fb30020 lws3,32(sp)

9d00b2e8 <.LVL33>:
9d00b2e8:8fb2001c lws2,28(sp)

9d00b2ec <.LVL34>:
9d00b2ec:8fb10018 lws1,24(sp)

9d00b2f0 <.LVL35>:
9d00b2f0:8fb00014 lws0,20(sp)

9d00b2f4 <.LVL36>:
9d00b2f4:03e00008 jrra
9d00b2f8:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN7SSD128910windowDataEPti:

9d00b2fc <_ZN7SSD128910windowDataEPti>:

void SSD1289::windowData(color_t d) {
    data(d);
}

void SSD1289::windowData(color_t *d, int l) {
9d00b2fc:27bdffd8 addiusp,sp,-40
9d00b300:afbf0024 swra,36(sp)
9d00b304:afb30020 sws3,32(sp)
9d00b308:afb2001c sws2,28(sp)
9d00b30c:afb10018 sws1,24(sp)
9d00b310:afb00014 sws0,20(sp)
9d00b314:00808821 moves1,a0
9d00b318:00a09021 moves2,a1
9d00b31c:00c09821 moves3,a2

9d00b320 <.LBB24>:
    for (uint32_t i = 0; i < l; i++) {
9d00b320:00008021 moves0,zero

9d00b324 <.LVL237>:
9d00b324:0213102b sltuv0,s0,s3
9d00b328:10400009 beqzv0,9d00b350 <.LBE24+0x8>
9d00b32c:00101840 sllv1,s0,0x1
        data(d[i]);
9d00b330:8e220000 lwv0,0(s1)
9d00b334:02431821 adduv1,s2,v1
9d00b338:8c4200e4 lwv0,228(v0)
9d00b33c:02202021 movea0,s1
9d00b340:0040f809 jalrv0
9d00b344:94650000 lhua1,0(v1)

9d00b348 <.LBE24>:
void SSD1289::windowData(color_t d) {
    data(d);
}

void SSD1289::windowData(color_t *d, int l) {
    for (uint32_t i = 0; i < l; i++) {
9d00b348:0b402cc9 j9d00b324 <.LVL237>
9d00b34c:26100001 addius0,s0,1
        data(d[i]);
    }
}
9d00b350:8fbf0024 lwra,36(sp)
9d00b354:8fb30020 lws3,32(sp)

9d00b358 <.LVL239>:
9d00b358:8fb2001c lws2,28(sp)

9d00b35c <.LVL240>:
9d00b35c:8fb10018 lws1,24(sp)

9d00b360 <.LVL241>:
9d00b360:8fb00014 lws0,20(sp)

9d00b364 <.LVL242>:
9d00b364:03e00008 jrra
9d00b368:27bd0028 addiusp,sp,40

Disassembly of section .text._ZN11DisplayCore10windowDataEPKti:

9d00b36c <_ZN11DisplayCore10windowDataEPKti>:
 *
 *  Example:
 *
 *      tft.windowData(myData, 1000);
 */
void DisplayCore::windowData(const color_t *d, int l) {
9d00b36c:27bdffd8 addiusp,sp,-40
9d00b370:afbf0024 swra,36(sp)
9d00b374:afb30020 sws3,32(sp)
9d00b378:afb2001c sws2,28(sp)
9d00b37c:afb10018 sws1,24(sp)
9d00b380:afb00014 sws0,20(sp)
9d00b384:00808821 moves1,a0
9d00b388:00a09021 moves2,a1
9d00b38c:00c09821 moves3,a2

9d00b390 <.LBB2>:
    for (int i = 0; i < l; i++) {
9d00b390:00008021 moves0,zero

9d00b394 <.LVL10>:
9d00b394:0213102a sltv0,s0,s3
9d00b398:10400009 beqzv0,9d00b3c0 <.LBE2+0x8>
9d00b39c:00101840 sllv1,s0,0x1
        windowData(d[i]);
9d00b3a0:8e220000 lwv0,0(s1)
9d00b3a4:02431821 adduv1,s2,v1
9d00b3a8:8c4200b0 lwv0,176(v0)
9d00b3ac:02202021 movea0,s1
9d00b3b0:0040f809 jalrv0
9d00b3b4:94650000 lhua1,0(v1)

9d00b3b8 <.LBE2>:
 *  Example:
 *
 *      tft.windowData(myData, 1000);
 */
void DisplayCore::windowData(const color_t *d, int l) {
    for (int i = 0; i < l; i++) {
9d00b3b8:0b402ce5 j9d00b394 <.LVL10>
9d00b3bc:26100001 addius0,s0,1
        windowData(d[i]);
    }
}
9d00b3c0:8fbf0024 lwra,36(sp)
9d00b3c4:8fb30020 lws3,32(sp)

9d00b3c8 <.LVL12>:
9d00b3c8:8fb2001c lws2,28(sp)

9d00b3cc <.LVL13>:
9d00b3cc:8fb10018 lws1,24(sp)

9d00b3d0 <.LVL14>:
9d00b3d0:8fb00014 lws0,20(sp)

9d00b3d4 <.LVL15>:
9d00b3d4:03e00008 jrra
9d00b3d8:27bd0028 addiusp,sp,40

Disassembly of section .text.__fpclassifyd:

9d00b3dc <__fpclassifyd>:
9d00b3dc:44046000 mfc1a0,$f12
9d00b3e0:44656000 mfhc1a1,$f12
9d00b3e4:00853025 ora2,a0,a1
9d00b3e8:10c00015 beqza2,9d00b440 <__fpclassifyd+0x64>
9d00b3ec:24020002 liv0,2
9d00b3f0:3c068000 luia2,0x8000
9d00b3f4:14a60003 bnea1,a2,9d00b404 <__fpclassifyd+0x28>
9d00b3f8:7ca3f000 extv1,a1,0x0,0x1f
9d00b3fc:10800010 beqza0,9d00b440 <__fpclassifyd+0x64>
9d00b400:00000000 nop
9d00b404:3c06fff0 luia2,0xfff0
9d00b408:00663021 addua2,v1,a2
9d00b40c:3c027fe0 luiv0,0x7fe0
9d00b410:00c2302b sltua2,a2,v0
9d00b414:14c0000a bneza2,9d00b440 <__fpclassifyd+0x64>
9d00b418:24020004 liv0,4
9d00b41c:3c060010 luia2,0x10
9d00b420:0066302b sltua2,v1,a2
9d00b424:14c00006 bneza2,9d00b440 <__fpclassifyd+0x64>
9d00b428:24020003 liv0,3
9d00b42c:2c840001 sltiua0,a0,1
9d00b430:3c027ff0 luiv0,0x7ff0
9d00b434:00621026 xorv0,v1,v0
9d00b438:0002200b movna0,zero,v0
9d00b43c:00801021 movev0,a0
9d00b440:03e00008 jrra
9d00b444:00000000 nop

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:

9d00b448 <L0>:
9d00b448:27bdffd8 addiusp,sp,-40
9d00b44c:afbf0024 swra,36(sp)
9d00b450:afb00020 sws0,32(sp)
9d00b454:00c08021 moves0,a2

9d00b458 <.LBB13>:
9d00b458:afa00010 swzero,16(sp)
9d00b45c:afa00014 swzero,20(sp)
9d00b460:24020010 liv0,16
9d00b464:afa20018 swv0,24(sp)
9d00b468:afa0001c swzero,28(sp)

9d00b46c <.LBE14>:
9d00b46c:8c820000 lwv0,0(a0)
9d00b470:8c420018 lwv0,24(v0)
9d00b474:8cc60000 lwa2,0(a2)

9d00b478 <.LVL19>:
9d00b478:0040f809 jalrv0
9d00b47c:27a70010 addiua3,sp,16

9d00b480 <.LBB16>:
9d00b480:8fa40014 lwa0,20(sp)
9d00b484:30840006 andia0,a0,0x6

9d00b488 <.LBE16>:
9d00b488:24030006 liv1,6
9d00b48c:14830004 bnea0,v1,9d00b4a0 <.LBE13>
9d00b490:00001021 movev0,zero
9d00b494:8fa20010 lwv0,16(sp)
9d00b498:ae020000 swv0,0(s0)
9d00b49c:24020001 liv0,1

9d00b4a0 <.LBE13>:
9d00b4a0:8fbf0024 lwra,36(sp)
9d00b4a4:8fb00020 lws0,32(sp)

9d00b4a8 <.LVL21>:
9d00b4a8:03e00008 jrra
9d00b4ac:27bd0028 addiusp,sp,40

Disassembly of section .text.setup:

9d00b4b0 <setup>:

void setup() {
tft.initializeDevice();
tft.setRotation(1);
tft.setFont(Fonts::Sinclair);
tft.fillScreen(Color::White);
9d00b4b0:27bdffe8 addiusp,sp,-24
9d00b4b4:afbf0014 swra,20(sp)
tft.setTextColor(Color::Black);
9d00b4b8:0f4016a7 jal9d005a9c <_ZN7SSD128916initializeDeviceEv>
9d00b4bc:27848338 addiua0,gp,-31944

9d00b4c0 <.LVL0>:
}
9d00b4c0:27848338 addiua0,gp,-31944
9d00b4c4:0f402173 jal9d0085cc <.LBE37>
9d00b4c8:24050003 lia1,3

9d00b4cc <.LVL1>:

9d00b4cc:27848338 addiua0,gp,-31944
9d00b4d0:3c059d00 luia1,0x9d00
9d00b4d4:0f4030e1 jal9d00c384 <.LFE184>
9d00b4d8:24a52a50 addiua1,a1,10832

9d00b4dc <.LVL2>:
void setBorderSingle(uint16_t c) {
9d00b4dc:27848338 addiua0,gp,-31944
9d00b4e0:0f402efb jal9d00bbec <.LFE18>
9d00b4e4:3405ffff lia1,0xffff

9d00b4e8 <.LVL3>:
tft.fillRectangle(0, 0, 320, 24, c);
9d00b4e8:27848338 addiua0,gp,-31944
9d00b4ec:0f4030dd jal9d00c374 <.LFE179>
9d00b4f0:00002821 movea1,zero

9d00b4f4 <.LVL4>:
tft.fillRectangle(0, 24, 32, 192, c);
9d00b4f4:24040019 lia0,25
9d00b4f8:0f40227f jal9d0089fc <.LFE181>
9d00b4fc:24050001 lia1,1

9d00b500 <.LVL5>:
tft.fillRectangle(288, 24, 32, 192, c);
9d00b500:24040019 lia0,25
9d00b504:240500ff lia1,255
tft.fillRectangle(0, 216, 320, 24, c);
9d00b508:8fbf0014 lwra,20(sp)
}

void setBorderSingle(uint16_t c) {
tft.fillRectangle(0, 0, 320, 24, c);
tft.fillRectangle(0, 24, 32, 192, c);
tft.fillRectangle(288, 24, 32, 192, c);
9d00b50c:0b402e34 j9d00b8d0 <_Z20SoftPWMServoPWMWritemh>
9d00b510:27bd0018 addiusp,sp,24

Disassembly of section .text.strcmp:

9d00b514 <strcmp>:
9d00b514:00851025 orv0,a0,a1
9d00b518:30420001 andiv0,v0,0x1
9d00b51c:54400010 bnezlv0,9d00b560 <strcmp+0x4c>
9d00b520:24840001 addiua0,a0,1
9d00b524:90830000 lbuv1,0(a0)
9d00b528:90a20000 lbuv0,0(a1)
9d00b52c:10600010 beqzv1,9d00b570 <strcmp+0x5c>
9d00b530:24840002 addiua0,a0,2
9d00b534:1462000e bnev1,v0,9d00b570 <strcmp+0x5c>
9d00b538:9086ffff lbua2,-1(a0)
9d00b53c:90a20001 lbuv0,1(a1)
9d00b540:10c00003 beqza2,9d00b550 <strcmp+0x3c>
9d00b544:24a50002 addiua1,a1,2
9d00b548:10c2fff7 beqa2,v0,9d00b528 <strcmp+0x14>
9d00b54c:90830000 lbuv1,0(a0)
9d00b550:03e00008 jrra
9d00b554:00c21023 subuv0,a2,v0
9d00b558:14620005 bnev1,v0,9d00b570 <strcmp+0x5c>
9d00b55c:24840001 addiua0,a0,1
9d00b560:9083ffff lbuv1,-1(a0)
9d00b564:24a50001 addiua1,a1,1
9d00b568:1460fffb bnezv1,9d00b558 <strcmp+0x44>
9d00b56c:90a2ffff lbuv0,-1(a1)
9d00b570:03e00008 jrra
9d00b574:00621023 subuv0,v1,v0

Disassembly of section .text._Z8loadBodym:

9d00b578 <_Z8loadBodym>:
uint32_t ts = millis();
while (millis() - ts < del) {
randomStripes(Color::Blue, Color::Yellow);
delay(40);
}
}
9d00b578:27bdffe0 addiusp,sp,-32
9d00b57c:afbf001c swra,28(sp)
9d00b580:afb10018 sws1,24(sp)
9d00b584:afb00014 sws0,20(sp)

9d00b588 <.LBB14>:

9d00b588:0f4030bf jal9d00c2fc <.LFE175>
9d00b58c:00808021 moves0,a0

9d00b590 <.LVL92>:
9d00b590:00408821 moves1,v0

9d00b594 <.LVL93>:
void cls(uint16_t c) {
9d00b594:0f4030bf jal9d00c2fc <.LFE175>
9d00b598:00000000 nop

9d00b59c <.LVL94>:
9d00b59c:00511023 subuv0,v0,s1
9d00b5a0:0050102b sltuv0,v0,s0
9d00b5a4:10400007 beqzv0,9d00b5c4 <.LBE14>
9d00b5a8:2404001f lia0,31
tft.fillRectangle(32, 24, 256, 192, c);
9d00b5ac:0f40246b jal9d0091ac <.LFE102>
9d00b5b0:3405ffe0 lia1,0xffe0

9d00b5b4 <.LVL95>:
}
9d00b5b4:0f402e47 jal9d00b91c <.LFE87>
9d00b5b8:24040028 lia0,40

9d00b5bc <.LVL96>:
9d00b5bc:0b402d65 j9d00b594 <.LVL93>
9d00b5c0:00000000 nop

9d00b5c4 <.LBE14>:

void loop() {
9d00b5c4:8fbf001c lwra,28(sp)
9d00b5c8:8fb10018 lws1,24(sp)

9d00b5cc <.LVL97>:
9d00b5cc:8fb00014 lws0,20(sp)

9d00b5d0 <.LVL98>:
9d00b5d0:03e00008 jrra
9d00b5d4:27bd0020 addiusp,sp,32

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:

9d00b5d8 <L0>:
9d00b5d8:27bdffe0 addiusp,sp,-32
9d00b5dc:afbf001c swra,28(sp)
9d00b5e0:afb10018 sws1,24(sp)
9d00b5e4:afb00014 sws0,20(sp)
9d00b5e8:00c08821 moves1,a2
9d00b5ec:00e08021 moves0,a3
9d00b5f0:8c840004 lwa0,4(a0)

9d00b5f4 <.LVL34>:
9d00b5f4:0f402ea2 jal9d00ba88 <.LFE15>
9d00b5f8:8ca50004 lwa1,4(a1)

9d00b5fc <.LVL35>:
9d00b5fc:10400007 beqzv0,9d00b61c <.LVL35+0x20>
9d00b600:00001821 movev1,zero
9d00b604:ae110000 sws1,0(s0)
9d00b608:24020008 liv0,8
9d00b60c:ae02000c swv0,12(s0)
9d00b610:24020006 liv0,6
9d00b614:ae020004 swv0,4(s0)
9d00b618:24030001 liv1,1
9d00b61c:00601021 movev0,v1
9d00b620:8fbf001c lwra,28(sp)
9d00b624:8fb10018 lws1,24(sp)

9d00b628 <.LVL36>:
9d00b628:8fb00014 lws0,20(sp)

9d00b62c <.LVL37>:
9d00b62c:03e00008 jrra
9d00b630:27bd0020 addiusp,sp,32

Disassembly of section .text.setIntPriority:

9d00b634 <setIntPriority>:
int             bn;

/* Compute the address of the interrupt priority control register used
** by this interrupt vector
*/
ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d00b634:24820003 addiuv0,a0,3
9d00b638:28830000 sltiv1,a0,0
9d00b63c:0083100a movzv0,a0,v1
9d00b640:00021883 srav1,v0,0x2
9d00b644:00031900 sllv1,v1,0x4
9d00b648:3c02bf81 luiv0,0xbf81
9d00b64c:24420140 addiuv0,v0,320
9d00b650:00431021 adduv0,v0,v1

/* Compute the number of bit positions to shift to get to the
** correct position for the priority bits for this vector.
*/
bn = 8 * (vec % 4);
9d00b654:24030004 liv1,4
9d00b658:0083001a divzero,a0,v1
9d00b65c:006001f4 teqv1,zero,0x7
9d00b660:00003810 mfhia3
9d00b664:000720c0 slla0,a3,0x3

9d00b668 <.LVL33>:

/* Set the interrupt privilege level and sub-privilege level
*/
ipc->clr = (0x1F << bn);
9d00b668:2403001f liv1,31
9d00b66c:00831804 sllvv1,v1,a0
9d00b670:ac430004 swv1,4(v0)
ipc->set = ((ipl << 2) + spl) << bn;
9d00b674:00052880 slla1,a1,0x2

9d00b678 <.LVL34>:
9d00b678:00a63021 addua2,a1,a2

9d00b67c <.LVL35>:
9d00b67c:00862004 sllva0,a2,a0

9d00b680 <.LVL36>:
9d00b680:ac440008 swa0,8(v0)
9d00b684:03e00008 jrra
9d00b688:00000000 nop

Disassembly of section .text.rand:

9d00b68c <rand>:
9d00b68c:3c028000 luiv0,0x8000
9d00b690:8c432390 lwv1,9104(v0)
9d00b694:8c6600ac lwa2,172(v1)
9d00b698:3c044c95 luia0,0x4c95
9d00b69c:24847f2d addiua0,a0,32557
9d00b6a0:8c6500a8 lwa1,168(v1)
9d00b6a4:3c025851 luiv0,0x5851
9d00b6a8:3442f42d oriv0,v0,0xf42d
9d00b6ac:00a20018 multa1,v0
9d00b6b0:70c40000 madda2,a0
9d00b6b4:00001012 mflov0
9d00b6b8:00a40019 multua1,a0
9d00b6bc:00002012 mfloa0
9d00b6c0:00002810 mfhia1
9d00b6c4:00451021 adduv0,v0,a1
9d00b6c8:24850001 addiua1,a0,1
9d00b6cc:00a4202b sltua0,a1,a0
9d00b6d0:00821021 adduv0,a0,v0
9d00b6d4:ac6500a8 swa1,168(v1)
9d00b6d8:ac6200ac swv0,172(v1)
9d00b6dc:03e00008 jrra
9d00b6e0:7c42f000 extv0,v0,0x0,0x1f

Disassembly of section .text._ZN11DisplayCore18getPortInformationEhPm:

9d00b6e4 <_ZN11DisplayCore18getPortInformationEhPm>:
            break;
    }
}

#if defined(__PIC32MX__) || defined(__PIC32MZ__)
p32_ioport *DisplayCore::getPortInformation(uint8_t pin, uint32_t *mask) {
9d00b6e4:30a500ff andia1,a1,0xff

9d00b6e8 <.LBB8>:
    uint32_t portno = digitalPinToPort(pin);
9d00b6e8:3c029d01 luiv0,0x9d01
9d00b6ec:2442b9b0 addiuv0,v0,-18000
9d00b6f0:7c45118a lbuxv0,a1(v0)

9d00b6f4 <.LVL14>:
    if (portno == NOT_A_PIN) {
9d00b6f4:1040000e beqzv0,9d00b730 <.LBE8>
9d00b6f8:00000000 nop
        return NULL;
    }
    if (mask != NULL) {
9d00b6fc:10c00006 beqza2,9d00b718 <.LVL15+0x14>
9d00b700:00052840 slla1,a1,0x1

9d00b704 <.LVL15>:
        *mask = digitalPinToBitMask(pin);
9d00b704:3c039d01 luiv1,0x9d01
9d00b708:2463ae74 addiuv1,v1,-20876
9d00b70c:00a32821 addua1,a1,v1
9d00b710:94a30000 lhuv1,0(a1)
9d00b714:acc30000 swv1,0(a2)
    }
    return (p32_ioport *)portRegisters(portno);
9d00b718:00021080 sllv0,v0,0x2

9d00b71c <.LVL16>:
9d00b71c:3c039d01 luiv1,0x9d01
9d00b720:2463bde8 addiuv1,v1,-16920
9d00b724:7c62100a lwxv0,v0(v1)
9d00b728:03e00008 jrra
9d00b72c:2442fff0 addiuv0,v0,-16

9d00b730 <.LBE8>:
}
9d00b730:03e00008 jrra
9d00b734:00001021 movev0,zero

Disassembly of section .text.turnOffPWM:

9d00b738 <turnOffPWM>:
}


//************************************************************************
void turnOffPWM(uint8_t timer)
{
9d00b738:308400ff andia0,a0,0xff
p32_oc *ocp;
    uint16_tpwm_mask = (1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d00b73c:2484ffff addiua0,a0,-1

9d00b740 <.LVL56>:
9d00b740:24030001 liv1,1
9d00b744:00831804 sllvv1,v1,a0

9d00b748 <.LVL57>:

    // only process this if the PWM was ON
    if((pwm_active & pwm_mask) != 0)
9d00b748:978584ec lhua1,-31508(gp)
9d00b74c:00a31024 andv0,a1,v1
9d00b750:1040000c beqzv0,9d00b784 <.LVL62>
9d00b754:00042240 slla0,a0,0x9

9d00b758 <.LVL58>:
    {
        /* Disable the output compare.
        */
        ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d00b758:3c02bf84 luiv0,0xbf84
9d00b75c:24424000 addiuv0,v0,16384
9d00b760:00822021 addua0,a0,v0

9d00b764 <.LVL59>:
        ocp->ocxCon.clr = OCCON_ON;
9d00b764:34028000 liv0,0x8000
9d00b768:ac820004 swv0,4(a0)

        // Turn off the bit saying that this PWM is active.
        pwm_active &= ~pwm_mask;
9d00b76c:00031827 norv1,zero,v1

9d00b770 <.LVL60>:
9d00b770:00651824 andv1,v1,a1

9d00b774 <.LVL61>:

        // If no PWM are active, turn off the timer.
        if (pwm_active == 0)
9d00b774:14600003 bnezv1,9d00b784 <.LVL62>
9d00b778:a78384ec shv1,-31508(gp)
        {
            T2CONCLR = TBCON_ON;
9d00b77c:3c03bf84 luiv1,0xbf84
9d00b780:ac620204 swv0,516(v1)

9d00b784 <.LVL62>:
9d00b784:03e00008 jrra
9d00b788:00000000 nop

Disassembly of section .text._kill_r:

9d00b78c <_kill_r>:
9d00b78c:27bdffe0 addiusp,sp,-32
9d00b790:afbf001c swra,28(sp)
9d00b794:afb10018 sws1,24(sp)
9d00b798:afb00014 sws0,20(sp)
9d00b79c:00808821 moves1,a0
9d00b7a0:3c108000 luis0,0x8000
9d00b7a4:ae0023a0 swzero,9120(s0)
9d00b7a8:00a02021 movea0,a1
9d00b7ac:0f4030f9 jal9d00c3e4 <kill>
9d00b7b0:00c02821 movea1,a2
9d00b7b4:2403ffff liv1,-1
9d00b7b8:14430005 bnev0,v1,9d00b7d0 <_kill_r+0x44>
9d00b7bc:8fbf001c lwra,28(sp)
9d00b7c0:8e0323a0 lwv1,9120(s0)
9d00b7c4:54600001 bnezlv1,9d00b7cc <_kill_r+0x40>
9d00b7c8:ae230000 swv1,0(s1)
9d00b7cc:8fbf001c lwra,28(sp)
9d00b7d0:8fb10018 lws1,24(sp)
9d00b7d4:8fb00014 lws0,20(sp)
9d00b7d8:03e00008 jrra
9d00b7dc:27bd0020 addiusp,sp,32

Disassembly of section .text._ZNKSt9type_info10__do_catchEPKS_PPvj:

9d00b7e0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
9d00b7e0:8c840004 lwa0,4(a0)

9d00b7e4 <.LVL7>:
9d00b7e4:8ca50004 lwa1,4(a1)

9d00b7e8 <.LBB10>:
9d00b7e8:1085000d beqa0,a1,9d00b820 <.LBE13+0xc>
9d00b7ec:00000000 nop
9d00b7f0:80830000 lbv1,0(a0)
9d00b7f4:2402002a liv0,42
9d00b7f8:1062000b beqv1,v0,9d00b828 <.LBE13+0x14>
9d00b7fc:00000000 nop

9d00b800 <.LBE10>:
9d00b800:27bdffe8 addiusp,sp,-24
9d00b804:afbf0014 swra,20(sp)

9d00b808 <.LBB13>:
9d00b808:0f402d45 jal9d00b514 <.LFE178>
9d00b80c:00000000 nop

9d00b810 <.LVL9>:
9d00b810:2c420001 sltiuv0,v0,1

9d00b814 <.LBE13>:
9d00b814:8fbf0014 lwra,20(sp)
9d00b818:03e00008 jrra
9d00b81c:27bd0018 addiusp,sp,24
9d00b820:03e00008 jrra
9d00b824:24020001 liv0,1
9d00b828:03e00008 jrra
9d00b82c:00001021 movev0,zero

Disassembly of section .text._sbrk_r:

9d00b830 <_sbrk_r>:
9d00b830:27bdffe0 addiusp,sp,-32
9d00b834:afbf001c swra,28(sp)
9d00b838:afb10018 sws1,24(sp)
9d00b83c:afb00014 sws0,20(sp)
9d00b840:00808821 moves1,a0
9d00b844:3c108000 luis0,0x8000
9d00b848:ae0023a0 swzero,9120(s0)
9d00b84c:0f402e20 jal9d00b880 <sbrk>
9d00b850:00a02021 movea0,a1
9d00b854:2403ffff liv1,-1
9d00b858:14430005 bnev0,v1,9d00b870 <_sbrk_r+0x40>
9d00b85c:8fbf001c lwra,28(sp)
9d00b860:8e0323a0 lwv1,9120(s0)
9d00b864:54600001 bnezlv1,9d00b86c <_sbrk_r+0x3c>
9d00b868:ae230000 swv1,0(s1)
9d00b86c:8fbf001c lwra,28(sp)
9d00b870:8fb10018 lws1,24(sp)
9d00b874:8fb00014 lws0,20(sp)
9d00b878:03e00008 jrra
9d00b87c:27bd0020 addiusp,sp,32

Disassembly of section .text.sbrk:

9d00b880 <sbrk>:
9d00b880:27bdffe0 addiusp,sp,-32
9d00b884:afbf001c swra,28(sp)
9d00b888:afb10018 sws1,24(sp)
9d00b88c:afb00014 sws0,20(sp)
9d00b890:0f40290d jal9d00a434 <.LFE170>
9d00b894:00808821 moves1,a0
9d00b898:1a200007 blezs1,9d00b8b8 <sbrk+0x38>
9d00b89c:00408021 moves0,v0
9d00b8a0:2402ffff liv0,-1
9d00b8a4:12020004 beqs0,v0,9d00b8b8 <sbrk+0x38>
9d00b8a8:02002021 movea0,s0
9d00b8ac:00002821 movea1,zero
9d00b8b0:0f403012 jal9d00c048 <memset>
9d00b8b4:02203021 movea2,s1
9d00b8b8:02001021 movev0,s0
9d00b8bc:8fbf001c lwra,28(sp)
9d00b8c0:8fb10018 lws1,24(sp)
9d00b8c4:8fb00014 lws0,20(sp)
9d00b8c8:03e00008 jrra
9d00b8cc:27bd0020 addiusp,sp,32

Disassembly of section .text._Z20SoftPWMServoPWMWritemh:

9d00b8d0 <_Z20SoftPWMServoPWMWritemh>:
}

// Convert from 8-bit percentage to absolute 40MHz tick units
int32_t SoftPWMServoPWMWrite(uint32_t Pin, uint8_t Value)
{
    if (Pin >= SOFTPWMSERVO_MAX_PINS)
9d00b8d0:2c820047 sltiuv0,a0,71
9d00b8d4:1040000f beqzv0,9d00b914 <.LVL47>
9d00b8d8:30a500ff andia1,a1,0xff
    return SOFTPWMSERVO_OK;
}

// Convert from 8-bit percentage to absolute 40MHz tick units
int32_t SoftPWMServoPWMWrite(uint32_t Pin, uint8_t Value)
{
9d00b8dc:27bdffe8 addiusp,sp,-24
9d00b8e0:afbf0014 swra,20(sp)
    if (Pin >= SOFTPWMSERVO_MAX_PINS)
    {
        return SOFTPWMSERVO_ERROR;
    }

    SoftPWMServoRawWrite(Pin, (((uint32_t)Value * FrameTime)/255), SOFTPWMSERVO_PWM);
9d00b8e4:8f828010 lwv0,-32752(gp)
9d00b8e8:70a22802 mula1,a1,v0

9d00b8ec <.LVL45>:
9d00b8ec:240200ff liv0,255
9d00b8f0:00a2001b divuzero,a1,v0
9d00b8f4:004001f4 teqv0,zero,0x7
9d00b8f8:00002812 mfloa1
9d00b8fc:0f40287d jal9d00a1f4 <.LFE80>
9d00b900:00003021 movea2,zero

9d00b904 <.LVL46>:

    return SOFTPWMSERVO_OK;
9d00b904:00001021 movev0,zero
}
9d00b908:8fbf0014 lwra,20(sp)
9d00b90c:03e00008 jrra
9d00b910:27bd0018 addiusp,sp,24

9d00b914 <.LVL47>:
// Convert from 8-bit percentage to absolute 40MHz tick units
int32_t SoftPWMServoPWMWrite(uint32_t Pin, uint8_t Value)
{
    if (Pin >= SOFTPWMSERVO_MAX_PINS)
    {
        return SOFTPWMSERVO_ERROR;
9d00b914:03e00008 jrra
9d00b918:2402ffff liv0,-1

Disassembly of section .text.delay:

9d00b91c <delay>:
}

//************************************************************************
// Delay for a given number of milliseconds.
void delay(unsigned long ms)
{
9d00b91c:27bdffe0 addiusp,sp,-32
9d00b920:afbf001c swra,28(sp)
9d00b924:afb10018 sws1,24(sp)
9d00b928:afb00014 sws0,20(sp)
9d00b92c:00808021 moves0,a0
unsigned longstartMillis;

startMillis=gTimer0_millis;
9d00b930:8f9184f0 lws1,-31504(gp)

9d00b934 <.LVL13>:

        while ((gTimer0_millis - startMillis) < ms)
9d00b934:8f8284f0 lwv0,-31504(gp)
9d00b938:00511023 subuv0,v0,s1
9d00b93c:0050102b sltuv0,v0,s0
9d00b940:10400005 beqzv0,9d00b958 <.LVL14+0x8>
9d00b944:8fbf001c lwra,28(sp)
{
_scheduleTask();
9d00b948:0f401e55 jal9d007954 <.LFE173>
9d00b94c:00000000 nop

9d00b950 <.LVL14>:
9d00b950:0b402e4d j9d00b934 <.LVL13>
9d00b954:00000000 nop
}
}
9d00b958:8fb10018 lws1,24(sp)

9d00b95c <.LVL15>:
9d00b95c:8fb00014 lws0,20(sp)

9d00b960 <.LVL16>:
9d00b960:03e00008 jrra
9d00b964:27bd0020 addiusp,sp,32

Disassembly of section .rodata:

9d00b968 <.LC0>:
9d00b968:20802020 addizero,a0,8224
9d00b96c:32383931 andit8,s1,0x3931
9d00b970:6e695320 0x6e695320
9d00b974:69616c63 0x69616c63
9d00b978:65522072 0x65522072
9d00b97c:72616573 0x72616573
9d00b980:4c206863 0x4c206863
9d00b984:00006474 teqzero,zero,0x191
9d00b988:0000004b 0x4b

9d00b98c <.LC2>:
9d00b98c:44414f4c 0x44414f4c
9d00b990:00000000 nop
9d00b994:0000004c syscall0x1

9d00b998 <.LC4>:
9d00b998:00000022 negzero,zero

9d00b99c <.LC5>:
9d00b99c:676f7250 0x676f7250
9d00b9a0:3a6d6172 xorit5,s3,0x6172
9d00b9a4:43495020 wait0x52540
9d00b9a8:542d3233 bnelat,t5,9d018278 <getpid+0xbe8c>
9d00b9ac:00005446 0x5446

Disassembly of section .rodata.digital_pin_to_port_PGM.digital_pin_to_port_PGM:

9d00b9b0 <digital_pin_to_port_PGM>:
9d00b9b0:04050606 05040401 04070401 02020706     ................
9d00b9c0:07070203 02020202 05050202 05050505     ................
9d00b9d0:03040505 04040106 04010104 01010702     ................
9d00b9e0:02040202 04030203 01070604 01010607     ................
9d00b9f0:07010606 00010707                       ........

Disassembly of section .rodata.digital_pin_to_pps_out_PGM.digital_pin_to_pps_out_PGM:

9d00b9f8 <.rodata.digital_pin_to_pps_out_PGM.digital_pin_to_pps_out_PGM>:
9d00b9f8:223a4a44 addik0,s1,19012
9d00b9fc:3b2423ff xoria0,t9,0x23ff
9d00ba00:2d5b2500 sltiuk1,t2,9472
9d00ba04:0b075842 j9c1d6108 <_stack+0x1c156110>
9d00ba08:5a591114 0x5a591114
9d00ba0c:03ff0405 0x3ff0405
9d00ba10:ffff020a sdc3$31,522(ra)
9d00ba14:37ff35ff orira,ra,0x35ff
9d00ba18:1327ffff beqt9,a3,9d00ba18 <digital_pin_to_port_PGM+0x68>
9d00ba1c:302eff43 andit6,at,0xff43
9d00ba20:26ffff31 addiura,s7,-207
9d00ba24:ffffffff sdc3$31,-1(ra)
9d00ba28:10ffffff beqa3,ra,9d00ba28 <digital_pin_to_port_PGM+0x78>
9d00ba2c:2c160c15 sltius6,zero,3093
9d00ba30:0152472b 0x152472b
9d00ba34:ffff4653 sdc3$31,18003(ra)
9d00ba38:ffff4f4e sdc3$31,20302(ra)
9d00ba3c:00ffffff 0xffffff

Disassembly of section .text.setIntEnable:

9d00ba40 <L0>:
uint32_t setIntEnable(int irq)
{
p32_regset *iec;
uint32_tst;

iec = ((p32_regset *)&IEC0) + (irq / 32);
9d00ba40:2482001f addiuv0,a0,31
9d00ba44:28830000 sltiv1,a0,0
9d00ba48:0083100a movzv0,a0,v1
9d00ba4c:00021143 srav0,v0,0x5
9d00ba50:00021100 sllv0,v0,0x4
9d00ba54:3c03bf81 luiv1,0xbf81
9d00ba58:246300c0 addiuv1,v1,192
9d00ba5c:00621821 adduv1,v1,v0
st = iec->reg;
9d00ba60:8c620000 lwv0,0(v1)
iec->set = 1 << (irq % 32);
9d00ba64:24050020 lia1,32
9d00ba68:0085001a divzero,a0,a1
9d00ba6c:00a001f4 teqa1,zero,0x7
9d00ba70:00003010 mfhia2
9d00ba74:24040001 lia0,1

9d00ba78 <.LVL21>:
9d00ba78:00c42004 sllva0,a0,a2
9d00ba7c:ac640008 swa0,8(v1)
return st;
}
9d00ba80:03e00008 jrra
9d00ba84:00000000 nop

Disassembly of section .text._ZNKSt9type_infoeqERKS_.isra.0:

9d00ba88 <.text._ZNKSt9type_infoeqERKS_.isra.0>:
9d00ba88:1085000d beqa0,a1,9d00bac0 <.LFE15+0x38>
9d00ba8c:00000000 nop
9d00ba90:80830000 lbv1,0(a0)
9d00ba94:2402002a liv0,42
9d00ba98:1062000b beqv1,v0,9d00bac8 <.LFE15+0x40>
9d00ba9c:00000000 nop
9d00baa0:27bdffe8 addiusp,sp,-24
9d00baa4:afbf0014 swra,20(sp)
9d00baa8:0f402d45 jal9d00b514 <.LFE178>
9d00baac:00000000 nop
9d00bab0:2c420001 sltiuv0,v0,1
9d00bab4:8fbf0014 lwra,20(sp)
9d00bab8:03e00008 jrra
9d00babc:27bd0018 addiusp,sp,24
9d00bac0:03e00008 jrra
9d00bac4:24020001 liv0,1
9d00bac8:03e00008 jrra
9d00bacc:00001021 movev0,zero
9d00bad0:1085000d beqa0,a1,9d00bb08 <.LFE15+0x80>
9d00bad4:00000000 nop
9d00bad8:80830000 lbv1,0(a0)
9d00badc:2402002a liv0,42
9d00bae0:1062000b beqv1,v0,9d00bb10 <.LFE15+0x88>
9d00bae4:00000000 nop
9d00bae8:27bdffe8 addiusp,sp,-24
9d00baec:afbf0014 swra,20(sp)
9d00baf0:0f402d45 jal9d00b514 <.LFE178>
9d00baf4:00000000 nop
9d00baf8:2c420001 sltiuv0,v0,1
9d00bafc:8fbf0014 lwra,20(sp)
9d00bb00:03e00008 jrra
9d00bb04:27bd0018 addiusp,sp,24
9d00bb08:03e00008 jrra
9d00bb0c:24020001 liv0,1
9d00bb10:03e00008 jrra
9d00bb14:00001021 movev0,zero

Disassembly of section .text:

9d00bb18 <__do_global_ctors_aux>:
9d00bb18:27bdffe0 addiusp,sp,-32
9d00bb1c:afbf001c swra,28(sp)
9d00bb20:afb10018 sws1,24(sp)
9d00bb24:afb00014 sws0,20(sp)
9d00bb28:3c109d00 luis0,0x9d00
9d00bb2c:2610160c addius0,s0,5644
9d00bb30:2411ffff lis1,-1
9d00bb34:8e020000 lwv0,0(s0)
9d00bb38:10510005 beqv0,s1,9d00bb50 <__do_global_ctors_aux+0x38>
9d00bb3c:8fbf001c lwra,28(sp)
9d00bb40:0040f809 jalrv0
9d00bb44:2610fffc addius0,s0,-4
9d00bb48:0b402ece j9d00bb38 <__do_global_ctors_aux+0x20>
9d00bb4c:8e020000 lwv0,0(s0)
9d00bb50:8fb10018 lws1,24(sp)
9d00bb54:8fb00014 lws0,20(sp)
9d00bb58:03e00008 jrra
9d00bb5c:27bd0020 addiusp,sp,32

Disassembly of section .text._bootstrap_exception_handler:

9d00bb60 <_bootstrap_exception_handler>:
9d00bb60:3c020000 luiv0,0x0
9d00bb64:24420001 addiuv0,v0,1
9d00bb68:10400005 beqzv0,9d00bb80 <_bootstrap_exception_handler+0x20>
9d00bb6c:3c020000 luiv0,0x0
9d00bb70:24420000 addiuv0,v0,0
9d00bb74:10400003 beqzv0,9d00bb84 <_bootstrap_exception_handler+0x24>
9d00bb78:3c020000 luiv0,0x0
9d00bb7c:7000003f sdbbp
9d00bb80:3c020000 luiv0,0x0
9d00bb84:24420000 addiuv0,v0,0
9d00bb88:10400005 beqzv0,9d00bba0 <_bootstrap_exception_handler+0x40>
9d00bb8c:00000000 nop
9d00bb90:27bdffe8 addiusp,sp,-24
9d00bb94:afbf0014 swra,20(sp)
9d00bb98:0040f809 jalrv0
9d00bb9c:00000000 nop
9d00bba0:0b402ee8 j9d00bba0 <_bootstrap_exception_handler+0x40>
9d00bba4:00000000 nop

Disassembly of section .text.millisecondCoreTimerService:

9d00bba8 <millisecondCoreTimerService>:
*/
uint32_t millisecondCoreTimerService(uint32_t curTime)
{
    static uint32_t nextInt = 0;
    uint32_t relWait = 0;
    uint32_t relTime = curTime - nextInt;
9d00bba8:8f858514 lwa1,-31468(gp)
9d00bbac:00852023 subua0,a0,a1

9d00bbb0 <.LVL77>:
    uint32_t millisLocal = gTimer0_millis;  // defeat volatility
9d00bbb0:8f8384f0 lwv1,-31504(gp)
**
*/
uint32_t millisecondCoreTimerService(uint32_t curTime)
{
    static uint32_t nextInt = 0;
    uint32_t relWait = 0;
9d00bbb4:00001021 movev0,zero

    // catch-up up to current time; we may have fallen behind due to interrupts being diabled.
    while(relWait <= relTime)
    {
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
9d00bbb8:3c060001 luia2,0x1
9d00bbbc:34c686a0 oria2,a2,0x86a0

9d00bbc0 <.LVL79>:
9d00bbc0:00461021 adduv0,v0,a2
    uint32_t relWait = 0;
    uint32_t relTime = curTime - nextInt;
    uint32_t millisLocal = gTimer0_millis;  // defeat volatility

    // catch-up up to current time; we may have fallen behind due to interrupts being diabled.
    while(relWait <= relTime)
9d00bbc4:0082382b sltua3,a0,v0
9d00bbc8:10e0fffd beqza3,9d00bbc0 <.LVL79>
9d00bbcc:24630001 addiuv1,v1,1
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
     }

    // set when we want to be called again
    nextInt += relWait;                     // calculate the absolute interrupt time we want.
9d00bbd0:00451021 adduv0,v0,a1

9d00bbd4 <.LVL81>:
9d00bbd4:af828514 swv0,-31468(gp)

    // we want to sync gCore_timer_last_val with the last millisecond "count" value
    // curTime may not be exactly on a millisecond boundary, but we know where that is
    // we know nextInt is our next millisecond boundary, so less 1 CORE_TICK_RATE will be our last one
    // gCore_timer_last_val = curTime;         // This is the original bogus code
    gCore_timer_last_val =  nextInt - CORE_TICK_RATE;
9d00bbd8:00463023 subua2,v0,a2
9d00bbdc:af8684f4 swa2,-31500(gp)

    // update the global millisecond counter.
    gTimer0_millis = millisLocal;           // Total number of ms
9d00bbe0:af8384f0 swv1,-31504(gp)

    return(nextInt);
}
9d00bbe4:03e00008 jrra
9d00bbe8:00000000 nop

Disassembly of section .text._ZN7SSD128910fillScreenEt:

9d00bbec <_ZN7SSD128910fillScreenEt>:

setAddrWindow(x,y,x,y);
data(color);
}

void SSD1289::fillScreen(color_t color) {
9d00bbec:27bdffe0 addiusp,sp,-32
9d00bbf0:afbf001c swra,28(sp)
9d00bbf4:30a5ffff andia1,a1,0xffff
fillRectangle(0, 0,  _width, _height, color);
9d00bbf8:8c830000 lwv1,0(a0)
9d00bbfc:8c870018 lwa3,24(a0)
9d00bc00:8c82001c lwv0,28(a0)
9d00bc04:afa20010 swv0,16(sp)
9d00bc08:afa50014 swa1,20(sp)
9d00bc0c:8c62007c lwv0,124(v1)
9d00bc10:00002821 movea1,zero

9d00bc14 <.LVL187>:
9d00bc14:0040f809 jalrv0
9d00bc18:00003021 movea2,zero

9d00bc1c <.LVL188>:
}
9d00bc1c:8fbf001c lwra,28(sp)
9d00bc20:03e00008 jrra
9d00bc24:27bd0020 addiusp,sp,32

Disassembly of section .text.setIntVector:

9d00bc28 <setIntVector>:
**      work. However, this may overwrite a previeously installed ISR.
**
**      This does not change the priority level of the interrupt routine
*/
isrFunc setIntVector(int vec, isrFunc func)
{
9d00bc28:27bdffe8 addiusp,sp,-24
9d00bc2c:afbf0014 swra,20(sp)
    isrFunc isrAddr = getIntVector(vec);
9d00bc30:0f403023 jal9d00c08c <.LFE170>
9d00bc34:00801821 movev1,a0

9d00bc38 <.LVL3>:
 
    ((uint32_t *) &OFF000)[vec] = (uint32_t) func - (uint32_t) &_ebase_address;
9d00bc38:00031880 sllv1,v1,0x2
9d00bc3c:3c04bf81 luia0,0xbf81
9d00bc40:24840540 addiua0,a0,1344
9d00bc44:00831821 adduv1,a0,v1
9d00bc48:3c049d00 luia0,0x9d00
9d00bc4c:24840000 addiua0,a0,0
9d00bc50:00a42823 subua1,a1,a0
9d00bc54:ac650000 swa1,0(v1)

    return(isrAddr);
}
9d00bc58:8fbf0014 lwra,20(sp)
9d00bc5c:03e00008 jrra
9d00bc60:27bd0018 addiusp,sp,24

Disassembly of section .text._Z3clst:

9d00bc64 <_Z3clst>:
setBorderSingle(Color::Black);
cls(Color::Black);
9d00bc64:27bdffe0 addiusp,sp,-32
9d00bc68:afbf001c swra,28(sp)
9d00bc6c:3084ffff andia0,a0,0xffff
delay(1000);
9d00bc70:240200c0 liv0,192
9d00bc74:afa20010 swv0,16(sp)
9d00bc78:afa40014 swa0,20(sp)
9d00bc7c:27848338 addiua0,gp,-31944

9d00bc80 <.LVL100>:
9d00bc80:24050020 lia1,32
9d00bc84:24060018 lia2,24
9d00bc88:0f4027e4 jal9d009f90 <.LFE171>
9d00bc8c:24070100 lia3,256

9d00bc90 <.LVL101>:
setBorderSingle(Color::White);
9d00bc90:8fbf001c lwra,28(sp)
9d00bc94:03e00008 jrra
9d00bc98:27bd0020 addiusp,sp,32

Disassembly of section .text._ZN11DisplayCore12getRectangleEiiiiPt:

9d00bc9c <_ZN11DisplayCore12getRectangleEiiiiPt>:
 */
color_t DisplayCore::colorAt(int x, int y) {
    return bgColor;
}

void DisplayCore::getRectangle(int x, int y, int w, int h, color_t *buf) {
9d00bc9c:8fa30014 lwv1,20(sp)

9d00bca0 <.LBB2>:
    for (int i = 0; i < w*h; i++) {
9d00bca0:8fa20010 lwv0,16(sp)
9d00bca4:70e23802 mula3,a3,v0

9d00bca8 <.LVL3>:
9d00bca8:00001021 movev0,zero

9d00bcac <.LVL4>:
9d00bcac:0047282a slta1,v0,a3
9d00bcb0:10a00006 beqza1,9d00bccc <.LVL6>
9d00bcb4:00022840 slla1,v0,0x1
        buf[i] = bgColor;
9d00bcb8:948600d8 lhua2,216(a0)
9d00bcbc:00652821 addua1,v1,a1
9d00bcc0:a4a60000 sha2,0(a1)

9d00bcc4 <.LBE2>:
color_t DisplayCore::colorAt(int x, int y) {
    return bgColor;
}

void DisplayCore::getRectangle(int x, int y, int w, int h, color_t *buf) {
    for (int i = 0; i < w*h; i++) {
9d00bcc4:0b402f2b j9d00bcac <.LVL4>
9d00bcc8:24420001 addiuv0,v0,1

9d00bccc <.LVL6>:
        buf[i] = bgColor;
    }
}
9d00bccc:03e00008 jrra
9d00bcd0:00000000 nop

Disassembly of section .text._configSystem:

9d00bcd4 <_configSystem>:
**sets the number of flash wait states and enables predictive
**prefetch for both cached and non-cached memory segments.
*/

void __attribute__ ((nomips16)) _configSystem(uint32_t clk)
{
9d00bcd4:27bdffe8 addiusp,sp,-24
9d00bcd8:afbf0014 swra,20(sp)
9d00bcdc:afb00010 sws0,16(sp)

9d00bce0 <.LBB10>:

uint32_t __attribute__((nomips16)) disableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("di    %0" : "=r"(status));
9d00bce0:41706000 dis0

9d00bce4 <.LBE10>:
*/
#if defined(__PIC32MZXX__)

// If alternate ADC implementation
#if defined(__ALT_ADC_IMPL__)
    initADC();
9d00bce4:0f4012e0 jal9d004b80 <.LFE184>
9d00bce8:00000000 nop

9d00bcec <.LVL50>:

#elif defined(_PRECON_PREFEN_POSITION)
  // 
  // Set wait states and enable prefetch buffer 
  // 
  PRECON = 0u 
9d00bcec:24030032 liv1,50
9d00bcf0:3c02bf8e luiv0,0xbf8e
9d00bcf4:ac430000 swv1,0(v0)


#endif


restoreInterrupts(stInt);
9d00bcf8:02002021 movea0,s0
}
9d00bcfc:8fbf0014 lwra,20(sp)
9d00bd00:8fb00010 lws0,16(sp)


#endif


restoreInterrupts(stInt);
9d00bd04:0b403042 j9d00c108 <.LFE171>
9d00bd08:27bd0018 addiusp,sp,24

Disassembly of section .text._enableMultiVectorInterrupts:

9d00bd0c <_enableMultiVectorInterrupts>:
    unsigned int val;

    /* Set the CP0 bit so that interrupt exceptions use the
** special interrupt vector and not the general exception vector.
*/
    asm volatile("mfc0   %0,$13" : "=r"(val));
9d00bd0c:40036800 mfc0v1,c0_cause

9d00bd10 <.LVL52>:
    val |= 0x00800000;
9d00bd10:3c020080 luiv0,0x80
9d00bd14:00621025 orv0,v1,v0

9d00bd18 <.LVL53>:
    asm volatile("mtc0   %0,$13" : "+r"(val));
9d00bd18:40826800 mtc0v0,c0_cause

9d00bd1c <.LVL54>:

/* Turn on multi-vectored interrupts.
*/
    INTCONSET = _INTCON_MVEC_MASK;
9d00bd1c:24031000 liv1,4096
9d00bd20:3c02bf81 luiv0,0xbf81
9d00bd24:ac430008 swv1,8(v0)

// set up some default shadow registers for each interrupt priority level
// the shadow register set used is the same as the priority level
#if defined(__PIC32MZXX__)
        PRISS = 0x76543210;
9d00bd28:3c037654 luiv1,0x7654
9d00bd2c:24633210 addiuv1,v1,12816
9d00bd30:3c02bf81 luiv0,0xbf81
9d00bd34:ac430010 swv1,16(v0)

9d00bd38 <.LBB12>:

uint32_t __attribute__((nomips16))  enableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("ei    %0" : "=r"(status));
9d00bd38:41626020 eiv0

9d00bd3c <.LVL56>:
9d00bd3c:03e00008 jrra
9d00bd40:00000000 nop

Disassembly of section .rodata:

9d00bd48 <.rodata>:
9d00bd48:00776f70 tgev1,s7,0x1bd
...
9d00bd54:3ff00000 0x3ff00000
9d00bd58:00000000 nop
9d00bd5c:fff00000 sdc3$16,0(ra)
9d00bd60:e0000000 sczero,0(zero)
9d00bd64:47efffff c10x1efffff
9d00bd68:00000000 nop
9d00bd6c:3fe00000 0x3fe00000
9d00bd70:e0000000 sczero,0(zero)
9d00bd74:c7efffff lwc1$f15,-1(ra)
9d00bd78:00000000 nop
9d00bd7c:7ff00000 exts0,ra,0x0,0x1

Disassembly of section .text.main_entry:

9d00bd80 <_main_entry>:
9d00bd80:3c049d00 luia0,0x9d00
9d00bd84:27bdffe8 addiusp,sp,-24
9d00bd88:248415d0 addiua0,a0,5584
9d00bd8c:10800003 beqza0,9d00bd9c <_main_entry+0x1c>
9d00bd90:afbf0014 swra,20(sp)
9d00bd94:0080f809 jalra0
9d00bd98:00000000 nop
9d00bd9c:30840000 andia0,a0,0x0
9d00bda0:30a50000 andia1,a1,0x0
9d00bda4:0f402f86 jal9d00be18 <main>
9d00bda8:00000000 nop
9d00bdac:1000ffff b9d00bdac <_main_entry+0x2c>
9d00bdb0:00000000 nop

Disassembly of section .text._ZN11DisplayCore10openWindowEiiii:

9d00bdb4 <_ZN11DisplayCore10openWindowEiiii>:
 *  Example:
 *  
 *      tft.openWindow(0, 0, 100, 100);
 */
void DisplayCore::openWindow(int x0, int y0, int x1, int y1) {
    winx0 = x0;
9d00bdb4:ac8500c0 swa1,192(a0)
    winy0 = y0;
9d00bdb8:ac8600c4 swa2,196(a0)
    winx1 = x0 + x1;
9d00bdbc:00a73821 addua3,a1,a3

9d00bdc0 <.LVL1>:
9d00bdc0:ac8700c8 swa3,200(a0)
    winy1 = y0 + y1;
9d00bdc4:8fa30010 lwv1,16(sp)
9d00bdc8:00c33021 addua2,a2,v1

9d00bdcc <.LVL2>:
9d00bdcc:ac8600cc swa2,204(a0)
    winpx = 0;
9d00bdd0:ac8000d0 swzero,208(a0)
    winpy = 0;
9d00bdd4:ac8000d4 swzero,212(a0)
    startBuffer();
9d00bdd8:8c820000 lwv0,0(a0)
9d00bddc:8c5900c4 lwt9,196(v0)
9d00bde0:03200008 jrt9
9d00bde4:00000000 nop

Disassembly of section .rodata.port_to_tris_PGM.port_to_tris_PGM:

9d00bde8 <port_to_tris_PGM>:
9d00bde8:00000000 bf860010 bf860110 bf860210     ................
9d00bdf8:bf860310 bf860410 bf860510 bf860610     ................
...

Disassembly of section .text.main:

9d00be18 <main>:
}
#endif

//************************************************************************
int main(void)
{
9d00be18:27bdffe8 addiusp,sp,-24
9d00be1c:afbf0014 swra,20(sp)
init();
9d00be20:0f402996 jal9d00a658 <.LFE191>
9d00be24:00000000 nop

9d00be28 <.LVL0>:

setup();
9d00be28:0f402d2c jal9d00b4b0 <.LFE102>
9d00be2c:00000000 nop

9d00be30 <.LVL1>:

while (1)
{
_scheduleTask();
9d00be30:0f401e55 jal9d007954 <.LFE173>
9d00be34:00000000 nop

9d00be38 <.LVL2>:
loop();
9d00be38:0f4014d1 jal9d005344 <.LFE174>
9d00be3c:00000000 nop

9d00be40 <.LVL3>:
9d00be40:0b402f8c j9d00be30 <.LVL1>
9d00be44:00000000 nop

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD0Ev:

9d00be48 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
9d00be48:27bdffe8 addiusp,sp,-24
9d00be4c:afbf0014 swra,20(sp)
9d00be50:afb00010 sws0,16(sp)
9d00be54:0f402fe5 jal9d00bf94 <.LFE17>
9d00be58:00808021 moves0,a0

9d00be5c <.LVL3>:
9d00be5c:0f402fc8 jal9d00bf20 <.LFE20>
9d00be60:02002021 movea0,s0

9d00be64 <.LVL4>:
9d00be64:8fbf0014 lwra,20(sp)
9d00be68:8fb00010 lws0,16(sp)

9d00be6c <.LVL5>:
9d00be6c:03e00008 jrra
9d00be70:27bd0018 addiusp,sp,24

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD0Ev:

9d00be74 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
9d00be74:27bdffe8 addiusp,sp,-24
9d00be78:afbf0014 swra,20(sp)
9d00be7c:afb00010 sws0,16(sp)
9d00be80:0f402fee jal9d00bfb8 <.LFE98>
9d00be84:00808021 moves0,a0

9d00be88 <.LVL3>:
9d00be88:0f402fc8 jal9d00bf20 <.LFE20>
9d00be8c:02002021 movea0,s0

9d00be90 <.LVL4>:
9d00be90:8fbf0014 lwra,20(sp)
9d00be94:8fb00010 lws0,16(sp)

9d00be98 <.LVL5>:
9d00be98:03e00008 jrra
9d00be9c:27bd0018 addiusp,sp,24

Disassembly of section .text.memcpy:

9d00bea0 <.text.memcpy>:
9d00bea0:00801021 movev0,a0
9d00bea4:00001821 movev1,zero
9d00bea8:10660006 beqv1,a2,9d00bec4 <.LFE100+0x24>
9d00beac:00a32021 addua0,a1,v1
9d00beb0:80870000 lba3,0(a0)
9d00beb4:00432021 addua0,v0,v1
9d00beb8:a0870000 sba3,0(a0)
9d00bebc:0b402faa j9d00bea8 <.LFE100+0x8>
9d00bec0:24630001 addiuv1,v1,1
9d00bec4:03e00008 jrra
9d00bec8:00000000 nop

Disassembly of section .text._stub_sbd_memlayout:

9d00becc <_stub_sbd_memlayout>:
9d00becc:3c038000 luiv1,0x8000
9d00bed0:24622370 addiuv0,v1,9072
9d00bed4:24040001 lia0,1
9d00bed8:ac440008 swa0,8(v0)
9d00bedc:3c048000 luia0,0x8000
9d00bee0:248423b8 addiua0,a0,9144
9d00bee4:ac642370 swa0,9072(v1)
9d00bee8:3c030000 luiv1,0x0
9d00beec:24630800 addiuv1,v1,2048
9d00bef0:03e00008 jrra
9d00bef4:ac430004 swv1,4(v0)

Disassembly of section .text.getPeripheralClock:

9d00bef8 <getPeripheralClock>:
uint32_tclkPb;

    clkPb = F_CPU;

#if defined(__PIC32MZXX__)
    clkPb = (F_CPU / (PB2DIVbits.PBDIV + 1));      // TODO: set ALL PBDIV to 40 MHZ     
9d00bef8:3c02bf80 luiv0,0xbf80
9d00befc:8c431310 lwv1,4880(v0)
9d00bf00:3063007f andiv1,v1,0x7f

9d00bf04 <.LVL43>:
9d00bf04:24630001 addiuv1,v1,1
9d00bf08:3c020beb luiv0,0xbeb
9d00bf0c:3442c200 oriv0,v0,0xc200
#else
    clkPb >>= OSCCONbits.PBDIV;
#endif

    return clkPb;
}
9d00bf10:0043001b divuzero,v0,v1
9d00bf14:006001f4 teqv1,zero,0x7
9d00bf18:03e00008 jrra
9d00bf1c:00001012 mflov0

Disassembly of section .text._ZdlPv:

9d00bf20 <_ZdlPv>:
9d00bf20:10800007 beqza0,9d00bf40 <.LVL1+0x8>
9d00bf24:00000000 nop
9d00bf28:27bdffe8 addiusp,sp,-24
9d00bf2c:afbf0014 swra,20(sp)
9d00bf30:0f403000 jal9d00c000 <.LFE100>
9d00bf34:00000000 nop

9d00bf38 <.LVL1>:
9d00bf38:8fbf0014 lwra,20(sp)
9d00bf3c:27bd0018 addiusp,sp,24
9d00bf40:03e00008 jrra
9d00bf44:00000000 nop

Disassembly of section .text.copysign:

9d00bf48 <copysign>:
9d00bf48:44656000 mfhc1a1,$f12
9d00bf4c:44677000 mfhc1a3,$f14
9d00bf50:44026000 mfc1v0,$f12
9d00bf54:3c068000 luia2,0x8000
9d00bf58:00c73024 anda2,a2,a3
9d00bf5c:7ca4f000 exta0,a1,0x0,0x1f
9d00bf60:00c41825 orv1,a2,a0
9d00bf64:44820000 mtc1v0,$f0
9d00bf68:03e00008 jrra
9d00bf6c:44e30000 mthc1v1,$f0

Disassembly of section .text._initTaskManager:

9d00bf70 <_initTaskManager>:
**Description:
**Initialize the periodic task manager.
*/

void
_initTaskManager() {
9d00bf70:27828518 addiuv0,gp,-31464
9d00bf74:244300a0 addiuv1,v0,160

9d00bf78 <.LVL52>:
intid;

for (id = 0; id < NUM_TASKS; id++) {
rgtaskTable[id].pfnTask = 0;
9d00bf78:ac400000 swzero,0(v0)
9d00bf7c:24420014 addiuv0,v0,20

void
_initTaskManager() {
intid;

for (id = 0; id < NUM_TASKS; id++) {
9d00bf80:5443fffe bnelv0,v1,9d00bf7c <.LVL52+0x4>
9d00bf84:ac400000 swzero,0(v0)
rgtaskTable[id].pfnTask = 0;
}

tmsLastEvent = 0;
9d00bf88:af8085c0 swzero,-31296(gp)
tmsNextEvent = 0;
9d00bf8c:03e00008 jrra
9d00bf90:af8085bc swzero,-31300(gp)

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD2Ev:

9d00bf94 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
9d00bf94:27bdffe8 addiusp,sp,-24
9d00bf98:afbf0014 swra,20(sp)
9d00bf9c:3c029d00 luiv0,0x9d00
9d00bfa0:24421898 addiuv0,v0,6296
9d00bfa4:0f4030a4 jal9d00c290 <.LFE25>
9d00bfa8:ac820000 swv0,0(a0)

9d00bfac <.LVL1>:
9d00bfac:8fbf0014 lwra,20(sp)
9d00bfb0:03e00008 jrra
9d00bfb4:27bd0018 addiusp,sp,24

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD2Ev:

9d00bfb8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
9d00bfb8:27bdffe8 addiusp,sp,-24
9d00bfbc:afbf0014 swra,20(sp)
9d00bfc0:3c029d00 luiv0,0x9d00
9d00bfc4:244218c8 addiuv0,v0,6344
9d00bfc8:0f402fe5 jal9d00bf94 <.LFE17>
9d00bfcc:ac820000 swv0,0(a0)

9d00bfd0 <.LVL1>:
9d00bfd0:8fbf0014 lwra,20(sp)
9d00bfd4:03e00008 jrra
9d00bfd8:27bd0018 addiusp,sp,24

Disassembly of section .text._ZNSt9type_infoD0Ev:

9d00bfdc <L0>:
9d00bfdc:27bdffe8 addiusp,sp,-24
9d00bfe0:afbf0014 swra,20(sp)

9d00bfe4 <.LBB6>:
9d00bfe4:3c029d00 luiv0,0x9d00
9d00bfe8:244218f8 addiuv0,v0,6392

9d00bfec <.LBE6>:
9d00bfec:0f402fc8 jal9d00bf20 <.LFE20>
9d00bff0:ac820000 swv0,0(a0)

9d00bff4 <.LVL3>:
9d00bff4:8fbf0014 lwra,20(sp)
9d00bff8:03e00008 jrra
9d00bffc:27bd0018 addiusp,sp,24

Disassembly of section .text.free:

9d00c000 <.text.free>:
9d00c000:27bdffe8 addiusp,sp,-24
9d00c004:afbf0014 swra,20(sp)
9d00c008:00802821 movea1,a0
9d00c00c:3c028000 luiv0,0x8000
9d00c010:0f40196d jal9d0065b4 <.LBE4>
9d00c014:8c442390 lwa0,9104(v0)
9d00c018:8fbf0014 lwra,20(sp)
9d00c01c:03e00008 jrra
9d00c020:27bd0018 addiusp,sp,24

Disassembly of section .text.raise:

9d00c024 <raise>:
9d00c024:27bdffe8 addiusp,sp,-24
9d00c028:afbf0014 swra,20(sp)
9d00c02c:00802821 movea1,a0
9d00c030:3c028000 luiv0,0x8000
9d00c034:0f4029c2 jal9d00a708 <.LFE10>
9d00c038:8c442390 lwa0,9104(v0)
9d00c03c:8fbf0014 lwra,20(sp)
9d00c040:03e00008 jrra
9d00c044:27bd0018 addiusp,sp,24

Disassembly of section .text.memset:

9d00c048 <memset>:
9d00c048:00801021 movev0,a0
9d00c04c:00863021 addua2,a0,a2
9d00c050:00801821 movev1,a0
9d00c054:10660003 beqv1,a2,9d00c064 <memset+0x1c>
9d00c058:24630001 addiuv1,v1,1
9d00c05c:0b403015 j9d00c054 <memset+0xc>
9d00c060:a065ffff sba1,-1(v1)
9d00c064:03e00008 jrra
9d00c068:00000000 nop

Disassembly of section .text._ZN11DisplayCore8color565Ehhh:

9d00c06c <_ZN11DisplayCore8color565Ehhh>:
 *  Example:
 *
 *      unsigned int yellow = tft.color565(255, 255, 0);
 */
color_t DisplayCore::color565(uint8_t r, uint8_t g, uint8_t b) {
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
9d00c06c:30c600fc andia2,a2,0xfc

9d00c070 <.LVL1>:
9d00c070:000630c0 slla2,a2,0x3
9d00c074:7ce720c0 exta3,a3,0x3,0x5

9d00c078 <.LVL2>:
9d00c078:00c73025 ora2,a2,a3
9d00c07c:30a500f8 andia1,a1,0xf8

9d00c080 <.LVL3>:
9d00c080:00051200 sllv0,a1,0x8
}
9d00c084:03e00008 jrra
9d00c088:00c21025 orv0,a2,v0

Disassembly of section .text.getIntVector:

9d00c08c <getIntVector>:
**          changeing anything.
**
*/
isrFunc getIntVector(int vec)
{
    uint32_t isrAddr = ((uint32_t *) &OFF000)[vec] + (uint32_t) &_ebase_address;
9d00c08c:00042080 slla0,a0,0x2

9d00c090 <.LVL1>:
9d00c090:3c02bf81 luiv0,0xbf81
9d00c094:24420540 addiuv0,v0,1344
9d00c098:7c44200a lwxa0,a0(v0)
    return((isrFunc) isrAddr);
}
9d00c09c:3c029d00 luiv0,0x9d00
9d00c0a0:24420000 addiuv0,v0,0
9d00c0a4:03e00008 jrra
9d00c0a8:00441021 adduv0,v0,a0

Disassembly of section .rodata:

9d00c0b0 <.rodata>:
9d00c0b0:00000000 nop
9d00c0b4:43500000 c00x1500000
9d00c0b8:c2f8f359 llt8,-3239(s7)
9d00c0bc:01a56e1f 0x1a56e1f
9d00c0c0:8800759c lwlzero,30108(zero)
9d00c0c4:7e37e43c 0x7e37e43c
9d00c0c8:00000000 nop
9d00c0cc:3c900000 0x3c900000

Disassembly of section .text._ZN7SSD128910openWindowEiiii:

9d00c0d0 <L0>:
void SSD1289::invertDisplay(boolean i) {
//command(i ? SSD1289_INVON : SSD1289_INVOFF);
}

void SSD1289::openWindow(int x0, int y0, int x1, int y1) {
    setAddrWindow(x0, y0, x0 + x1 - 1, y0 + y1 - 1);
9d00c0d0:00a73821 addua3,a1,a3

9d00c0d4 <.LVL230>:
9d00c0d4:8fa20010 lwv0,16(sp)
9d00c0d8:00c21021 adduv0,a2,v0
9d00c0dc:2442ffff addiuv0,v0,-1
9d00c0e0:afa20010 swv0,16(sp)

9d00c0e4 <.LVL231>:
9d00c0e4:0b4021ce j9d008738 <.LFE192>
9d00c0e8:24e7ffff addiua3,a3,-1

Disassembly of section .text._ZN11DisplayCore12stringHeightEPKc:

9d00c0ec <_ZN11DisplayCore12stringHeightEPKc>:
 *  Example:
 *
 *      int height = stringHeight("The quick brown fox jumped over the lazy dog");
 */
int DisplayCore::stringHeight(const char *text) {
    if (font == NULL) {
9d00c0ec:8c8200bc lwv0,188(a0)
9d00c0f0:10400003 beqzv0,9d00c100 <.LBE9>
9d00c0f4:00000000 nop

9d00c0f8 <.LVL14>:
        return 0;
    }
    FontHeader *header = (FontHeader *)font;

    return header->linesPerCharacter;
9d00c0f8:03e00008 jrra
9d00c0fc:90420000 lbuv0,0(v0)

9d00c100 <.LBE9>:
}
9d00c100:03e00008 jrra
9d00c104:00001021 movev0,zero

Disassembly of section .text.restoreInterrupts:

9d00c108 <L0>:
**enableInterrupts() or disableInterrupts().
*/

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
9d00c108:30840001 andia0,a0,0x1

9d00c10c <.LVL11>:
9d00c10c:10800003 beqza0,9d00c11c <.LVL11+0x10>
9d00c110:00000000 nop
{
        asm volatile("ei");
9d00c114:03e00008 jrra
9d00c118:41606020 ei
}
    else
{
        asm volatile("di");
9d00c11c:03e00008 jrra
9d00c120:41606000 di

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_:

9d00c124 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
9d00c124:8fa20010 lwv0,16(sp)
9d00c128:00461026 xorv0,v0,a2
9d00c12c:24030006 liv1,6
9d00c130:24040001 lia0,1

9d00c134 <.LVL23>:
9d00c134:0082180b movnv1,a0,v0
9d00c138:03e00008 jrra
9d00c13c:00601021 movev0,v1

Disassembly of section .text._getpid_r:

9d00c140 <_getpid_r>:
9d00c140:27bdffe8 addiusp,sp,-24
9d00c144:afbf0014 swra,20(sp)
9d00c148:0f4030fb jal9d00c3ec <getpid>
9d00c14c:00000000 nop
9d00c150:8fbf0014 lwra,20(sp)
9d00c154:03e00008 jrra
9d00c158:27bd0018 addiusp,sp,24

Disassembly of section .text._ZN10__cxxabiv111__terminateEPFvvE:

9d00c15c <_ZN10__cxxabiv111__terminateEPFvvE>:
9d00c15c:27bdffe8 addiusp,sp,-24
9d00c160:afbf0014 swra,20(sp)
9d00c164:0080f809 jalra0
9d00c168:00000000 nop

9d00c16c <.LVL1>:
9d00c16c:0f403069 jal9d00c1a4 <abort>
9d00c170:00000000 nop

Disassembly of section .text.fabs:

9d00c174 <fabs>:
9d00c174:44656000 mfhc1a1,$f12
9d00c178:44026000 mfc1v0,$f12
9d00c17c:7ca3f000 extv1,a1,0x0,0x1f
9d00c180:44820000 mtc1v0,$f0
9d00c184:03e00008 jrra
9d00c188:44e30000 mthc1v1,$f0

Disassembly of section .text.finite:

9d00c18c <.text.finite>:
9d00c18c:44636000 mfhc1v1,$f12
9d00c190:7c63f000 extv1,v1,0x0,0x1f
9d00c194:3c028010 luiv0,0x8010
9d00c198:00621021 adduv0,v1,v0
9d00c19c:03e00008 jrra
9d00c1a0:000217c2 srlv0,v0,0x1f

Disassembly of section .text.abort:

9d00c1a4 <abort>:
9d00c1a4:27bdffe8 addiusp,sp,-24
9d00c1a8:afbf0014 swra,20(sp)
9d00c1ac:0f403009 jal9d00c024 <raise>
9d00c1b0:24040006 lia0,6
9d00c1b4:0f4030f7 jal9d00c3dc <_exit>
9d00c1b8:24040001 lia0,1

Disassembly of section .text:

9d00c1bc <_nmi_handler-0x18>:
9d00c1bc:24820001 addiuv0,a0,1
9d00c1c0:90830000 lbuv1,0(a0)
9d00c1c4:1460fffe bnezv1,9d00c1c0 <abort+0x1c>
9d00c1c8:24840001 addiua0,a0,1
9d00c1cc:03e00008 jrra
9d00c1d0:00821023 subuv0,a0,v0

9d00c1d4 <_nmi_handler>:
9d00c1d4:401a6000 mfc0k0,c0_status
9d00c1d8:3c1bffbf luik1,0xffbf
9d00c1dc:377bffff orik1,k1,0xffff
9d00c1e0:035bd024 andk0,k0,k1
9d00c1e4:409a6000 mtc0k0,c0_status
9d00c1e8:42000018 eret

Disassembly of section .text._ZN11DisplayCore9getCursorEh:

9d00c1ec <_ZN11DisplayCore9getCursorEh>:
 *  Example:
 *
 *      int x = tft.getCursor(true);
 *      int y = tft.getCursor(false);
 */
int DisplayCore::getCursor(boolean x) {
9d00c1ec:30a500ff andia1,a1,0xff
    if( x )
        return cursor_x;
9d00c1f0:8c830008 lwv1,8(a0)
    return cursor_y;
9d00c1f4:8c82000c lwv0,12(a0)
}
9d00c1f8:03e00008 jrra
9d00c1fc:0065100b movnv0,v1,a1

Disassembly of section .text._ZN11DisplayCore12setTextColorEtt:

9d00c200 <_ZN11DisplayCore12setTextColorEtt>:
 *
 *  Example:
 *
 *      tft.setTextColor(Color::Red, Color::Blue);
 */
void DisplayCore::setTextColor(color_t fg, color_t bg) {
9d00c200:30c6ffff andia2,a2,0xffff
   textcolor = fg;
9d00c204:a4850012 sha1,18(a0)
   textbgcolor = bg;
9d00c208:a4860014 sha2,20(a0)
    bgColor = bg;
9d00c20c:03e00008 jrra
9d00c210:a48600d8 sha2,216(a0)

Disassembly of section .text._ZN11DisplayCore15invertTextColorEv:

9d00c214 <_ZN11DisplayCore15invertTextColorEv>:
 *  Example:
 *
 *      tft.invertTextColor();
 */
void DisplayCore::invertTextColor( ){
setTextColor( textbgcolor, textcolor );
9d00c214:8c830000 lwv1,0(a0)
9d00c218:8c790054 lwt9,84(v1)
9d00c21c:94850014 lhua1,20(a0)
9d00c220:03200008 jrt9
9d00c224:94860012 lhua2,18(a0)

Disassembly of section .text._ZSt9terminatev:

9d00c228 <_ZSt9terminatev>:
9d00c228:27bdffe8 addiusp,sp,-24
9d00c22c:afbf0014 swra,20(sp)
9d00c230:3c028000 luiv0,0x8000
9d00c234:0f403057 jal9d00c15c <_ZN10__cxxabiv111__terminateEPFvvE>
9d00c238:8c442388 lwa0,9096(v0)

Disassembly of section .text.nan:

9d00c23c <.text.nan>:
9d00c23c:00001021 movev0,zero
9d00c240:3c037ff8 luiv1,0x7ff8
9d00c244:44820000 mtc1v0,$f0
9d00c248:03e00008 jrra
9d00c24c:44e30000 mthc1v1,$f0

Disassembly of section .text._ZN7SSD128910windowDataEt:

9d00c250 <L0>:
}

void SSD1289::windowData(color_t d) {
    data(d);
9d00c250:8c820000 lwv0,0(a0)
9d00c254:8c5900e4 lwt9,228(v0)
9d00c258:03200008 jrt9
9d00c25c:30a5ffff andia1,a1,0xffff

Disassembly of section .rodata:

9d00c260 <.rodata>:
9d00c260:00000000 nop
9d00c264:3ff00000 0x3ff00000
9d00c268:00000000 nop
9d00c26c:40080000 mfc0t0,c0_index

Disassembly of section .text._ZN11DisplayCore11closeWindowEv:

9d00c270 <_ZN11DisplayCore11closeWindowEv>:
 *
 *      tft.closeWindow();
 */

void DisplayCore::closeWindow() {
    endBuffer();
9d00c270:8c820000 lwv0,0(a0)
9d00c274:8c5900c8 lwt9,200(v0)
9d00c278:03200008 jrt9
9d00c27c:00000000 nop

Disassembly of section .text._initCoreTimer:

9d00c280 <_initCoreTimer>:

void __attribute__((nomips16)) _initCoreTimer(uint32_t prd)
{
/* Clear the core timer counter
*/
    asm volatile("mtc0   $0,$9");
9d00c280:40804800 mtc0zero,c0_count

    /* Store the requested value in the compare register
*/
    asm volatile("mtc0   %0,$11" : "+r"(prd));
9d00c284:40845800 mtc0a0,c0_compare

9d00c288 <.LVL58>:
9d00c288:03e00008 jrra
9d00c28c:00000000 nop

Disassembly of section .text._ZNSt9type_infoD2Ev:

9d00c290 <_ZNSt9type_infoD2Ev>:
9d00c290:3c029d00 luiv0,0x9d00
9d00c294:244218f8 addiuv0,v0,6392
9d00c298:03e00008 jrra
9d00c29c:ac820000 swv0,0(a0)

Disassembly of section .text.__cxa_pure_virtual:

9d00c2a0 <__cxa_pure_virtual>:
9d00c2a0:27bdffe8 addiusp,sp,-24
9d00c2a4:afbf0014 swra,20(sp)
9d00c2a8:0f40308a jal9d00c228 <.LFE183>
9d00c2ac:00000000 nop

Disassembly of section .rodata.bp.bp:

9d00c2b0 <bp>:
9d00c2b0:00000000 3ff00000 00000000 3ff80000     .......?.......?

Disassembly of section .rodata.dp_h.dp_h:

9d00c2c0 <dp_h>:
...
9d00c2c8:40000000 3fe2b803                       ...@...?

Disassembly of section .rodata.dp_l.dp_l:

9d00c2d0 <dp_l>:
...
9d00c2d8:43cfd006 3e4cfdeb                       ...C..L>

Disassembly of section .rodata.TWO52.TWO52:

9d00c2e0 <TWO52>:
9d00c2e0:00000000 43300000 00000000 c3300000     ......0C......0.

Disassembly of section .text._ZN11DisplayCore9setCursorEii:

9d00c2f0 <_ZN11DisplayCore9setCursorEii>:
 *  Example:
 *
 *      tft.setCursor(0, 100);
 */
void DisplayCore::setCursor(int x, int y) {
    cursor_x = x;
9d00c2f0:ac850008 swa1,8(a0)
    cursor_y = y;
9d00c2f4:03e00008 jrra
9d00c2f8:ac86000c swa2,12(a0)

Disassembly of section .text.millis:

9d00c2fc <L0>:
uint8_t ppsGlobalLock = false;

//************************************************************************
unsigned long millis()
{
return(gTimer0_millis);
9d00c2fc:8f8284f0 lwv0,-31504(gp)
}
9d00c300:03e00008 jrra
9d00c304:00000000 nop

Disassembly of section .text.disableInterrupts:

9d00c308 <disableInterrupts>:

uint32_t __attribute__((nomips16)) disableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("di    %0" : "=r"(status));
9d00c308:41626000 div0

9d00c30c <.LVL9>:

    return status;
}
9d00c30c:03e00008 jrra
9d00c310:00000000 nop

Disassembly of section .text.readCoreTimer:

9d00c314 <readCoreTimer>:
uint32_t __attribute__((nomips16)) readCoreTimer(void)
{
    uint32_t tmr;

    // Get the value of the core timer count register.
    asm volatile("mfc0   %0, $9" : "=r"(tmr));
9d00c314:40024800 mfc0v0,c0_count

    return tmr;
}
9d00c318:03e00008 jrra
9d00c31c:00000000 nop

Disassembly of section .text.__errno:

9d00c320 <__errno>:
9d00c320:3c028000 luiv0,0x8000
9d00c324:03e00008 jrra
9d00c328:8c422390 lwv0,9104(v0)

Disassembly of section .text._ZN7SSD128913invertDisplayEh:

9d00c32c <_ZN7SSD128913invertDisplayEh>:
            _height = Width;
            break;
    }
}

void SSD1289::invertDisplay(boolean i) {
9d00c32c:03e00008 jrra
9d00c330:00000000 nop

Disassembly of section .text._ZN7SSD128911closeWindowEv:

9d00c334 <_ZN7SSD128911closeWindowEv>:
    for (uint32_t i = 0; i < l; i++) {
        data(d[i]);
    }
}

void SSD1289::closeWindow() {
9d00c334:03e00008 jrra
9d00c338:00000000 nop

Disassembly of section .text._ZN11DisplayCore8getWidthEv:

9d00c33c <_ZN11DisplayCore8getWidthEv>:
#endif

int DisplayCore::getWidth() {
    return _width;
}
9d00c33c:03e00008 jrra
9d00c340:8c820018 lwv0,24(a0)

Disassembly of section .text._ZN11DisplayCore9getHeightEv:

9d00c344 <_ZN11DisplayCore9getHeightEv>:

int DisplayCore::getHeight() {
    return _height;
}
9d00c344:03e00008 jrra
9d00c348:8c82001c lwv0,28(a0)

Disassembly of section .text._ZN11DisplayCore7colorAtEii:

9d00c34c <_ZN11DisplayCore7colorAtEii>:
 *
 *      unsigned int color = tft.colorAt(100, 100);
 */
color_t DisplayCore::colorAt(int x, int y) {
    return bgColor;
}
9d00c34c:03e00008 jrra
9d00c350:948200d8 lhuv0,216(a0)

Disassembly of section .text._ZN11DisplayCore10setCursorXEi:

9d00c354 <_ZN11DisplayCore10setCursorXEi>:
 *  Example:
 *
 *      tft.setCursorX(100);
 */
void DisplayCore::setCursorX(int x) {
    cursor_x = x;
9d00c354:03e00008 jrra
9d00c358:ac850008 swa1,8(a0)

Disassembly of section .text._ZN11DisplayCore10setCursorYEi:

9d00c35c <L0>:
 *  Example:
 *
 *      tft.setCursorY(100);
 */
void DisplayCore::setCursorY(int y) {
    cursor_y = y;
9d00c35c:03e00008 jrra
9d00c360:ac85000c swa1,12(a0)

Disassembly of section .text._ZN11DisplayCore10getCursorXEv:

9d00c364 <_ZN11DisplayCore10getCursorXEv>:
 *
 *      int x = tft.getCursorX();
 */
int DisplayCore::getCursorX() {
    return cursor_x;
}
9d00c364:03e00008 jrra
9d00c368:8c820008 lwv0,8(a0)

Disassembly of section .text._ZN11DisplayCore10getCursorYEv:

9d00c36c <_ZN11DisplayCore10getCursorYEv>:
 *
 *      int y = tft.getCursorY();
 */
int DisplayCore::getCursorY() {
    return cursor_y;
}
9d00c36c:03e00008 jrra
9d00c370:8c82000c lwv0,12(a0)

Disassembly of section .text._ZN11DisplayCore12setTextColorEt:

9d00c374 <_ZN11DisplayCore12setTextColorEt>:
 *  Example:
 *
 *      tft.setTextColor(Color::Magenta);
 */
void DisplayCore::setTextColor(color_t c) {
    textcolor = c;
9d00c374:03e00008 jrra
9d00c378:a4850012 sha1,18(a0)

Disassembly of section .text._ZN11DisplayCore11setTextWrapEh:

9d00c37c <_ZN11DisplayCore11setTextWrapEh>:
 *  Example:
 * 
 *      tft.setTextWrap(false);
 */
void DisplayCore::setTextWrap(boolean w) {
  wrap = w;
9d00c37c:03e00008 jrra
9d00c380:a0850010 sba1,16(a0)

Disassembly of section .text._ZN11DisplayCore7setFontEPKh:

9d00c384 <_ZN11DisplayCore7setFontEPKh>:
 *  Example:
 * 
 *      tft.setFont(Fonts::Ubuntu12);
 */
void DisplayCore::setFont(const uint8_t *f) {
    font = f;
9d00c384:03e00008 jrra
9d00c388:ac8500bc swa1,188(a0)

Disassembly of section .text._ZN11DisplayCore12getTextColorEv:

9d00c38c <L0>:
 *
 *      unsigned int color = tft.getTextColor();
 */
color_t DisplayCore::getTextColor() {
    return textcolor;
}
9d00c38c:03e00008 jrra
9d00c390:94820012 lhuv0,18(a0)

Disassembly of section .text._ZN5Print5printEPKc:

9d00c394 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
9d00c394:0b40055e j9d001578 <_ZN5Print5writeEPKc>
9d00c398:00000000 nop

Disassembly of section .text._ZNKSt9type_info14__is_pointer_pEv:

9d00c39c <L0>:
9d00c39c:03e00008 jrra
9d00c3a0:00001021 movev0,zero

Disassembly of section .text._ZNKSt9type_info15__is_function_pEv:

9d00c3a4 <_ZNKSt9type_info15__is_function_pEv>:
9d00c3a4:03e00008 jrra
9d00c3a8:00001021 movev0,zero

Disassembly of section .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:

9d00c3ac <L0>:
9d00c3ac:03e00008 jrra
9d00c3b0:00001021 movev0,zero

Disassembly of section .text.matherr:

9d00c3b4 <matherr>:
9d00c3b4:03e00008 jrra
9d00c3b8:00001021 movev0,zero

Disassembly of section .text.__malloc_lock:

9d00c3bc <.text.__malloc_lock>:
9d00c3bc:03e00008 jrra
9d00c3c0:00000000 nop

Disassembly of section .text.__malloc_unlock:

9d00c3c4 <.text.__malloc_unlock>:
9d00c3c4:03e00008 jrra
9d00c3c8:00000000 nop

Disassembly of section .text._on_reset:

9d00c3cc <_on_reset>:
9d00c3cc:03e00008 jrra
9d00c3d0:00000000 nop

Disassembly of section .text._on_bootstrap:

9d00c3d4 <_on_bootstrap>:
9d00c3d4:03e00008 jrra
9d00c3d8:00000000 nop

Disassembly of section .text._exit:

9d00c3dc <_exit>:
9d00c3dc:0b4030f7 j9d00c3dc <_exit>
9d00c3e0:00000000 nop

Disassembly of section .text.kill:

9d00c3e4 <kill>:
9d00c3e4:03e00008 jrra
9d00c3e8:00001021 movev0,zero

Disassembly of section .text.getpid:

9d00c3ec <getpid>:
9d00c3ec:03e00008 jrra
9d00c3f0:00001021 movev0,zero

Disassembly of section .rodata:

9d00bd44 <.rodata>:
9d00bd44:00000043 srazero,zero,0x1
